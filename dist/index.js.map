{"version":3,"file":"index.js","sources":["../src/context/FormBuilderContext.tsx","../src/data/formFields.ts","../src/utils/fieldStyles.ts","../src/components/SignaturePad.tsx","../src/components/FormFieldRenderer.tsx","../src/components/SortableFormField.tsx","../src/utils/layoutUtils.ts","../src/components/FormRowRenderer.tsx","../src/components/FormRenderer.tsx","../src/utils/formExport.ts","../src/components/FormCanvas.tsx","../src/components/FieldSidebar.tsx","../src/components/PropertiesPanel.tsx","../src/components/FormBuilderToolbar.tsx","../src/examples/JsonFormRenderer.tsx","../src/pages/AnnouncementPage.tsx","../src/pages/DocumentationPage.tsx","../src/pages/WhatsNewPage.tsx","../src/App.tsx","../src/components/FormBuilderSuite.tsx"],"sourcesContent":["import React, { createContext, useContext, useReducer } from 'react';\nimport type { ReactNode } from 'react';\nimport type { FormConfig, FormField, FormSettings } from '../types/form';\nimport { v4 as uuidv4 } from 'uuid';\n\n// Helper function to generate unique field names with auto-numbering\nfunction generateUniqueFieldName(field: FormField, existingFields: FormField[]): string {\n  // If field already has a name, use it\n  if (field.name && field.name.trim()) {\n    return field.name;\n  }\n\n  // Generate base name from field type\n  const baseName = field.type.replace(/[-_]/g, '_').toLowerCase();\n  \n  // Check if base name already exists\n  const existingNames = existingFields.map(f => f.name).filter(Boolean);\n  \n  if (!existingNames.includes(baseName)) {\n    return baseName;\n  }\n  \n  // Find the next available number\n  let counter = 2;\n  let uniqueName = `${baseName}${counter}`;\n  \n  while (existingNames.includes(uniqueName)) {\n    counter++;\n    uniqueName = `${baseName}${counter}`;\n  }\n  \n  return uniqueName;\n}\n\ninterface FormBuilderState {\n  currentForm: FormConfig;\n  selectedFieldId: string | null;\n  previewMode: boolean;\n  deviceView: 'desktop' | 'tablet' | 'mobile';\n}\n\ntype FormBuilderAction =\n  | { type: 'SET_FORM'; payload: FormConfig }\n  | { type: 'ADD_FIELD'; payload: FormField }\n  | { type: 'UPDATE_FIELD'; payload: { id: string; updates: Partial<FormField> } }\n  | { type: 'UPDATE_FIELD_PROPERTIES'; payload: { id: string; properties: any } }\n  | { type: 'UPDATE_FIELD_ADVANCED'; payload: { id: string; advanced: any } }\n  | { type: 'UPDATE_FIELD_CUSTOM'; payload: { id: string; custom: any } }\n  | { type: 'UPDATE_FIELD_EVENTS'; payload: { id: string; events: any } }\n  | { type: 'UPDATE_FIELD_SCHEMA'; payload: { id: string; schema: any } }\n  | { type: 'UPDATE_FIELD_LAYOUT'; payload: { id: string; layout: any } }\n  | { type: 'DELETE_FIELD'; payload: string }\n  | { type: 'REORDER_FIELDS'; payload: { oldIndex: number; newIndex: number } }\n  | { type: 'SELECT_FIELD'; payload: string | null }\n  | { type: 'SET_PREVIEW_MODE'; payload: boolean }\n  | { type: 'SET_DEVICE_VIEW'; payload: 'desktop' | 'tablet' | 'mobile' }\n  | { type: 'UPDATE_FORM_SETTINGS'; payload: Partial<FormSettings> }\n  | { type: 'UPDATE_FORM_META'; payload: { title?: string; description?: string } };\n\nconst initialState: FormBuilderState = {\n  currentForm: {\n    id: uuidv4(),\n    title: 'New Form',\n    description: '',\n    fields: [],\n    settings: {\n      submitButtonText: 'Submit',\n      allowMultipleSubmissions: true,\n      requireAuth: false,\n      captchaEnabled: false,\n      theme: 'auto'\n    }\n  },\n  selectedFieldId: null,\n  previewMode: false,\n  deviceView: 'desktop'\n};\n\nfunction formBuilderReducer(state: FormBuilderState, action: FormBuilderAction): FormBuilderState {\n  switch (action.type) {\n    case 'SET_FORM':\n      return {\n        ...state,\n        currentForm: action.payload,\n        selectedFieldId: null\n      };\n\n    case 'ADD_FIELD':\n      const fieldWithUniqueName = {\n        ...action.payload,\n        name: generateUniqueFieldName(action.payload, state.currentForm.fields)\n      };\n      return {\n        ...state,\n        currentForm: {\n          ...state.currentForm,\n          fields: [...state.currentForm.fields, fieldWithUniqueName]\n        },\n        selectedFieldId: action.payload.id\n      };\n\n    case 'UPDATE_FIELD':\n      return {\n        ...state,\n        currentForm: {\n          ...state.currentForm,\n          fields: state.currentForm.fields.map(field =>\n            field.id === action.payload.id\n              ? {\n                  ...field,\n                  ...action.payload.updates,\n                  // Deep merge nested objects to prevent component remounting\n                  properties: action.payload.updates.properties\n                    ? { ...field.properties, ...action.payload.updates.properties }\n                    : field.properties,\n                  advanced: action.payload.updates.advanced\n                    ? { ...field.advanced, ...action.payload.updates.advanced }\n                    : field.advanced,\n                  custom: action.payload.updates.custom\n                    ? { ...field.custom, ...action.payload.updates.custom }\n                    : field.custom,\n                  events: action.payload.updates.events\n                    ? { ...field.events, ...action.payload.updates.events }\n                    : field.events,\n                  schema: action.payload.updates.schema\n                    ? { ...field.schema, ...action.payload.updates.schema }\n                    : field.schema,\n                  layout: action.payload.updates.layout\n                    ? { ...field.layout, ...action.payload.updates.layout }\n                    : field.layout\n                }\n              : field\n          )\n        }\n      };\n\n    case 'UPDATE_FIELD_PROPERTIES':\n      return {\n        ...state,\n        currentForm: {\n          ...state.currentForm,\n          fields: state.currentForm.fields.map(field =>\n            field.id === action.payload.id\n              ? { ...field, properties: { ...field.properties, ...action.payload.properties } }\n              : field\n          )\n        }\n      };\n\n    case 'UPDATE_FIELD_ADVANCED':\n      return {\n        ...state,\n        currentForm: {\n          ...state.currentForm,\n          fields: state.currentForm.fields.map(field =>\n            field.id === action.payload.id\n              ? { ...field, advanced: { ...field.advanced, ...action.payload.advanced } }\n              : field\n          )\n        }\n      };\n\n    case 'UPDATE_FIELD_CUSTOM':\n      return {\n        ...state,\n        currentForm: {\n          ...state.currentForm,\n          fields: state.currentForm.fields.map(field =>\n            field.id === action.payload.id\n              ? { ...field, custom: { ...field.custom, ...action.payload.custom } }\n              : field\n          )\n        }\n      };\n\n    case 'UPDATE_FIELD_EVENTS':\n      return {\n        ...state,\n        currentForm: {\n          ...state.currentForm,\n          fields: state.currentForm.fields.map(field =>\n            field.id === action.payload.id\n              ? { ...field, events: { ...field.events, ...action.payload.events } }\n              : field\n          )\n        }\n      };\n\n    case 'UPDATE_FIELD_SCHEMA':\n      return {\n        ...state,\n        currentForm: {\n          ...state.currentForm,\n          fields: state.currentForm.fields.map(field =>\n            field.id === action.payload.id\n              ? { ...field, schema: { ...field.schema, ...action.payload.schema } }\n              : field\n          )\n        }\n      };\n\n    case 'UPDATE_FIELD_LAYOUT':\n      return {\n        ...state,\n        currentForm: {\n          ...state.currentForm,\n          fields: state.currentForm.fields.map(field =>\n            field.id === action.payload.id\n              ? { ...field, layout: { ...field.layout, ...action.payload.layout } }\n              : field\n          )\n        }\n      };\n\n    case 'DELETE_FIELD':\n      return {\n        ...state,\n        currentForm: {\n          ...state.currentForm,\n          fields: state.currentForm.fields.filter(field => field.id !== action.payload)\n        },\n        selectedFieldId: state.selectedFieldId === action.payload ? null : state.selectedFieldId\n      };\n\n    case 'REORDER_FIELDS':\n      const fields = [...state.currentForm.fields];\n      const [removed] = fields.splice(action.payload.oldIndex, 1);\n      fields.splice(action.payload.newIndex, 0, removed);\n      return {\n        ...state,\n        currentForm: {\n          ...state.currentForm,\n          fields\n        }\n      };\n\n    case 'SELECT_FIELD':\n      return {\n        ...state,\n        selectedFieldId: action.payload\n      };\n\n    case 'SET_PREVIEW_MODE':\n      return {\n        ...state,\n        previewMode: action.payload,\n        selectedFieldId: action.payload ? null : state.selectedFieldId\n      };\n\n    case 'SET_DEVICE_VIEW':\n      return {\n        ...state,\n        deviceView: action.payload\n      };\n\n    case 'UPDATE_FORM_SETTINGS':\n      return {\n        ...state,\n        currentForm: {\n          ...state.currentForm,\n          settings: {\n            ...state.currentForm.settings,\n            ...action.payload\n          }\n        }\n      };\n\n    case 'UPDATE_FORM_META':\n      return {\n        ...state,\n        currentForm: {\n          ...state.currentForm,\n          title: action.payload.title ?? state.currentForm.title,\n          description: action.payload.description ?? state.currentForm.description\n        }\n      };\n\n    default:\n      return state;\n  }\n}\n\ninterface FormBuilderContextType {\n  state: FormBuilderState;\n  dispatch: React.Dispatch<FormBuilderAction>;\n  actions: {\n    setForm: (form: FormConfig) => void;\n    addField: (field: FormField) => void;\n    updateField: (id: string, updates: Partial<FormField>) => void;\n    updateFieldProperties: (id: string, properties: any) => void;\n    updateFieldAdvanced: (id: string, advanced: any) => void;\n    updateFieldCustom: (id: string, custom: any) => void;\n    updateFieldEvents: (id: string, events: any) => void;\n    updateFieldSchema: (id: string, schema: any) => void;\n    updateFieldLayout: (id: string, layout: any) => void;\n    deleteField: (id: string) => void;\n    reorderFields: (oldIndex: number, newIndex: number) => void;\n    selectField: (id: string | null) => void;\n    setPreviewMode: (enabled: boolean) => void;\n    setDeviceView: (view: 'desktop' | 'tablet' | 'mobile') => void;\n    updateFormSettings: (settings: Partial<FormSettings>) => void;\n    updateFormMeta: (meta: { title?: string; description?: string }) => void;\n  };\n}\n\nconst FormBuilderContext = createContext<FormBuilderContextType | undefined>(undefined);\n\nexport function FormBuilderProvider({ children }: { children: ReactNode }) {\n  const [state, dispatch] = useReducer(formBuilderReducer, initialState);\n\n  const actions = {\n    setForm: (form: FormConfig) => dispatch({ type: 'SET_FORM', payload: form }),\n    addField: (field: FormField) => dispatch({ type: 'ADD_FIELD', payload: field }),\n    updateField: (id: string, updates: Partial<FormField>) => \n      dispatch({ type: 'UPDATE_FIELD', payload: { id, updates } }),\n    updateFieldProperties: (id: string, properties: any) => \n      dispatch({ type: 'UPDATE_FIELD_PROPERTIES', payload: { id, properties } }),\n    updateFieldAdvanced: (id: string, advanced: any) => \n      dispatch({ type: 'UPDATE_FIELD_ADVANCED', payload: { id, advanced } }),\n    updateFieldCustom: (id: string, custom: any) => \n      dispatch({ type: 'UPDATE_FIELD_CUSTOM', payload: { id, custom } }),\n    updateFieldEvents: (id: string, events: any) => \n      dispatch({ type: 'UPDATE_FIELD_EVENTS', payload: { id, events } }),\n    updateFieldSchema: (id: string, schema: any) => \n      dispatch({ type: 'UPDATE_FIELD_SCHEMA', payload: { id, schema } }),\n    updateFieldLayout: (id: string, layout: any) => \n      dispatch({ type: 'UPDATE_FIELD_LAYOUT', payload: { id, layout } }),\n    deleteField: (id: string) => dispatch({ type: 'DELETE_FIELD', payload: id }),\n    reorderFields: (oldIndex: number, newIndex: number) => \n      dispatch({ type: 'REORDER_FIELDS', payload: { oldIndex, newIndex } }),\n    selectField: (id: string | null) => dispatch({ type: 'SELECT_FIELD', payload: id }),\n    setPreviewMode: (enabled: boolean) => dispatch({ type: 'SET_PREVIEW_MODE', payload: enabled }),\n    setDeviceView: (view: 'desktop' | 'tablet' | 'mobile') => \n      dispatch({ type: 'SET_DEVICE_VIEW', payload: view }),\n    updateFormSettings: (settings: Partial<FormSettings>) => \n      dispatch({ type: 'UPDATE_FORM_SETTINGS', payload: settings }),\n    updateFormMeta: (meta: { title?: string; description?: string }) => \n      dispatch({ type: 'UPDATE_FORM_META', payload: meta })\n  };\n\n  return (\n    <FormBuilderContext.Provider value={{ state, dispatch, actions }}>\n      {children}\n    </FormBuilderContext.Provider>\n  );\n}\n\nexport function useFormBuilder() {\n  const context = useContext(FormBuilderContext);\n  if (context === undefined) {\n    throw new Error('useFormBuilder must be used within a FormBuilderProvider');\n  }\n  return context;\n}\n","import type { FormField, FormFieldType, DragItem } from '../types/form';\nimport { v4 as uuidv4 } from 'uuid';\n\n/**\n * Creates a new form field with default properties\n */\nexport function createFormField(type: FormFieldType): FormField {\n  const baseField = {\n    id: uuidv4(),\n    type,\n    label: getDefaultLabel(type),\n    required: false,\n    properties: {},\n    advanced: {\n      valued: true,\n      valueType: 'string' as const,\n      dataBindingType: 'twoWay' as const,\n      calculable: false,\n      localizable: false,\n      readOnly: false,\n      disabled: false,\n      asyncValidation: false,\n      deferFieldCalculation: false\n    },\n    layout: {\n      columnSpan: 12,\n      gridClass: 'col-span-12'\n    },\n    custom: {\n      cssClasses: [],\n      dataAttributes: {}\n    },\n    events: {},\n    schema: {\n      componentKind: 'component' as const,\n      category: getCategoryForType(type),\n      typeName: type,\n      icon: getIconForType(type),\n      nestingLevel: 0,\n      builderOnly: false\n    }\n  };\n\n  // Add type-specific properties\n  switch (type) {\n    case 'text':\n    case 'email':\n    case 'password':\n    case 'phone':\n    case 'url':\n      return {\n        ...baseField,\n        placeholder: `Enter ${baseField.label.toLowerCase()}`,\n        properties: {\n          ...baseField.properties,\n          width: 'full',\n          maxLength: 255,\n          colorVariant: 'default',\n          size: 'md',\n          borderRadius: 'md'\n        }\n      };\n\n    case 'textarea':\n      return {\n        ...baseField,\n        placeholder: `Enter ${baseField.label.toLowerCase()}`,\n        properties: {\n          ...baseField.properties,\n          width: 'full',\n          rows: 4,\n          maxLength: 1000,\n          colorVariant: 'default',\n          size: 'md',\n          borderRadius: 'md'\n        }\n      };\n\n    case 'number':\n    case 'number-format':\n      return {\n        ...baseField,\n        placeholder: 'Enter number',\n        properties: {\n          ...baseField.properties,\n          width: 'full'\n        },\n        advanced: {\n          ...baseField.advanced,\n          valueType: 'number' as const\n        }\n      };\n\n    case 'select':\n    case 'radio':\n    case 'checkbox':\n    case 'multiselect':\n    case 'autocomplete':\n      return {\n        ...baseField,\n        options: [\n          { label: 'Option 1', value: 'option1' },\n          { label: 'Option 2', value: 'option2' }\n        ],\n        properties: {\n          ...baseField.properties,\n          width: 'full',\n          colorVariant: 'default',\n          size: 'md',\n          borderRadius: 'md',\n          orientation: type === 'radio' || type === 'checkbox' ? 'vertical' : undefined,\n          componentAlignment: type === 'radio' || type === 'checkbox' ? 'left' : undefined\n        },\n        advanced: {\n          ...baseField.advanced,\n          valueType: type === 'multiselect' || type === 'checkbox' ? 'array' as const : 'string' as const\n        }\n      };\n\n    case 'date':\n    case 'datetime':\n    case 'time':\n    case 'calendar':\n      return {\n        ...baseField,\n        properties: {\n          ...baseField.properties,\n          width: 'full'\n        },\n        advanced: {\n          ...baseField.advanced,\n          valueType: 'date' as const\n        }\n      };\n\n    case 'file':\n      return {\n        ...baseField,\n        properties: {\n          ...baseField.properties,\n          width: 'full',\n          accept: '',\n          multiple: false\n        },\n        advanced: {\n          ...baseField.advanced,\n          valueType: 'array' as const\n        }\n      };\n\n    case 'rating':\n    case 'range':\n      return {\n        ...baseField,\n        properties: {\n          ...baseField.properties,\n          width: 'full',\n          max: 5,\n          componentAlignment: type === 'rating' ? 'left' : undefined\n        },\n        advanced: {\n          ...baseField.advanced,\n          valueType: 'number' as const\n        }\n      };\n\n    case 'switch':\n      return {\n        ...baseField,\n        properties: {\n          ...baseField.properties,\n          width: 'full',\n          size: 'md',\n          componentAlignment: 'left'\n        },\n        advanced: {\n          ...baseField.advanced,\n          valueType: 'boolean' as const\n        }\n      };\n\n    case 'signature':\n      return {\n        ...baseField,\n        properties: {\n          ...baseField.properties,\n          width: 'full'\n        },\n        advanced: {\n          ...baseField.advanced,\n          valueType: 'string' as const\n        }\n      };\n\n    // Static content fields\n    case 'header':\n      return {\n        ...baseField,\n        label: 'Header',\n        properties: {\n          ...baseField.properties,\n          width: 'full'\n        },\n        advanced: {\n          ...baseField.advanced,\n          valued: false\n        }\n      };\n\n    case 'paragraph':\n    case 'label':\n    case 'message':\n      return {\n        ...baseField,\n        label: 'Paragraph',\n        properties: {\n          ...baseField.properties,\n          width: 'full'\n        },\n        advanced: {\n          ...baseField.advanced,\n          valued: false\n        }\n      };\n\n    case 'image':\n      return {\n        ...baseField,\n        label: 'Image',\n        properties: {\n          ...baseField.properties,\n          width: 'full'\n        },\n        advanced: {\n          ...baseField.advanced,\n          valued: false\n        }\n      };\n\n    case 'button':\n      return {\n        ...baseField,\n        label: 'Button',\n        properties: {\n          ...baseField.properties,\n          width: 'full',\n          colorVariant: 'primary',\n          size: 'md',\n          borderRadius: 'md',\n          variant: 'solid'\n        },\n        advanced: {\n          ...baseField.advanced,\n          valued: false\n        }\n      };\n\n    // Structure fields\n    case 'section':\n    case 'pagebreak':\n      return {\n        ...baseField,\n        label: 'Section',\n        properties: {\n          ...baseField.properties,\n          width: 'full'\n        },\n        advanced: {\n          ...baseField.advanced,\n          valued: false\n        }\n      };\n\n    case 'container':\n    case 'card':\n      return {\n        ...baseField,\n        label: 'Container',\n        properties: {\n          ...baseField.properties,\n          width: 'full'\n        },\n        advanced: {\n          ...baseField.advanced,\n          valued: false\n        }\n      };\n\n    default:\n      return baseField;\n  }\n}\n\nfunction getDefaultLabel(type: FormFieldType): string {\n  const labels: Record<FormFieldType, string> = {\n    // Input fields\n    text: 'Text Input',\n    email: 'Email',\n    password: 'Password',\n    number: 'Number',\n    phone: 'Phone',\n    url: 'URL',\n    textarea: 'Text Area',\n    \n    // Selection fields\n    select: 'Select',\n    multiselect: 'Multi Select',\n    radio: 'Radio Group',\n    checkbox: 'Checkbox Group',\n    switch: 'Switch',\n    autocomplete: 'Auto Complete',\n    search: 'Search',\n    \n    // Date/Time fields\n    date: 'Date',\n    datetime: 'Date Time',\n    time: 'Time',\n    calendar: 'Calendar',\n    \n    // Special fields\n    file: 'File Upload',\n    rating: 'Rating',\n    signature: 'Signature',\n    range: 'Range Slider',\n    'rich-text': 'Rich Text',\n    'number-format': 'Formatted Number',\n    'pattern-format': 'Pattern Format',\n    \n    // Static content\n    button: 'Button',\n    label: 'Label',\n    header: 'Header',\n    paragraph: 'Paragraph',\n    image: 'Image',\n    message: 'Message',\n    'progress-line': 'Progress Line',\n    'progress-circle': 'Progress Circle',\n    tooltip: 'Tooltip',\n    'qr-code': 'QR Code',\n    html: 'HTML',\n    \n    // Structure\n    container: 'Container',\n    card: 'Card',\n    tab: 'Tab',\n    breadcrumb: 'Breadcrumb',\n    section: 'Section',\n    pagebreak: 'Page Break',\n    repeater: 'Repeater',\n    \n    // Template fields\n    slot: 'Slot',\n    template: 'Template',\n    \n    // Error fields\n    'error-message': 'Error Message'\n  };\n  \n  return labels[type] || 'Field';\n}\n\nfunction getCategoryForType(type: FormFieldType): string {\n  const categories: Record<FormFieldType, string> = {\n    // Input fields\n    text: 'fields',\n    email: 'fields',\n    password: 'fields',\n    number: 'fields',\n    phone: 'fields',\n    url: 'fields',\n    textarea: 'fields',\n    \n    // Selection fields\n    select: 'fields',\n    multiselect: 'fields',\n    radio: 'fields',\n    checkbox: 'fields',\n    switch: 'fields',\n    autocomplete: 'fields',\n    search: 'fields',\n    \n    // Date/Time fields\n    date: 'fields',\n    datetime: 'fields',\n    time: 'fields',\n    calendar: 'fields',\n    \n    // Special fields\n    file: 'fields',\n    rating: 'fields',\n    signature: 'fields',\n    range: 'fields',\n    'rich-text': 'fields',\n    'number-format': 'fields',\n    'pattern-format': 'fields',\n    \n    // Static content\n    button: 'static',\n    label: 'static',\n    header: 'static',\n    paragraph: 'static',\n    image: 'static',\n    message: 'static',\n    'progress-line': 'static',\n    'progress-circle': 'static',\n    tooltip: 'static',\n    'qr-code': 'static',\n    html: 'static',\n    \n    // Structure\n    container: 'structure',\n    card: 'structure',\n    tab: 'structure',\n    breadcrumb: 'structure',\n    section: 'structure',\n    pagebreak: 'structure',\n    repeater: 'structure',\n    \n    // Template fields\n    slot: 'templates',\n    template: 'templates',\n    \n    // Error fields\n    'error-message': 'error'\n  };\n  \n  return categories[type] || 'fields';\n}\n\nfunction getIconForType(type: FormFieldType): string {\n  const icons: Record<FormFieldType, string> = {\n    // Input fields\n    text: 'Type',\n    email: 'Mail',\n    password: 'Key',\n    number: 'Hash',\n    phone: 'Phone',\n    url: 'Link',\n    textarea: 'FileText',\n    \n    // Selection fields\n    select: 'ChevronDown',\n    multiselect: 'List',\n    radio: 'Circle',\n    checkbox: 'Square',\n    switch: 'ToggleLeft',\n    autocomplete: 'Search',\n    search: 'Search',\n    \n    // Date/Time fields\n    date: 'Calendar',\n    datetime: 'Clock',\n    time: 'Clock',\n    calendar: 'Calendar',\n    \n    // Special fields\n    file: 'Upload',\n    rating: 'Star',\n    signature: 'PenTool',\n    range: 'Sliders',\n    'rich-text': 'FileText',\n    'number-format': 'Hash',\n    'pattern-format': 'Hash',\n    \n    // Static content\n    button: 'MousePointer',\n    label: 'Tag',\n    header: 'Heading',\n    paragraph: 'Type',\n    image: 'Image',\n    message: 'MessageSquare',\n    'progress-line': 'TrendingUp',\n    'progress-circle': 'Circle',\n    tooltip: 'Info',\n    'qr-code': 'QrCode',\n    html: 'Code',\n    \n    // Structure\n    container: 'Box',\n    card: 'Square',\n    tab: 'Tabs',\n    breadcrumb: 'ChevronRight',\n    section: 'Layout',\n    pagebreak: 'Scissors',\n    repeater: 'Copy',\n    \n    // Template fields\n    slot: 'Grid',\n    template: 'FileTemplate',\n    \n    // Error fields\n    'error-message': 'AlertCircle'\n  };\n  \n  return icons[type] || 'Square';\n}\n\n/**\n * Field templates for the form builder\n */\nexport const FIELD_TEMPLATES: Record<FormFieldType, FormField> = {\n  // Input fields\n  text: createFormField('text'),\n  email: createFormField('email'),\n  password: createFormField('password'),\n  number: createFormField('number'),\n  phone: createFormField('phone'),\n  url: createFormField('url'),\n  textarea: createFormField('textarea'),\n  \n  // Selection fields\n  select: createFormField('select'),\n  multiselect: createFormField('multiselect'),\n  radio: createFormField('radio'),\n  checkbox: createFormField('checkbox'),\n  switch: createFormField('switch'),\n  autocomplete: createFormField('autocomplete'),\n  search: createFormField('search'),\n  \n  // Date/Time fields\n  date: createFormField('date'),\n  datetime: createFormField('datetime'),\n  time: createFormField('time'),\n  calendar: createFormField('calendar'),\n  \n  // Special fields\n  file: createFormField('file'),\n  rating: createFormField('rating'),\n  signature: createFormField('signature'),\n  range: createFormField('range'),\n  'rich-text': createFormField('rich-text'),\n  'number-format': createFormField('number-format'),\n  'pattern-format': createFormField('pattern-format'),\n  \n  // Static content\n  button: createFormField('button'),\n  label: createFormField('label'),\n  header: createFormField('header'),\n  paragraph: createFormField('paragraph'),\n  image: createFormField('image'),\n  message: createFormField('message'),\n  'progress-line': createFormField('progress-line'),\n  'progress-circle': createFormField('progress-circle'),\n  tooltip: createFormField('tooltip'),\n  'qr-code': createFormField('qr-code'),\n  html: createFormField('html'),\n  \n  // Structure\n  container: createFormField('container'),\n  card: createFormField('card'),\n  tab: createFormField('tab'),\n  breadcrumb: createFormField('breadcrumb'),\n  section: createFormField('section'),\n  pagebreak: createFormField('pagebreak'),\n  repeater: createFormField('repeater'),\n  \n  // Template fields\n  slot: createFormField('slot'),\n  template: createFormField('template'),\n  \n  // Error fields\n  'error-message': createFormField('error-message')\n};\n\n/**\n * Drag items for the sidebar (most commonly used components)\n */\nexport const DRAG_ITEMS: DragItem[] = [\n  // Most common input fields\n  { id: 'text', type: 'text', label: 'Text Input', icon: 'Type', category: 'fields' },\n  { id: 'email', type: 'email', label: 'Email', icon: 'Mail', category: 'fields' },\n  { id: 'password', type: 'password', label: 'Password', icon: 'Key', category: 'fields' },\n  { id: 'number', type: 'number', label: 'Number', icon: 'Hash', category: 'fields' },\n  { id: 'phone', type: 'phone', label: 'Phone', icon: 'Phone', category: 'fields' },\n  { id: 'textarea', type: 'textarea', label: 'Text Area', icon: 'FileText', category: 'fields' },\n  \n  // Selection fields\n  { id: 'select', type: 'select', label: 'Select', icon: 'ChevronDown', category: 'fields' },\n  {\n  id: \"multiselect\",\n  type: \"multiselect\",\n  label: \"Multi Select\",\n  icon: \"ListChecks\", // or any icon you want\n  category: \"fields\" // or the correct category id\n},\n  { id: 'autocomplete', type: 'autocomplete', label: 'Auto Complete', icon: 'Search', category: 'fields' },\n  { id: 'radio', type: 'radio', label: 'Radio Group', icon: 'Circle', category: 'fields' },\n  { id: 'checkbox', type: 'checkbox', label: 'Checkbox Group', icon: 'Square', category: 'fields' },\n  { id: 'switch', type: 'switch', label: 'Switch', icon: 'ToggleLeft', category: 'fields' },\n  \n  // Date/Time fields\n  { id: 'date', type: 'date', label: 'Date', icon: 'Calendar', category: 'fields' },\n  { id: 'time', type: 'time', label: 'Time', icon: 'Clock', category: 'fields' },\n  \n  // Special fields\n  { id: 'file', type: 'file', label: 'File Upload', icon: 'Upload', category: 'fields' },\n  { id: 'rating', type: 'rating', label: 'Rating', icon: 'Star', category: 'fields' },\n  \n  // Static content\n  { id: 'header', type: 'header', label: 'Header', icon: 'Heading', category: 'static' },\n  { id: 'paragraph', type: 'paragraph', label: 'Paragraph', icon: 'Type', category: 'static' },\n  { id: 'image', type: 'image', label: 'Image', icon: 'Image', category: 'static' },\n  { id: 'button', type: 'button', label: 'Button', icon: 'MousePointer', category: 'static' },\n  \n  // Structure\n  { id: 'section', type: 'section', label: 'Section', icon: 'Layout', category: 'structure' },\n  { id: 'container', type: 'container', label: 'Container', icon: 'Box', category: 'structure' },\n  { id: 'card', type: 'card', label: 'Card', icon: 'Square', category: 'structure' }\n];\n\n/**\n * Field categories for organizing the sidebar\n */\nexport const FIELD_CATEGORIES = [\n  {\n    id: 'fields',\n    label: 'Form Fields',\n    description: 'Input and selection fields'\n  },\n  {\n    id: 'static',\n    label: 'Static Content',\n    description: 'Text, images, and layout elements'\n  },\n  {\n    id: 'structure',\n    label: 'Structure',\n    description: 'Containers and layout components'\n  },\n  {\n    id: 'templates',\n    label: 'Templates',\n    description: 'Pre-built field combinations'\n  },\n  {\n    id: 'error',\n    label: 'Error Handling',\n    description: 'Error display components'\n  }\n];\n","import type { FormField } from '../types/form';\n\n// Build HeroUI-specific classNames object for components\nexport function buildHeroUIClasses(field: FormField, isEditor: boolean = false) {\n  const borderRadius = getBorderRadiusClass(field.properties?.borderRadius);\n  const spacing = getSpacingClasses(field);\n  const responsive = getResponsiveClasses(field, isEditor);\n  \n  // Get custom CSS classes from both legacy (properties) and new (custom) locations\n  const legacyClasses = field.properties?.customClasses || '';\n  const newClasses = field.custom?.cssClasses?.join(' ') || '';\n  const allCustomClasses = [legacyClasses, newClasses].filter(Boolean).join(' ');\n  \n  // Parse custom classes and categorize them for appropriate HeroUI slots\n  const customClasses = parseCustomClasses(allCustomClasses);\n  \n  // Get user-defined classNames from properties\n  const userClassNames = field.properties?.classNames || {};\n\n  // Helper function to ensure Tailwind classes have proper specificity\n  const ensureTailwindPrecedence = (userClass: string) => {\n    if (!userClass) return '';\n    // For color classes, ensure they override HeroUI defaults\n    if (userClass.includes('text-') || userClass.includes('bg-') || userClass.includes('border-')) {\n      return userClass;\n    }\n    return userClass;\n  };\n\n  const result = {\n    // Base wrapper/container classes - for outer spacing and visibility\n    base: [\n      spacing.margin,\n      spacing.padding,\n      !isEditor ? responsive.visibility : '', // Only apply responsive hiding in preview/renderer\n      customClasses.wrapper,\n      userClassNames.base || ''\n    ].filter(Boolean).join(' '),\n    \n    // Label classes - ensure custom classes take precedence\n    label: [\n      'text-left', // Ensure labels are left-aligned by default\n      customClasses.label,\n      ensureTailwindPrecedence(userClassNames.label || '')\n    ].filter(Boolean).join(' '),\n    \n    // Input wrapper classes - for border, shadow, background, etc.\n    inputWrapper: [\n      borderRadius,\n      customClasses.inputWrapper,\n      ensureTailwindPrecedence(userClassNames.inputWrapper || '')\n    ].filter(Boolean).join(' '),\n    \n    // Inner wrapper classes\n    innerWrapper: [\n      ensureTailwindPrecedence(userClassNames.innerWrapper || '')\n    ].filter(Boolean).join(' '),\n    \n    // Main wrapper classes\n    mainWrapper: [\n      ensureTailwindPrecedence(userClassNames.mainWrapper || '')\n    ].filter(Boolean).join(' '),\n    \n    // Input field classes - ensure custom text styles take precedence\n    input: [\n      field.properties?.alignment || '',\n      customClasses.input,\n      ensureTailwindPrecedence(userClassNames.input || '')\n    ].filter(Boolean).join(' '),\n    \n    // Clear button classes\n    clearButton: [\n      ensureTailwindPrecedence(userClassNames.clearButton || '')\n    ].filter(Boolean).join(' '),\n    \n    // Helper wrapper classes\n    helperWrapper: [\n      ensureTailwindPrecedence(userClassNames.helperWrapper || '')\n    ].filter(Boolean).join(' '),\n    \n    // Description classes\n    description: [\n      'text-left', // Ensure description text is left-aligned\n      customClasses.description,\n      ensureTailwindPrecedence(userClassNames.description || '')\n    ].filter(Boolean).join(' '),\n    \n    // Error message classes\n    errorMessage: [\n      ensureTailwindPrecedence(userClassNames.errorMessage || '')\n    ].filter(Boolean).join(' ')\n  };\n\n  return result;\n}\n\n// Parse custom CSS classes and categorize them for appropriate HeroUI component slots\nfunction parseCustomClasses(customClasses: string) {\n  if (!customClasses.trim()) {\n    return {\n      wrapper: '',\n      inputWrapper: '',\n      input: '',\n      label: '',\n      description: ''\n    };\n  }\n\n  const classes = customClasses.trim().split(/\\s+/);\n  const result = {\n    wrapper: [] as string[],\n    inputWrapper: [] as string[],\n    input: [] as string[],\n    label: [] as string[],\n    description: [] as string[]\n  };\n\n  classes.forEach(className => {\n    // Input wrapper styles (border, shadow, background, rounded, etc.)\n    if (className.match(/^(border|shadow|bg-|rounded|ring)/)) {\n      result.inputWrapper.push(className);\n    }\n    // Text and font styling for input content\n    else if (className.match(/^(text-|font-|placeholder|italic|underline)/)) {\n      result.input.push(className);\n    }\n    // Layout and spacing classes go to wrapper\n    else if (className.match(/^(m[tlrb]?-|p[tlrb]?-|w-|h-|max-|min-|flex|grid|col-|row-|gap-|space-|justify-|items-|self-)/)) {\n      result.wrapper.push(className);\n    }\n    // Everything else goes to input wrapper by default\n    else {\n      result.inputWrapper.push(className);\n    }\n  });\n\n  return {\n    wrapper: result.wrapper.join(' '),\n    inputWrapper: result.inputWrapper.join(' '),\n    input: result.input.join(' '),\n    label: result.label.join(' '),\n    description: result.description.join(' ')\n  };\n}\n\nfunction getBorderRadiusClass(borderRadius?: string): string {\n  switch (borderRadius) {\n    case 'none':\n      return 'rounded-none';\n    case 'small':\n      return 'rounded-sm';\n    case 'default':\n      return 'rounded-md';\n    case 'large':\n      return 'rounded-lg';\n    case 'full':\n      return 'rounded-full';\n    default:\n      return '';\n  }\n}\n\nfunction getSpacingClasses(field: FormField) {\n  const marginTop = field.properties?.marginTop;\n  const marginBottom = field.properties?.marginBottom;\n  const padding = field.properties?.padding;\n\n  return {\n    margin: [\n      marginTop || '',\n      marginBottom || ''\n    ].filter(Boolean).join(' '),\n    \n    padding: padding || ''\n  };\n}\n\nfunction getResponsiveClasses(field: FormField, isEditor: boolean = false) {\n  const classes: string[] = [];\n  \n  // Only apply responsive hiding classes in preview/renderer, not in editor\n  if (!isEditor) {\n    if (field.properties?.hideOnMobile) {\n      classes.push('hidden sm:block');\n    }\n    if (field.properties?.hideOnTablet) {\n      classes.push('sm:hidden lg:block');\n    }\n    if (field.properties?.hideOnDesktop) {\n      classes.push('lg:hidden');\n    }\n  }\n\n  return {\n    visibility: classes.join(' ')\n  };\n}\n\n// Legacy function for backward compatibility\nexport function buildFieldClasses(field: FormField): string {\n  const heroUIClasses = buildHeroUIClasses(field);\n  return heroUIClasses.base;\n}\n\nexport function buildFieldWrapperClasses(field: FormField, isEditor: boolean = false): string {\n  const classes: string[] = [];\n\n  // Grid span classes\n  if (field.layout?.gridClass) {\n    classes.push(field.layout.gridClass);\n  }\n\n  // Add responsive visibility only for preview/renderer, not editor\n  const responsive = getResponsiveClasses(field, isEditor);\n  if (responsive.visibility) {\n    classes.push(responsive.visibility);\n  }\n\n  return classes.join(' ');\n}\n","import React, { useRef, useEffect, useState } from 'react';\nimport { Button } from '@heroui/react';\nimport { RotateCcw, Check } from 'lucide-react';\n\ninterface SignaturePadProps {\n  value?: string;\n  onChange?: (signature: string) => void;\n  width?: number;\n  height?: number;\n  disabled?: boolean;\n  className?: string;\n}\n\nexport function SignaturePad({ \n  value, \n  onChange, \n  width = 400, \n  height = 200, \n  disabled = false,\n  className = '' \n}: SignaturePadProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [isEmpty, setIsEmpty] = useState(true);\n  const [lastPos, setLastPos] = useState({ x: 0, y: 0 });\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Set canvas size\n    canvas.width = width;\n    canvas.height = height;\n\n    // Set drawing style\n    ctx.lineCap = 'round';\n    ctx.lineJoin = 'round';\n    ctx.strokeStyle = '#000000';\n    ctx.lineWidth = 2;\n\n    // Clear canvas with white background\n    ctx.fillStyle = '#ffffff';\n    ctx.fillRect(0, 0, width, height);\n\n    // Load existing signature if provided\n    if (value && value.startsWith('data:image')) {\n      const img = new Image();\n      img.onload = () => {\n        ctx.clearRect(0, 0, width, height);\n        ctx.fillStyle = '#ffffff';\n        ctx.fillRect(0, 0, width, height);\n        ctx.drawImage(img, 0, 0, width, height);\n        setIsEmpty(false);\n      };\n      img.src = value;\n    }\n  }, [width, height, value]);\n\n  const getEventPos = (event: React.MouseEvent | React.TouchEvent): { x: number; y: number } => {\n    const canvas = canvasRef.current;\n    if (!canvas) return { x: 0, y: 0 };\n\n    const rect = canvas.getBoundingClientRect();\n    const scaleX = canvas.width / rect.width;\n    const scaleY = canvas.height / rect.height;\n\n    if ('touches' in event) {\n      const touch = event.touches[0];\n      return {\n        x: (touch.clientX - rect.left) * scaleX,\n        y: (touch.clientY - rect.top) * scaleY\n      };\n    } else {\n      return {\n        x: (event.clientX - rect.left) * scaleX,\n        y: (event.clientY - rect.top) * scaleY\n      };\n    }\n  };\n\n  const startDrawing = (event: React.MouseEvent | React.TouchEvent) => {\n    if (disabled) return;\n    \n    event.preventDefault();\n    const pos = getEventPos(event);\n    setIsDrawing(true);\n    setLastPos(pos);\n    setIsEmpty(false);\n  };\n\n  const draw = (event: React.MouseEvent | React.TouchEvent) => {\n    if (!isDrawing || disabled) return;\n    \n    event.preventDefault();\n    const canvas = canvasRef.current;\n    const ctx = canvas?.getContext('2d');\n    if (!canvas || !ctx) return;\n\n    const currentPos = getEventPos(event);\n\n    ctx.beginPath();\n    ctx.moveTo(lastPos.x, lastPos.y);\n    ctx.lineTo(currentPos.x, currentPos.y);\n    ctx.stroke();\n\n    setLastPos(currentPos);\n  };\n\n  const stopDrawing = () => {\n    if (!isDrawing) return;\n    setIsDrawing(false);\n    saveSignature();\n  };\n\n  const saveSignature = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const dataURL = canvas.toDataURL('image/png');\n    onChange?.(dataURL);\n  };\n\n  const clearSignature = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas?.getContext('2d');\n    if (!canvas || !ctx) return;\n\n    ctx.fillStyle = '#ffffff';\n    ctx.fillRect(0, 0, width, height);\n    setIsEmpty(true);\n    onChange?.('');\n  };\n\n  return (\n    <div className={`signature-pad ${className}`}>\n      <div className=\"border-2 border-default-300 rounded-lg overflow-hidden bg-white\">\n        <canvas\n          ref={canvasRef}\n          className=\"block cursor-crosshair touch-none\"\n          style={{ width: '100%', height: 'auto', maxWidth: `${width}px` }}\n          onMouseDown={startDrawing}\n          onMouseMove={draw}\n          onMouseUp={stopDrawing}\n          onMouseLeave={stopDrawing}\n          onTouchStart={startDrawing}\n          onTouchMove={draw}\n          onTouchEnd={stopDrawing}\n        />\n      </div>\n      \n      <div className=\"flex justify-between items-center mt-3\">\n        <div className=\"text-xs text-default-500\">\n          {isEmpty ? 'Sign above' : 'Signature captured'}\n        </div>\n        <div className=\"flex gap-2\">\n          <Button\n            size=\"sm\"\n            variant=\"flat\"\n            color=\"warning\"\n            startContent={<RotateCcw size={16} />}\n            onPress={clearSignature}\n            isDisabled={disabled || isEmpty}\n          >\n            Clear\n          </Button>\n          {!isEmpty && (\n            <Button\n              size=\"sm\"\n              color=\"success\"\n              variant=\"flat\"\n              startContent={<Check size={16} />}\n              onPress={saveSignature}\n              isDisabled={disabled}\n            >\n              Save\n            </Button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","import {\n  Input,\n  Textarea,\n  Select,\n  SelectItem,\n  Autocomplete,\n  AutocompleteItem,\n  Checkbox,\n  RadioGroup,\n  Radio,\n  Switch,\n  Card,\n  CardBody,\n  Divider,\n  DateInput,\n  TimeInput,\n  Button,\n} from \"@heroui/react\";\nimport React from \"react\";\nimport type { FormField } from \"../types/form\";\nimport { Star, Upload, Smartphone, Tablet, Monitor } from \"lucide-react\";\nimport { buildHeroUIClasses } from \"../utils/fieldStyles\";\nimport { SignaturePad } from \"./SignaturePad\";\n\ninterface FormFieldRendererProps {\n  field: FormField;\n  value?: any;\n  onChange?: (value: any) => void;\n  isPreview?: boolean;\n}\n\nexport function FormFieldRenderer({\n  field,\n  value,\n  onChange,\n}: FormFieldRendererProps) {\n  const handleChange = (newValue: any) => {\n    if (onChange) {\n      onChange(newValue);\n    }\n  };\n\n  // Hide field if conditional logic applies (simplified)\n  if (field.advanced?.hidden || field.properties?.hidden) {\n    return null;\n  }\n\n  // Build HeroUI-specific classes (pass isEditor: true to prevent responsive hiding in editor)\n  const heroUIClasses = buildHeroUIClasses(field, true);\n\n  // For complex components that need wrapper divs\n  const wrapperClasses = heroUIClasses.base;\n\n  // Generate responsive hide indicators for editor\n  const getResponsiveIndicators = () => {\n    const indicators = [];\n    if (field.properties?.hideOnMobile) {\n      indicators.push('Hidden on Mobile');\n    }\n    if (field.properties?.hideOnTablet) {\n      indicators.push('Hidden on Tablet');\n    }\n    if (field.properties?.hideOnDesktop) {\n      indicators.push('Hidden on Desktop');\n    }\n    return indicators;\n  };\n\n  const responsiveIndicators = getResponsiveIndicators();\n\n  // Wrapper component that shows responsive indicators in editor\n  const FieldWithIndicators = ({ children }: { children: React.ReactNode }) => {\n    if (responsiveIndicators.length === 0) {\n      return <>{children}</>;\n    }\n\n    return (\n      <div className=\"relative\">\n        {children}\n        <div className=\"absolute top-0 right-0 flex items-center gap-1 -mt-2 -mr-2 z-10\">\n          {responsiveIndicators.map((indicator) => (\n            <span\n              key={indicator}\n              className=\"text-danger-700 text-xs px-1.5 py-0.5 rounded-full \"\n              title={indicator}\n            >\n              {indicator.includes('Mobile') ? <Smartphone size={15} /> : indicator.includes('Tablet') ? <Tablet size={15} /> : <Monitor size={15} />}\n            </span>\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  // Helper function to wrap any field component with indicators\n  const wrapWithIndicators = (component: React.ReactNode) => (\n    <FieldWithIndicators>{component}</FieldWithIndicators>\n  );\n\n  // Common props for the form components\n  const commonProps = {\n    label: field.label,\n    placeholder: field.placeholder,\n    isRequired: field.required,\n    description: field.properties?.description,\n    isDisabled: field.advanced?.disabled || field.properties?.disabled,\n    isReadOnly: field.advanced?.readOnly || field.properties?.readonly,\n    size: field.properties?.size as any,\n    color: field.properties?.colorVariant as any,\n    variant: field.properties?.variant as any,\n    radius: field.properties?.borderRadius as any,\n    classNames: {\n      base: heroUIClasses.base,\n      label: heroUIClasses.label,\n      inputWrapper: heroUIClasses.inputWrapper,\n      innerWrapper: heroUIClasses.innerWrapper,\n      mainWrapper: heroUIClasses.mainWrapper,\n      input: heroUIClasses.input,\n      clearButton: heroUIClasses.clearButton,\n      helperWrapper: heroUIClasses.helperWrapper,\n      description: heroUIClasses.description,\n      errorMessage: heroUIClasses.errorMessage,\n    },\n  };\n\n  // Build HTML attributes for data attributes and accessibility\n  const buildHtmlAttributes = () => {\n    const attrs: Record<string, any> = {};\n    \n    // Add data attributes from custom properties\n    const dataAttributes = field.custom?.dataAttributes || {};\n    Object.entries(dataAttributes).forEach(([key, value]) => {\n      attrs[`data-${key}`] = value;\n    });\n    \n    // Add accessibility attributes\n    if (field.custom?.role) {\n      attrs['role'] = field.custom.role;\n    }\n    \n    if (field.custom?.tabIndex !== undefined) {\n      attrs['tabIndex'] = field.custom.tabIndex;\n    }\n    \n    if (field.properties?.ariaLabel) {\n      attrs['aria-label'] = field.properties.ariaLabel;\n    }\n    \n    // Add number input specific attributes\n    if (field.type === 'number') {\n      if (field.properties?.min !== undefined) {\n        attrs['min'] = field.properties.min;\n      }\n      if (field.properties?.max !== undefined) {\n        attrs['max'] = field.properties.max;\n      }\n      if (field.properties?.step !== undefined) {\n        attrs['step'] = field.properties.step;\n      }\n    }\n    \n    return attrs;\n  };\n\n  const htmlAttributes = buildHtmlAttributes();\n\n  // Add character count for text fields\n  const getCharacterCount = () => {\n    if (\n      field.properties?.showCharacterCount &&\n      (field.type === \"text\" || field.type === \"textarea\")\n    ) {\n      const currentLength = value ? value.length : 0;\n      const maxLength = field.properties?.maxLength;\n      return maxLength ? `${currentLength}/${maxLength}` : `${currentLength}`;\n    }\n    return null;\n  };\n\n  const characterCount = getCharacterCount();\n\n  switch (field.type) {\n    case \"text\":\n      return (\n        <FieldWithIndicators>\n          <Input\n            key={`text-${field.id}`}\n            {...commonProps}\n            {...htmlAttributes}\n            type=\"text\"\n            value={value || \"\"}\n            onValueChange={(val) => handleChange(val)}\n            maxLength={field.properties?.maxLength}\n          />\n          {characterCount && (\n            <div className=\"text-xs text-default-500 mt-1 text-right\">\n              {characterCount}\n            </div>\n          )}\n        </FieldWithIndicators>\n      );\n\n    case \"email\":\n      return (\n        <FieldWithIndicators>\n          <Input\n            key={`email-${field.id}`}\n            {...commonProps}\n            {...htmlAttributes}\n            type=\"email\"\n            value={value || \"\"}\n            onValueChange={(val) => handleChange(val)}\n          />\n        </FieldWithIndicators>\n      );\n\n    case \"password\":\n      return (\n        <FieldWithIndicators>\n          <Input\n            key={`password-${field.id}`}\n            {...commonProps}\n            {...htmlAttributes}\n            type=\"password\"\n            value={value || \"\"}\n            onValueChange={(val) => handleChange(val)}\n          />\n        </FieldWithIndicators>\n      );\n\n    case \"number\":\n      return wrapWithIndicators(\n        <Input\n          key={`number-${field.id}`}\n          {...commonProps}\n          {...htmlAttributes}\n          type=\"number\"\n          value={value || \"\"}\n          onValueChange={(val) => {\n            // Add client-side min/max validation\n            const numVal = parseFloat(val);\n            if (!isNaN(numVal)) {\n              if (field.properties?.min !== undefined && numVal < field.properties.min) {\n                return; // Don't update if below minimum\n              }\n              if (field.properties?.max !== undefined && numVal > field.properties.max) {\n                return; // Don't update if above maximum\n              }\n            }\n            handleChange(val);\n          }}\n        />\n      );\n\n    case \"date\":\n      return wrapWithIndicators(\n        <DateInput\n          key={`date-${field.id}`}\n          {...commonProps}\n          value={value || null}\n          onChange={(date) => {\n            if (date) {\n              // Convert to string format for form submission\n              handleChange(date.toString());\n            } else {\n              handleChange('');\n            }\n          }}\n        />\n      );\n\n    case \"datetime\":\n      return (\n        <DateInput\n          key={`datetime-${field.id}`}\n          {...commonProps}\n          granularity=\"second\"\n          value={value || null}\n          onChange={(date) => {\n            if (date) {\n              // Convert to string format for form submission\n              handleChange(date.toString());\n            } else {\n              handleChange('');\n            }\n          }}\n        />\n      );\n\n    case \"time\":\n      return (\n        <TimeInput\n          key={`time-${field.id}`}\n          {...commonProps}\n          value={value || null}\n          onChange={(time) => {\n            if (time) {\n              // Convert to string format for form submission\n              handleChange(time.toString());\n            } else {\n              handleChange('');\n            }\n          }}\n        />\n      );\n\n    case \"textarea\":\n      return wrapWithIndicators(\n        <>\n          <Textarea\n            key={`textarea-${field.id}`}\n            {...commonProps}\n            {...htmlAttributes}\n            value={value || \"\"}\n            onValueChange={(val) => handleChange(val)}\n            rows={field.properties?.rows || 4}\n            maxLength={field.properties?.maxLength}\n          />\n          {characterCount && (\n            <div className=\"text-xs text-default-500 mt-1 text-right\">\n              {characterCount}\n            </div>\n          )}\n        </>\n      );\n\n    case \"select\":\n      return wrapWithIndicators(\n        <Select\n          {...commonProps}\n          {...htmlAttributes}\n          selectedKeys={value ? [value] : []}\n          onSelectionChange={(keys) => {\n            const selectedValue = Array.from(keys)[0];\n            handleChange(selectedValue);\n          }}\n        >\n          {field.options?.map((option) => (\n            <SelectItem key={option.value}>{option.label}</SelectItem>\n          )) || []}\n        </Select>\n      );\n\n    case \"autocomplete\":\n      return wrapWithIndicators(\n        <Autocomplete\n          {...commonProps}\n          {...htmlAttributes}\n          selectedKey={value || \"\"}\n          onSelectionChange={(key) => {\n            handleChange(key);\n          }}\n          allowsCustomValue\n        >\n          {field.options?.map((option) => (\n            <AutocompleteItem key={option.value}>{option.label}</AutocompleteItem>\n          )) || []}\n        </Autocomplete>\n      );\n\n    case \"multiselect\":\n      return (\n        <Select\n          {...commonProps}\n          selectionMode=\"multiple\"\n          selectedKeys={value || []}\n          onSelectionChange={(keys) => {\n            handleChange(Array.from(keys));\n          }}\n        >\n          {field.options?.map((option) => (\n            <SelectItem key={option.value}>{option.label}</SelectItem>\n          )) || []}\n        </Select>\n      );\n\n    case \"radio\":\n      const radioOrientation = field.properties?.orientation || 'vertical';\n      const radioComponentAlignment = field.properties?.componentAlignment || 'left';\n      \n      // Alignment classes based on orientation and alignment preference\n      const radioAlignmentClass = radioOrientation === 'horizontal'\n        ? (radioComponentAlignment === 'center' ? 'justify-center' : \n           radioComponentAlignment === 'right' ? 'justify-end' : 'justify-start')\n        : (radioComponentAlignment === 'center' ? 'items-center' : \n           radioComponentAlignment === 'right' ? 'items-end' : 'items-start');\n      \n      const radioLabelAlignmentClass = radioComponentAlignment === 'center' ? 'text-center' : \n                                       radioComponentAlignment === 'right' ? 'text-right' : 'text-left';\n      \n      // Wrapper alignment for the entire component\n      const radioWrapperAlignmentClass = radioComponentAlignment === 'center' ? 'flex flex-col items-center' :\n                                        radioComponentAlignment === 'right' ? 'flex flex-col items-end' : \n                                        'flex flex-col items-start';\n      \n      return (\n        <div className={radioWrapperAlignmentClass}>\n          <RadioGroup\n            label={field.label}\n            description={field.properties?.description}\n            isRequired={field.required}\n            value={value || \"\"}\n            onValueChange={handleChange}\n            size={field.properties?.size as any}\n            color={field.properties?.colorVariant as any}\n            isDisabled={field.advanced?.disabled || field.properties?.disabled}\n            isReadOnly={field.advanced?.readOnly || field.properties?.readonly}\n            orientation={radioOrientation as any}\n            classNames={{\n              base: heroUIClasses.base,\n              label: `${heroUIClasses.label} ${radioLabelAlignmentClass}`,\n              wrapper: `${heroUIClasses.inputWrapper} ${radioAlignmentClass}`,\n            description: `${heroUIClasses.description} ${radioLabelAlignmentClass}`,\n          }}\n        >\n          {field.options?.map((option) => (\n            <Radio key={option.value} value={option.value}>\n              {option.label}\n            </Radio>\n          )) || []}\n        </RadioGroup>\n        </div>\n      );\n\n    case \"checkbox\":\n      if (field.options && field.options.length > 1) {\n        // Multiple checkboxes\n        const orientation = field.properties?.orientation || 'vertical';\n        const componentAlignment = field.properties?.componentAlignment || 'left';\n        \n        // Container classes based on orientation\n        const containerClass = orientation === 'horizontal' \n          ? 'flex flex-wrap gap-4' \n          : 'flex flex-col space-y-2';\n          \n        // Alignment classes based on orientation and alignment preference\n        const alignmentClass = orientation === 'horizontal'\n          ? (componentAlignment === 'center' ? 'justify-center' : \n             componentAlignment === 'right' ? 'justify-end' : 'justify-start')\n          : (componentAlignment === 'center' ? 'items-center' : \n             componentAlignment === 'right' ? 'items-end' : 'items-start');\n        \n        const labelAlignmentClass = componentAlignment === 'center' ? 'text-center' : \n                                   componentAlignment === 'right' ? 'text-right' : 'text-left';\n        \n        // Wrapper alignment for the entire component\n        const wrapperAlignmentClass = componentAlignment === 'center' ? 'flex flex-col items-center' :\n                                     componentAlignment === 'right' ? 'flex flex-col items-end' : \n                                     'flex flex-col items-start';\n        \n        return (\n          <div className={`space-y-2 ${wrapperClasses} ${wrapperAlignmentClass}`}>\n            <label className={`text-sm font-medium ${labelAlignmentClass}`}>\n              {field.label}\n              {field.required && <span className=\"text-danger\">*</span>}\n            </label>\n            {field.properties?.description && (\n              <p className={`text-xs text-default-500 ${labelAlignmentClass}`}>\n                {field.properties?.description}\n              </p>\n            )}\n            <div className={`${containerClass} ${alignmentClass}`}>\n              {field.options.map((option) => (\n                <Checkbox\n                  key={option.value}\n                  value={option.value}\n                  isSelected={value?.includes?.(option.value) || false}\n                  onValueChange={(checked) => {\n                    const currentValues = value || [];\n                    if (checked) {\n                      handleChange([...currentValues, option.value]);\n                    } else {\n                      handleChange(\n                        currentValues.filter((v: any) => v !== option.value)\n                      );\n                    }\n                  }}\n                  size={field.properties?.size as any}\n                  color={field.properties?.colorVariant as any}\n                  radius={field.properties?.borderRadius as any}\n                  isDisabled={field.advanced?.disabled || field.properties?.disabled}\n                  isReadOnly={field.advanced?.readOnly || field.properties?.readonly}\n                >\n                  {option.label}\n                </Checkbox>\n              ))}\n            </div>\n          </div>\n        );\n      } else {\n        // Single checkbox\n        const checkboxComponentAlignment = field.properties?.componentAlignment || 'left';\n        const checkboxAlignmentClass = checkboxComponentAlignment === 'center' ? 'flex justify-center' : \n                                       checkboxComponentAlignment === 'right' ? 'flex justify-end' : 'flex justify-start';\n        const checkboxLabelAlignmentClass = checkboxComponentAlignment === 'center' ? 'text-center' : \n                                           checkboxComponentAlignment === 'right' ? 'text-right' : 'text-left';\n        \n        return (\n          <div className={`${wrapperClasses} ${checkboxAlignmentClass} flex-col items-start`}>\n            <label className={`text-sm font-medium ${checkboxLabelAlignmentClass} block mb-2`}>\n              {field.label}\n              {field.required && <span className=\"text-danger\">*</span>}\n            </label>\n            {field.properties?.description && (\n              <p className={`text-xs text-default-500 mb-2 ${checkboxLabelAlignmentClass}`}>\n                {field.properties?.description}\n              </p>\n            )}\n            <Checkbox\n              isSelected={value || false}\n              onValueChange={handleChange}              size={field.properties?.size as any}\n              color={field.properties?.colorVariant as any}\n              radius={field.properties?.borderRadius as any}\n              isDisabled={field.advanced?.disabled || field.properties?.disabled}\n              isReadOnly={field.advanced?.readOnly || field.properties?.readonly}\n            >\n              Check to confirm\n            </Checkbox>\n          </div>\n        );\n      }\n\n    case \"switch\":\n      const switchComponentAlignment = field.properties?.componentAlignment || 'left';\n      const switchAlignmentClass = switchComponentAlignment === 'center' ? 'flex justify-center' : \n                                   switchComponentAlignment === 'right' ? 'flex justify-end' : 'flex justify-start';\n      \n      return (\n        <div className={`space-y-2 ${wrapperClasses}`}>\n          <div className={switchAlignmentClass}>\n            <Switch\n              isSelected={value || false}\n              onValueChange={handleChange}\n              size={field.properties?.size as any}\n              color={field.properties?.colorVariant as any}\n              isDisabled={field.advanced?.disabled || field.properties?.disabled}\n              isReadOnly={field.advanced?.readOnly || field.properties?.readonly}\n            >\n              {field.label}\n              {field.required && <span className=\"text-danger ml-1\">*</span>}\n            </Switch>\n          </div>\n          {field.properties?.description && (\n            <div className={switchAlignmentClass}>\n              <p className=\"text-xs text-default-500\">\n                {field.properties?.description}\n              </p>\n            </div>\n          )}\n        </div>\n      );\n\n    case \"file\":\n      return (\n        <div className={`space-y-2 ${wrapperClasses}`}>\n          <label className=\"text-sm font-medium\">\n            {field.label}\n            {field.required && <span className=\"text-danger\">*</span>}\n          </label>\n          {field.properties?.description && (\n            <p className=\"text-xs text-default-500\">\n              {field.properties?.description}\n            </p>\n          )}\n          <div className=\"border-2 border-dashed border-default-300 rounded-lg p-6 text-center hover:border-default-400 transition-colors relative\">\n            <Upload className=\"mx-auto text-default-400 mb-2\" size={32} />\n            <p className=\"text-sm text-default-600 mb-2\">\n              Click to upload or drag and drop\n            </p>\n            <p className=\"text-xs text-default-500\">\n              {field.properties?.accept || \"All file types\"}\n            </p>\n            <input\n              type=\"file\"\n              accept={field.properties?.accept}\n              multiple={field.properties?.multiple}\n              className=\"absolute inset-0 w-full h-full opacity-0 cursor-pointer\"\n              onChange={(e) => {\n                const files = Array.from(e.target.files || []);\n                handleChange(field.properties?.multiple ? files : files[0]);\n              }}\n            />\n          </div>\n        </div>\n      );\n\n    case \"rating\":\n      const maxRating = field.properties?.max || 5;\n      const ratingComponentAlignment = field.properties?.componentAlignment || 'left';\n      const ratingAlignmentClass = ratingComponentAlignment === 'center' ? 'flex justify-center' : \n                                   ratingComponentAlignment === 'right' ? 'flex justify-end' : 'flex justify-start';\n      \n      return (\n        <div className={`space-y-2 ${wrapperClasses}`}>\n          <div className={ratingAlignmentClass}>\n            <label className=\"text-sm font-medium\">\n              {field.label}\n              {field.required && <span className=\"text-danger\">*</span>}\n            </label>\n          </div>\n          {field.properties?.description && (\n            <div className={ratingAlignmentClass}>\n              <p className=\"text-xs text-default-500\">\n                {field.properties?.description}\n              </p>\n            </div>\n          )}\n          <div className={ratingAlignmentClass}>\n            <div className=\"flex gap-1\">\n              {Array.from({ length: maxRating }, (_, i) => i + 1).map(\n                (rating) => (\n                <button\n                  key={rating}\n                  type=\"button\"\n                  onClick={() => handleChange(rating)}\n                  className=\"focus:outline-none\"\n                >\n                  <Star\n                    className={`w-6 h-6 ${\n                      rating <= (value || 0)\n                        ? \"text-warning fill-current\"\n                        : \"text-default-300\"\n                    }`}\n                  />\n                </button>\n              )\n            )}\n            </div>\n          </div>\n        </div>\n      );\n\n    case \"signature\":\n      return (\n        <div className={`space-y-2 ${wrapperClasses}`}>\n          <label className=\"text-sm font-medium\">\n            {field.label}\n            {field.required && <span className=\"text-danger\">*</span>}\n          </label>\n          {field.properties?.description && (\n            <p className=\"text-xs text-default-500\">\n              {field.properties?.description}\n            </p>\n          )}\n          <SignaturePad\n            value={value}\n            onChange={handleChange}\n            width={380}\n            height={150}\n            className=\"w-full\"\n          />\n        </div>\n      );\n\n    case \"section\":\n      return (\n        <div className={wrapperClasses}>\n          <Card>\n            <CardBody className=\"py-4\">\n              <h3 className=\"text-lg font-semibold mb-2\">{field.label}</h3>\n              {field.properties?.description && (\n                <p className=\"text-default-600\">{field.properties?.description}</p>\n              )}\n            </CardBody>\n          </Card>\n        </div>\n      );\n\n    case \"paragraph\":\n      return (\n        <div className={`py-2 ${wrapperClasses}`}>\n          <h4 className=\"text-md font-medium mb-1\">{field.label}</h4>\n          {field.properties?.description && (\n            <p className=\"text-default-600\">{field.properties?.description}</p>\n          )}\n        </div>\n      );\n\n    case \"pagebreak\":\n      return (\n        <div className={`my-8 ${wrapperClasses}`}>\n          <Divider className=\"my-4\" />\n          <div className=\"text-center text-sm text-default-500\">Page Break</div>\n          <Divider className=\"my-4\" />\n        </div>\n      );\n\n    case \"html\":\n      return (\n        <div\n          className={`prose prose-sm max-w-none ${wrapperClasses}`}\n          dangerouslySetInnerHTML={{\n            __html: field.properties?.description || field.label,\n          }}\n        />\n      );\n\n    case \"range\":\n      return (\n        <div className={`space-y-2 ${wrapperClasses}`}>\n          <label className=\"text-sm font-medium\">\n            {field.label}\n            {field.required && <span className=\"text-danger\">*</span>}\n          </label>\n          {field.properties?.description && (\n            <p className=\"text-xs text-default-500\">\n              {field.properties?.description}\n            </p>\n          )}\n          <div className=\"flex items-center gap-4\">\n            <input\n              type=\"range\"\n              min={field.properties?.min || 0}\n              max={field.properties?.max || 100}\n              step={field.properties?.step || 1}\n              value={value || field.properties?.min || 0}\n              onChange={(e) => handleChange(Number(e.target.value))}\n              className=\"flex-1 h-2 bg-default-200 rounded-lg appearance-none cursor-pointer\"\n            />\n            <span className=\"text-sm text-default-600 min-w-[3rem] text-right\">\n              {value || field.properties?.min || 0}\n            </span>\n          </div>\n        </div>\n      );\n\n    case \"phone\":\n      return (\n        <Input\n          {...commonProps}\n          type=\"tel\"\n          value={value || \"\"}\n          onValueChange={(val) => handleChange(val)}\n        />\n      );\n\n    case \"url\":\n      return (\n        <Input\n          {...commonProps}\n          type=\"url\"\n          value={value || \"\"}\n          onValueChange={(val) => handleChange(val)}\n        />\n      );\n\n    case \"button\":\n      return wrapWithIndicators(\n        <Button\n          key={`button-${field.id}`}\n          color={field.properties?.colorVariant as any}\n          size={field.properties?.size as any}\n          variant={field.properties?.variant as any}\n          radius={field.properties?.borderRadius as any}\n          isDisabled={field.advanced?.disabled || field.properties?.disabled}\n          className={heroUIClasses.base}\n          onPress={() => {\n            handleChange('clicked');\n          }}\n          {...htmlAttributes}\n        >\n          {field.label}\n        </Button>\n      );\n\n    default:\n      return (\n        <div\n          className={`p-4 border border-dashed border-default-300 rounded-lg text-center ${wrapperClasses}`}\n        >\n          <p className=\"text-default-500\">\n            Unsupported field type: {field.type}\n          </p>\n        </div>\n      );\n  }\n}\n\n// Export both named and default for compatibility\nexport const MemoizedFormFieldRenderer = React.memo(FormFieldRenderer);\nexport default MemoizedFormFieldRenderer;\n","import { useSortable } from \"@dnd-kit/sortable\";\nimport { CSS } from \"@dnd-kit/utilities\";\nimport { Button, ButtonGroup } from \"@heroui/react\";\nimport { GripVertical, Edit, Trash2, Copy } from \"lucide-react\";\nimport { FormFieldRenderer } from \"./FormFieldRenderer\";\nimport { useFormBuilder } from \"../context/FormBuilderContext\";\nimport { buildFieldWrapperClasses } from \"../utils/fieldStyles\";\nimport type { FormField } from \"../types/form\";\n\ninterface SortableFormFieldProps {\n  field: FormField;\n  isPreview: boolean;\n}\n\nexport function SortableFormField({\n  field,\n  isPreview,\n}: SortableFormFieldProps) {\n  const { state, actions } = useFormBuilder();\n  const { selectedFieldId } = state;\n\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging,\n  } = useSortable({ id: field.id });\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n  };\n\n  const isSelected = selectedFieldId === field.id;\n\n  const handleSelect = () => {\n    if (!isPreview) {\n      actions.selectField(field.id);\n    }\n  };\n\n  const handleDuplicate = () => {\n    const duplicatedField = {\n      ...field,\n      id: crypto.randomUUID(),\n      label: `${field.label} (Copy)`,\n    };\n    actions.addField(duplicatedField);\n  };\n\n  const handleDelete = () => {\n    actions.deleteField(field.id);\n  };\n\n  const handleEdit = () => {\n    actions.selectField(field.id);\n  };\n\n  const wrapperClasses = buildFieldWrapperClasses(field, !isPreview); // isEditor = !isPreview\n\n  if (isPreview) {\n    return (\n      <div className={`w-full ${wrapperClasses}`}>\n        <FormFieldRenderer field={field} />\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={setNodeRef}\n      style={style}\n      className={`\n        relative group\n        ${isDragging ? \"opacity-50 z-50\" : \"\"}\n        ${isSelected ? \"\" : \"\"}\n        ${wrapperClasses}\n      `}\n      onClick={!isDragging ? handleSelect : undefined}\n    >\n      <div\n        className={`\n          border transition-all duration-200 cursor-pointer\n          ${\n            isSelected\n              ? \"border-primary shadow-lg\"\n              : \"border-default-200 hover:border-default-300\"\n          }\n          ${isDragging ? \"shadow-2xl\" : \"\"}\n        `}\n      >\n        <div className=\"p-2\">\n          {/* Field Controls */}\n          <div className=\"flex items-center justify-between mb-2 \">\n            <div className=\"flex items-center gap-2\">\n              <div\n                {...attributes}\n                {...listeners}\n                className=\"cursor-grab active:cursor-grabbing p-1 hover:bg-default-100 rounded\"\n              >\n                <GripVertical className=\"text-default-400\" size={14} />\n              </div>\n              <span className=\"text-xs text-default-600 font-medium\">\n                {field.type.charAt(0).toUpperCase() + field.type.slice(1)}\n              </span>\n            </div>\n\n            <ButtonGroup size=\"sm\" variant=\"flat\">\n              <Button\n                isIconOnly\n                onPress={handleEdit}\n                color={isSelected ? \"primary\" : \"default\"}\n              >\n                <Edit size={16} />\n              </Button>\n              <Button isIconOnly onPress={handleDuplicate}>\n                <Copy size={16} />\n              </Button>\n              <Button isIconOnly color=\"danger\" onPress={handleDelete}>\n                <Trash2 size={16} />\n              </Button>\n            </ButtonGroup>\n          </div>\n\n          {/* Field Preview */}\n          <div className=\"pointer-events-none\">\n            <FormFieldRenderer field={field} />\n          </div>\n\n          {/* Field Info */}\n          <div className=\"mt-2 pt-2 border-t border-default-200\">\n            <div className=\"flex items-center justify-between text-xs text-default-500\">\n              <div className=\"flex items-center gap-2\">\n                <span>Req: {field.required ? \"Yes\" : \"No\"}</span>\n                {field.validation && field.validation.length > 0 && (\n                  <span>Val: {field.validation.length}</span>\n                )}\n              </div>\n              <span>ID: {field.id.slice(0, 6)}...</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import type { FormField, FormRow } from '../types/form';\n\nexport function groupFieldsIntoRows(fields: FormField[]): FormRow[] {\n  const rows: FormRow[] = [];\n  let currentRow: FormField[] = [];\n  let currentRowSpan = 0;\n  \n  fields.forEach((field, index) => {\n    const fieldSpan = getFieldSpan(field);\n    const startNewRow = field.properties?.startNewRow || false;\n    \n    // Start a new row if:\n    // 1. This field is marked to start a new row\n    // 2. Current row would exceed 12 columns\n    // 3. This is the first field\n    if (startNewRow || currentRowSpan + fieldSpan > 12 || currentRow.length === 0) {\n      if (currentRow.length > 0) {\n        rows.push({\n          id: `row-${rows.length}`,\n          fields: [...currentRow]\n        });\n      }\n      currentRow = [field];\n      currentRowSpan = fieldSpan;\n    } else {\n      currentRow.push(field);\n      currentRowSpan += fieldSpan;\n    }\n    \n    // If this is the last field, add the current row\n    if (index === fields.length - 1 && currentRow.length > 0) {\n      rows.push({\n        id: `row-${rows.length}`,\n        fields: [...currentRow]\n      });\n    }\n  });\n  \n  return rows;\n}\n\nexport function getFieldSpan(field: FormField): number {\n  // Check both field.layout.columnSpan and field.columnSpan for backward compatibility\n  const columnSpan = field.layout?.columnSpan || field.columnSpan;\n  if (columnSpan) {\n    return Math.min(12, Math.max(1, columnSpan));\n  }\n  \n  // Map width property to column spans\n  switch (field.properties?.width) {\n    case 'quarter':\n      return 3;\n    case 'third':\n      return 4;\n    case 'half':\n      return 6;\n    case 'full':\n    default:\n      return 12;\n  }\n}\n\nexport function getGridClassName(span: number): string {\n  const gridClasses: Record<number, string> = {\n    1: 'col-span-1',\n    2: 'col-span-2',\n    3: 'col-span-3',\n    4: 'col-span-4',\n    5: 'col-span-5',\n    6: 'col-span-6',\n    7: 'col-span-7',\n    8: 'col-span-8',\n    9: 'col-span-9',\n    10: 'col-span-10',\n    11: 'col-span-11',\n    12: 'col-span-12',\n  };\n  \n  return gridClasses[span] || 'col-span-12';\n}\n","import { SortableFormField } from './SortableFormField';\nimport { getFieldSpan, getGridClassName } from '../utils/layoutUtils';\nimport { buildFieldWrapperClasses } from '../utils/fieldStyles';\nimport type { FormRow } from '../types/form';\n\ninterface FormRowRendererProps {\n  row: FormRow;\n  isPreview: boolean;\n}\n\nexport function FormRowRenderer({ row, isPreview }: FormRowRendererProps) {\n  const { fields } = row;\n  \n  // If there's only one field with full width, don't use grid\n  if (fields.length === 1 && getFieldSpan(fields[0]) === 12) {\n    const wrapperClasses = buildFieldWrapperClasses(fields[0], !isPreview); // isEditor = !isPreview\n    return (\n      <div className={wrapperClasses}>\n        <SortableFormField\n          key={fields[0].id}\n          field={fields[0]}\n          isPreview={isPreview}\n        />\n      </div>\n    );\n  }\n  \n  // Use CSS Grid for multi-column layout\n  return (\n    <div className=\"grid grid-cols-12 gap-3\">\n      {fields.map((field) => {\n        const span = getFieldSpan(field);\n        const gridClass = getGridClassName(span);\n        const wrapperClasses = buildFieldWrapperClasses(field, !isPreview); // isEditor = !isPreview\n        const combinedClasses = [gridClass, wrapperClasses].filter(Boolean).join(' ');\n        \n        return (\n          <div key={field.id} className={combinedClasses}>\n            <SortableFormField\n              field={field}\n              isPreview={isPreview}\n            />\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","import React, { useState, useCallback } from \"react\";\nimport {\n  Input,\n  Textarea,\n  Select,\n  SelectItem,\n  Autocomplete,\n  AutocompleteItem,\n  Checkbox,\n  RadioGroup,\n  Radio,\n  Switch,\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  Slider,\n  Chip,\n  Divider,\n} from \"@heroui/react\";\nimport { Star, Upload } from \"lucide-react\";\nimport { SignaturePad } from \"./SignaturePad\";\nimport { buildHeroUIClasses } from \"../utils/fieldStyles\";\nimport type { FormExportData, FormFieldExport } from \"../utils/formExport\";\n\ninterface FormRendererProps {\n  formConfig: FormExportData;\n  onSubmit?: (data: Record<string, any>) => void;\n  className?: string;\n}\n\nexport function FormRenderer({\n  formConfig,\n  onSubmit,\n  className = \"\",\n}: FormRendererProps) {\n  const [formData, setFormData] = useState<Record<string, any>>({});\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  const handleFieldChange = useCallback((fieldId: string, value: any) => {\n    setFormData((prev) => ({\n      ...prev,\n      [fieldId]: value,\n    }));\n\n    // Clear error when user starts typing\n    setErrors((prev) => {\n      if (prev[fieldId]) {\n        const newErrors = { ...prev };\n        delete newErrors[fieldId];\n        return newErrors;\n      }\n      return prev;\n    });\n  }, []);\n\n  const validateForm = (): boolean => {\n    const newErrors: Record<string, string> = {};\n\n    // Check required fields\n    formConfig.validation.requiredFields.forEach((fieldId) => {\n      const field = formConfig.fieldMap[fieldId];\n      const value = formData[fieldId];\n\n      if (!value || (typeof value === \"string\" && value.trim() === \"\")) {\n        newErrors[fieldId] = `${field.label} is required`;\n      }\n    });\n\n    // Check field-specific validation\n    formConfig.validation.fieldsWithValidation.forEach((fieldId) => {\n      const field = formConfig.fieldMap[fieldId];\n      const value = formData[fieldId];\n\n      if (field.validation && value) {\n        field.validation.forEach((rule) => {\n          switch (rule.type) {\n            case \"email\":\n              const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n              if (!emailRegex.test(value)) {\n                newErrors[fieldId] = rule.message;\n              }\n              break;\n            case \"minLength\":\n              if (value.length < rule.value) {\n                newErrors[fieldId] = rule.message;\n              }\n              break;\n            case \"maxLength\":\n              if (value.length > rule.value) {\n                newErrors[fieldId] = rule.message;\n              }\n              break;\n            case \"min\":\n              if (parseFloat(value) < rule.value) {\n                newErrors[fieldId] = rule.message;\n              }\n              break;\n            case \"max\":\n              if (parseFloat(value) > rule.value) {\n                newErrors[fieldId] = rule.message;\n              }\n              break;\n            case \"pattern\":\n              const regex = new RegExp(rule.value);\n              if (!regex.test(value)) {\n                newErrors[fieldId] = rule.message;\n              }\n              break;\n          }\n        });\n      }\n    });\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (validateForm()) {\n      // First pass: generate unique field names for all fields\n      const fieldNames = new Map<string, string>();\n      const usedNames = new Set<string>();\n      \n      // Process all fields to assign unique names\n      Object.keys(formData).forEach((fieldId) => {\n        const field = formConfig.fieldMap[fieldId];\n        let fieldName = field.name;\n        \n        if (!fieldName || !fieldName.trim()) {\n          // Generate name from field type, ensuring uniqueness\n          const baseName = field.type.replace(/[-_]/g, '_').toLowerCase();\n          fieldName = baseName;\n          \n          if (usedNames.has(fieldName)) {\n            let counter = 2;\n            fieldName = `${baseName}${counter}`;\n            while (usedNames.has(fieldName)) {\n              counter++;\n              fieldName = `${baseName}${counter}`;\n            }\n          }\n        }\n        \n        usedNames.add(fieldName);\n        fieldNames.set(fieldId, fieldName);\n      });\n\n      // Second pass: build submission data using the unique names\n      const submissionData: Record<string, any> = {};\n      Object.entries(formData).forEach(([fieldId, value]) => {\n        const fieldName = fieldNames.get(fieldId)!;\n        submissionData[fieldName] = value;\n      });\n\n      onSubmit?.(submissionData);\n    }\n  };\n\n  const renderField = (field: FormFieldExport) => {\n    const value = formData[field.id] || field.defaultValue || \"\";\n    const error = errors[field.id];\n    const hasError = !!error;\n\n    // Build HeroUI classes using the same system as FormFieldRenderer\n    const heroUIClasses = buildHeroUIClasses(field as any, false); // false = not in editor, so apply responsive hiding\n\n    // Apply common properties that work across all components\n    const commonProps = {\n      label: field.label,\n      placeholder: field.placeholder,\n      isRequired: field.required,\n      description: field.properties?.description,\n      classNames: {\n        base: heroUIClasses.base,\n        label: heroUIClasses.label,\n        inputWrapper: heroUIClasses.inputWrapper,\n        innerWrapper: heroUIClasses.innerWrapper,\n        mainWrapper: heroUIClasses.mainWrapper,\n        input: heroUIClasses.input,\n        clearButton: heroUIClasses.clearButton,\n        helperWrapper: heroUIClasses.helperWrapper,\n        description: heroUIClasses.description,\n        errorMessage: heroUIClasses.errorMessage,\n      },\n      // isInvalid: hasError,\n      isInvalid: hasError,      // <-- Add this line\n      errorMessage: error,\n      size: (field.properties.size as \"sm\" | \"md\" | \"lg\") || \"md\",\n      isDisabled: field.properties.disabled,\n      isReadOnly: field.properties.readonly,\n      color: field.properties.colorVariant as any,\n      radius: field.properties.borderRadius as any,\n      variant: field.properties.variant as any,\n    };\n\n    // Handle conditional display\n    if (field.properties.hidden) {\n      return null;\n    }\n\n    // Generate HTML attributes\n    const getFieldAttributes = () => {\n      const attributes: Record<string, any> = {};\n      \n      if (field.properties.ariaLabel) {\n        attributes['aria-label'] = field.properties.ariaLabel;\n      }\n      \n      if (field.properties.tabIndex !== undefined) {\n        attributes.tabIndex = field.properties.tabIndex;\n      }\n      \n      if (field.properties.dataAttributes) {\n        // Parse data attributes like \"data-test=value,data-id=123\"\n        const dataAttrs = field.properties.dataAttributes.split(',');\n        dataAttrs.forEach(attr => {\n          const [key, value] = attr.split('=');\n          if (key && value) {\n            attributes[key.trim()] = value.trim();\n          }\n        });\n      }\n      \n      return attributes;\n    };\n\n    const fieldAttributes = getFieldAttributes();\n\n    switch (field.type) {\n      case \"text\":\n        return (\n          <Input\n            key={`text-${field.id}`}\n            {...commonProps}\n            type=\"text\"\n            value={value}\n            onValueChange={(val) => handleFieldChange(field.id, val)}\n            minLength={field.properties.minLength}\n            maxLength={field.properties.maxLength}\n          />\n        );\n\n      case \"email\":\n        return (\n          <Input\n            key={`email-${field.id}`}\n            {...commonProps}\n            type=\"email\"\n            value={value}\n            onValueChange={(val) => handleFieldChange(field.id, val)}\n            minLength={field.properties.minLength}\n            maxLength={field.properties.maxLength}\n          />\n        );\n\n      case \"password\":\n        return (\n          <Input\n            key={`password-${field.id}`}\n            {...commonProps}\n            type=\"password\"\n            value={value}\n            onValueChange={(val) => handleFieldChange(field.id, val)}\n            minLength={field.properties.minLength}\n            maxLength={field.properties.maxLength}\n          />\n        );\n\n      case \"number\":\n        return (\n          <Input\n            key={`number-${field.id}`}\n            {...commonProps}\n            type=\"number\"\n            value={value}\n            onValueChange={(val) => {\n              // Add client-side min/max validation\n              const numVal = parseFloat(val);\n              if (!isNaN(numVal)) {\n                if (field.properties.min !== undefined && numVal < field.properties.min) {\n                  return; // Don't update if below minimum\n                }\n                if (field.properties.max !== undefined && numVal > field.properties.max) {\n                  return; // Don't update if above maximum\n                }\n              }\n              handleFieldChange(field.id, val);\n            }}\n            min={field.properties.min}\n            max={field.properties.max}\n            step={field.properties.step}\n          />\n        );\n\n      case \"textarea\":\n        return (\n          <Textarea\n            key={`textarea-${field.id}`}\n            {...commonProps}\n            value={value}\n            onValueChange={(val) => handleFieldChange(field.id, val)}\n            rows={field.properties.rows || 4}\n            minLength={field.properties.minLength}\n            maxLength={field.properties.maxLength}\n          />\n        );\n\n      case \"select\":\n        return (\n          <Select\n            {...commonProps}\n            selectedKeys={value ? [value] : []}\n            onSelectionChange={(keys) => {\n              const selectedValue = Array.from(keys)[0];\n              handleFieldChange(field.id, selectedValue);\n            }}\n            selectionMode={field.properties.multiple ? \"multiple\" : \"single\"}\n          >\n            {field.options?.map((option) => (\n              <SelectItem key={option.value}>{option.label}</SelectItem>\n            )) || []}\n          </Select>\n        );\n\n      case \"autocomplete\":\n        return (\n          <Autocomplete\n            {...commonProps}\n            selectedKey={value || \"\"}\n            onSelectionChange={(key) => {\n              handleFieldChange(field.id, key);\n            }}\n            allowsCustomValue\n          >\n            {field.options?.map((option) => (\n              <AutocompleteItem key={option.value}>{option.label}</AutocompleteItem>\n            )) || []}\n          </Autocomplete>\n        );\n\n      case \"radio\":\n        const radioOrientation = field.properties?.orientation || 'vertical';\n        const radioComponentAlignment = field.properties?.componentAlignment || 'left';\n        \n        // Alignment classes based on orientation and alignment preference\n        const radioAlignmentClass = radioOrientation === 'horizontal'\n          ? (radioComponentAlignment === 'center' ? 'justify-center' : \n             radioComponentAlignment === 'right' ? 'justify-end' : 'justify-start')\n          : (radioComponentAlignment === 'center' ? 'items-center' : \n             radioComponentAlignment === 'right' ? 'items-end' : 'items-start');\n        \n        const radioLabelAlignmentClass = radioComponentAlignment === 'center' ? 'text-center' : \n                                         radioComponentAlignment === 'right' ? 'text-right' : 'text-left';\n        \n        // Wrapper alignment for the entire component\n        const radioWrapperAlignmentClass = radioComponentAlignment === 'center' ? 'flex flex-col items-center' :\n                                          radioComponentAlignment === 'right' ? 'flex flex-col items-end' : \n                                          'flex flex-col items-start';\n        \n        return (\n          <div className={radioWrapperAlignmentClass}>\n            <RadioGroup\n              label={field.label}\n              description={field.properties?.description}\n              isRequired={field.required}\n              value={value}\n              onValueChange={(val) => handleFieldChange(field.id, val)}\n              isInvalid={hasError}\n              errorMessage={error}\n              size={(field.properties.size as \"sm\" | \"md\" | \"lg\") || \"md\"}\n              isDisabled={field.properties.disabled}\n              color={field.properties.colorVariant as any}\n              orientation={radioOrientation as any}\n              classNames={{\n                base: [\n                  field.properties.marginTop,\n                  field.properties.marginBottom,\n                  field.properties.padding\n                ].filter(Boolean).join(' '),\n                wrapper: `${field.properties.alignment || ''} ${radioAlignmentClass}`,              label: radioLabelAlignmentClass,\n              description: radioLabelAlignmentClass\n            }}\n            className={field.properties.customClasses}\n          >\n            {field.options?.map((option) => (\n              <Radio key={option.value} value={option.value}>\n                {option.label}\n              </Radio>\n            )) || []}\n          </RadioGroup>\n          </div>\n        );\n\n      case \"checkbox\":\n        if (field.options && field.options.length > 1) {\n          const orientation = field.properties?.orientation || 'vertical';\n          const componentAlignment = field.properties?.componentAlignment || 'left';\n          \n          // Container classes based on orientation\n          const containerClass = orientation === 'horizontal' \n            ? 'flex flex-wrap gap-4' \n            : 'flex flex-col space-y-2';\n            \n          // Alignment classes based on orientation and alignment preference\n          const alignmentClass = orientation === 'horizontal'\n            ? (componentAlignment === 'center' ? 'justify-center' : \n               componentAlignment === 'right' ? 'justify-end' : 'justify-start')\n            : (componentAlignment === 'center' ? 'items-center' : \n               componentAlignment === 'right' ? 'items-end' : 'items-start');\n          \n          const labelAlignmentClass = componentAlignment === 'center' ? 'text-center' : \n                                     componentAlignment === 'right' ? 'text-right' : 'text-left';\n          \n          // Wrapper alignment for the entire component\n          const wrapperAlignmentClass = componentAlignment === 'center' ? 'flex flex-col items-center' :\n                                       componentAlignment === 'right' ? 'flex flex-col items-end' : \n                                       'flex flex-col items-start';\n          \n          return (\n            <div className={`space-y-2 ${field.properties.customClasses || \"\"} ${wrapperAlignmentClass}`}>\n              <label className={`text-sm font-medium ${labelAlignmentClass}`}>\n                {field.label}\n                {field.required && <span className=\"text-danger\">*</span>}\n              </label>\n              {field.properties?.description && (\n                <p className={`text-xs text-default-500 ${labelAlignmentClass}`}>\n                  {field.properties?.description}\n                </p>\n              )}\n              <div className={`${containerClass} ${alignmentClass}`}>\n                {field.options.map((option) => (\n                  <Checkbox\n                    key={option.value}\n                    isSelected={value?.includes?.(option.value) || false}\n                    onValueChange={(checked) => {\n                      const currentValues = value || [];\n                      if (checked) {\n                        handleFieldChange(field.id, [\n                          ...currentValues,\n                          option.value,\n                        ]);\n                      } else {\n                        handleFieldChange(\n                          field.id,\n                          currentValues.filter((v: any) => v !== option.value)\n                        );\n                      }\n                    }}\n                    size={(field.properties.size as \"sm\" | \"md\" | \"lg\") || \"md\"}\n                    isDisabled={field.properties.disabled}\n                    color={field.properties.colorVariant as any}\n                    radius={field.properties.borderRadius as any}\n                  >\n                    {option.label}\n                  </Checkbox>\n                ))}\n              </div>\n              {hasError && <p className=\"text-danger text-xs\">{error}</p>}\n            </div>\n          );\n        } else {\n          const checkboxComponentAlignment = field.properties?.componentAlignment || 'left';\n          const checkboxAlignmentClass = checkboxComponentAlignment === 'center' ? 'justify-center' : \n                                         checkboxComponentAlignment === 'right' ? 'justify-end' : 'justify-start';\n          const checkboxLabelAlignmentClass = checkboxComponentAlignment === 'center' ? 'text-center' : \n                                             checkboxComponentAlignment === 'right' ? 'text-right' : 'text-left';\n          \n          return (\n            <div className={`${field.properties.customClasses} ${checkboxAlignmentClass}`}>\n              <label className={`text-sm font-medium block mb-2 ${checkboxLabelAlignmentClass}`}>\n                {field.label}\n                {field.required && <span className=\"text-danger\">*</span>}\n              </label>\n              {field.properties?.description && (\n                <p className={`text-xs text-default-500 mb-2 ${checkboxLabelAlignmentClass}`}>\n                  {field.properties?.description}\n                </p>\n                )}\n              <Checkbox\n                isSelected={value || false}\n                onValueChange={(checked) =>\n                  handleFieldChange(field.id, checked)\n                }\n                size={(field.properties.size as \"sm\" | \"md\" | \"lg\") || \"md\"}\n                isDisabled={field.properties.disabled}\n                color={field.properties.colorVariant as any}\n                radius={field.properties.borderRadius as any}\n              >\n                Check to confirm\n              </Checkbox>\n              {hasError && <p className={`text-danger text-xs mt-1 ${checkboxLabelAlignmentClass}`}>{error}</p>}\n            </div>\n          );\n        }\n\n      case \"switch\":\n        const switchComponentAlignment = field.properties?.componentAlignment || 'left';\n        const switchAlignmentClass = switchComponentAlignment === 'center' ? 'flex justify-center' : \n                                     switchComponentAlignment === 'right' ? 'flex justify-end' : 'flex justify-start';\n        \n        return (\n          <div className={`space-y-2 ${field.properties.customClasses || \"\"}`}>\n            <div className={switchAlignmentClass}>\n              <Switch\n                isSelected={value || false}\n                onValueChange={(checked) => handleFieldChange(field.id, checked)}\n                size={(field.properties.size as \"sm\" | \"md\" | \"lg\") || \"sm\"}\n                isDisabled={field.properties.disabled}\n                color={field.properties.colorVariant as any}\n              >\n                {field.label}\n                {field.required && <span className=\"text-danger ml-1\">*</span>}\n              </Switch>\n            </div>\n            {field.properties?.description && (\n              <div className={switchAlignmentClass}>\n                <p className=\"text-xs text-default-500\">\n                  {field.properties?.description}\n                </p>\n              </div>\n            )}\n            {hasError && (\n              <div className={switchAlignmentClass}>\n                <p className=\"text-danger text-xs\">{error}</p>\n              </div>\n            )}\n          </div>\n        );\n\n      case \"section\":\n        return (\n          <Card \n            radius={(field.properties.borderRadius as any) || \"sm\"} \n            className={field.properties.customClasses}\n          >\n            <CardBody className=\"py-4\">\n              <h3 className=\"text-lg font-semibold mb-2\">{field.label}</h3>\n              {field.properties?.description && (\n                <p className=\"text-default-600\">{field.properties?.description}</p>\n              )}\n            </CardBody>\n          </Card>\n        );\n\n      case \"paragraph\":\n        return (\n          <div className={`py-2 ${field.properties.customClasses || \"\"}`}>\n            <h4 className=\"text-md font-medium mb-1\">{field.label}</h4>\n            {field.properties?.description && (\n              <p className=\"text-default-600\">{field.properties?.description}</p>\n            )}\n          </div>\n        );\n\n      case \"phone\":\n        return (\n          <Input\n            key={`phone-${field.id}`}\n            {...commonProps}\n            type=\"tel\"\n            value={value}\n            onValueChange={(val) => handleFieldChange(field.id, val)}\n            minLength={field.properties.minLength}\n            maxLength={field.properties.maxLength}\n          />\n        );\n\n      case \"url\":\n        return (\n          <Input\n            key={`url-${field.id}`}\n            {...commonProps}\n            type=\"url\"\n            value={value}\n            onValueChange={(val) => handleFieldChange(field.id, val)}\n            minLength={field.properties.minLength}\n            maxLength={field.properties.maxLength}\n          />\n        );\n\n      case \"date\":\n        return (\n          <Input\n            key={`date-${field.id}`}\n            {...commonProps}\n            type=\"date\"\n            value={value}\n            onValueChange={(val) => handleFieldChange(field.id, val)}\n          />\n        );\n\n      case \"time\":\n        return (\n          <Input\n            key={`time-${field.id}`}\n            {...commonProps}\n            type=\"time\"\n            value={value}\n            onValueChange={(val) => handleFieldChange(field.id, val)}\n          />\n        );\n\n      case \"datetime\":\n        return (\n          <Input\n            key={`datetime-${field.id}`}\n            {...commonProps}\n            type=\"datetime-local\"\n            value={value}\n            onValueChange={(val) => handleFieldChange(field.id, val)}\n          />\n        );\n\n      case \"multiselect\":\n        return (\n          <Select\n            {...commonProps}\n            selectionMode=\"multiple\"\n            selectedKeys={value || []}\n            onSelectionChange={(keys) => {\n              const selectedValues = Array.from(keys);\n              handleFieldChange(field.id, selectedValues);\n            }}\n          >\n            {field.options?.map((option) => (\n              <SelectItem key={option.value}>{option.label}</SelectItem>\n            )) || []}\n          </Select>\n        );\n\n      case \"range\":\n        return (\n          <div className={`space-y-2 ${field.properties.customClasses || \"\"}`}>\n            <label className=\"text-sm font-medium\">\n              {field.label}\n              {field.required && <span className=\"text-danger\">*</span>}\n            </label>\n            {field.properties?.description && (\n              <p className=\"text-xs text-default-500\">\n                {field.properties?.description}\n              </p>\n            )}\n            <Slider\n              value={value || field.properties.min || 0}\n              onChange={(val: number | number[]) => {\n                const newValue = Array.isArray(val) ? val[0] : val;\n                handleFieldChange(field.id, newValue);\n              }}\n              minValue={field.properties.min || 0}\n              maxValue={field.properties.max || 100}\n              step={field.properties.step || 1}\n              className=\"max-w-md\"\n              size={(field.properties.size as \"sm\" | \"md\" | \"lg\") || \"sm\"}\n              isDisabled={field.properties.disabled}\n              color={field.properties.colorVariant as any}\n            />\n            <div className=\"text-xs text-default-500\">\n              Value: {value || field.properties.min || 0}\n            </div>\n            {hasError && <p className=\"text-danger text-xs\">{error}</p>}\n          </div>\n        );\n\n      case \"file\":\n        return (\n          <div className={`space-y-2 ${field.properties.customClasses || \"\"}`}>\n            <label className=\"text-sm font-medium\">\n              {field.label}\n              {field.required && <span className=\"text-danger\">*</span>}\n            </label>\n            {field.properties?.description && (\n              <p className=\"text-xs text-default-500\">\n                {field.properties?.description}\n              </p>\n            )}\n            <div className={`border-2 border-dashed border-default-300 rounded-lg p-4 text-center hover:border-default-400 transition-colors ${\n              field.properties.disabled ? 'opacity-50 cursor-not-allowed' : ''\n            }`}>\n              <Upload className=\"mx-auto h-8 w-8 text-default-400 mb-2\" />\n              <input\n                type=\"file\"\n                accept={field.properties.accept || \"*\"}\n                multiple={field.properties.multiple}\n                disabled={field.properties.disabled}\n                onChange={(e) => {\n                  const files = field.properties.multiple ? Array.from(e.target.files || []) : e.target.files?.[0];\n                  handleFieldChange(field.id, files);\n                }}\n                className=\"hidden\"\n                id={`file-${field.id}`}\n              />\n              <label htmlFor={`file-${field.id}`} className={`cursor-pointer ${field.properties.disabled ? 'cursor-not-allowed' : ''}`}>\n                <div className=\"text-sm text-default-600\">\n                  Click to upload {field.properties.multiple ? 'files' : 'a file'}\n                </div>\n                {value && (\n                  <div className=\"mt-2\">\n                    {Array.isArray(value) ? (\n                      <div className=\"flex flex-wrap gap-1\">\n                        {value.map((file: any, index: number) => (\n                          <Chip key={index} color=\"primary\" size=\"sm\">\n                            {/* Add download link here */}\n                              <a\n                                href={URL.createObjectURL(file)}\n                                download={file.name}\n                                // className=\"underline\"\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                              >\n                               {file.name || `File ${index + 1}`}\n                             </a>\n                          </Chip>\n                        ))}\n                      </div>\n                    ) : (\n                      <Chip color=\"primary\" size=\"sm\">\n                        {/* Add download link here */}\n                         <a\n                           href={URL.createObjectURL(value)}\n                           download={value.name}\n                          //  className=\"underline\"\n                           target=\"_blank\"\n                           rel=\"noopener noreferrer\"\n                          >\n                          {value.name || \"File selected\"}\n                         </a>\n                      </Chip>\n                    )}\n                  </div>\n                )}\n              </label>\n            </div>\n            {hasError && <p className=\"text-danger text-xs\">{error}</p>}\n          </div>\n        );\n\n      case \"rating\":\n        const ratingComponentAlignment = field.properties?.componentAlignment || 'left';\n        const ratingAlignmentClass = ratingComponentAlignment === 'center' ? 'flex justify-center' : \n                                     ratingComponentAlignment === 'right' ? 'flex justify-end' : 'flex justify-start';\n        \n        return (\n          <div className={`space-y-2 ${field.properties.customClasses || \"\"}`}>\n            <div className={ratingAlignmentClass}>\n              <label className=\"text-sm font-medium\">\n                {field.label}\n                {field.required && <span className=\"text-danger\">*</span>}\n              </label>\n            </div>\n            {field.properties?.description && (\n              <div className={ratingAlignmentClass}>\n                <p className=\"text-xs text-default-500\">\n                  {field.properties?.description}\n                </p>\n              </div>\n            )}\n            <div className={ratingAlignmentClass}>\n              <div className=\"flex space-x-1\">\n                {Array.from({ length: field.properties.max || 5 }, (_, i) => (\n                  <button\n                    key={i}\n                    type=\"button\"\n                    disabled={field.properties.disabled}\n                    onClick={() => handleFieldChange(field.id, i + 1)}\n                    className={`p-1 hover:scale-110 transition-transform ${\n                      field.properties.disabled ? 'opacity-50 cursor-not-allowed' : ''\n                    }`}\n                  >\n                    <Star\n                      className={`h-6 w-6 ${\n                        (value || 0) > i\n                          ? \"text-yellow-400 fill-yellow-400\"\n                          : \"text-default-300\"\n                      }`}\n                    />\n                  </button>\n                ))}\n              </div>\n            </div>\n            {value && (\n              <div className={ratingAlignmentClass}>\n                <div className=\"text-sm text-default-600\">\n                  {value} out of {field.properties.max || 5} stars\n                </div>\n              </div>\n            )}\n            {hasError && (\n              <div className={ratingAlignmentClass}>\n                <p className=\"text-danger text-xs\">{error}</p>\n              </div>\n            )}\n          </div>\n        );\n\n      case \"signature\":\n        return (\n          <div className={`space-y-2 ${field.properties.customClasses || \"\"}`}>\n            <label className=\"text-sm font-medium\">\n              {field.label}\n              {field.required && <span className=\"text-danger\">*</span>}\n            </label>\n            {field.properties?.description && (\n              <p className=\"text-xs text-default-500\">\n                {field.properties?.description}\n              </p>\n            )}\n            <SignaturePad\n              value={value}\n              onChange={(signature) => handleFieldChange(field.id, signature)}\n              width={400}\n              height={200}\n              className=\"w-full\"\n              disabled={field.properties.disabled}\n            />\n            {hasError && <p className=\"text-danger text-xs\">{error}</p>}\n          </div>\n        );\n\n      case \"pagebreak\":\n        return (\n          <div className=\"py-4\">\n            <Divider />\n          </div>\n        );\n\n      case \"html\":\n        return (\n          <div className=\"py-2\">\n            <div\n              dangerouslySetInnerHTML={{\n                __html: field.defaultValue || \"<div>HTML content</div>\",\n              }}\n              className=\"prose prose-sm max-w-none\"\n            />\n          </div>\n        );\n\n      case \"button\":\n        return (\n          <Button\n            key={`button-${field.id}`}\n            color={field.properties.colorVariant as any}\n            size={field.properties.size as any}\n            variant={field.properties.variant as any}\n            radius={field.properties.borderRadius as any}\n            isDisabled={field.properties.disabled}\n            className={field.properties.customClasses}\n            onPress={() => {\n              // Handle button click - could trigger custom events or actions\n              console.log('Button clicked:', field.label);\n              handleFieldChange(field.id, 'clicked');\n            }}\n            {...fieldAttributes}\n          >\n            {field.label}\n          </Button>\n        );\n\n      default:\n        return (\n          <div className=\"p-4 border border-dashed border-default-300 rounded-lg text-center\">\n            <p className=\"text-default-500\">\n              Unsupported field type: {field.type}\n            </p>\n          </div>\n        );\n    }\n  };\n\n  return (\n    // <div className={`max-w-4xl mx-auto p-6 ${className}`}>\n    <div className={`mx-auto p-6 ${className}`}>\n      <Card radius=\"sm\" className=\"p-1\">\n        <CardHeader>\n          <div>\n            <h1 className=\"text-2xl font-bold\">{formConfig.metadata.title}</h1>\n            {formConfig.metadata.description && (\n              <p className=\"text-default-600 mt-2\">\n                {formConfig.metadata.description}\n              </p>\n            )}\n          </div>\n        </CardHeader>\n        <CardBody>\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {/* Render form rows with grid layout */}\n            {formConfig.layout.rows.map((row) => (\n              <div key={row.id} className=\"grid grid-cols-12 gap-4\">\n                {row.fields.map((fieldId) => {\n                  const field = formConfig.fieldMap[fieldId];\n                  \n                  // Generate responsive hiding classes for the field container\n                  const getResponsiveClasses = () => {\n                    const classes = [];\n                    if (field.properties.hideOnMobile) {\n                      classes.push('hidden sm:block');\n                    }\n                    if (field.properties.hideOnTablet) {\n                      classes.push('md:hidden lg:block');\n                    }\n                    if (field.properties.hideOnDesktop) {\n                      classes.push('lg:hidden');\n                    }\n                    return classes.join(' ');\n                  };\n                  \n                  const responsiveClasses = getResponsiveClasses();\n                  \n                  return (\n                    <div \n                      key={fieldId} \n                      className={`${field.layout.gridClass} ${responsiveClasses}`}\n                    >\n                      {renderField(field)}\n                    </div>\n                  );\n                })}\n              </div>\n            ))}\n\n            {/* Submit Button */}\n            <div className=\"flex justify-end pt-6 border-t border-divider\">\n              <Button\n                radius=\"sm\"\n                type=\"submit\"\n                color=\"primary\"\n                size=\"md\"\n                className=\"w-full sm:w-auto\"\n              >\n                {formConfig.settings.submitButtonText}\n              </Button>\n            </div>\n          </form>\n        </CardBody>\n      </Card>\n    </div>\n  );\n}\n","import type { FormConfig } from '../types/form';\nimport { groupFieldsIntoRows, getFieldSpan } from './layoutUtils';\n\nexport interface FormExportData {\n  metadata: {\n    id: string;\n    title: string;\n    description?: string;\n    version: string;\n    createdAt: string;\n    exportedAt: string;\n    builderVersion: string;\n  };\n  settings: {\n    submitButtonText: string;\n    redirectUrl?: string;\n    emailNotifications?: string[];\n    allowMultipleSubmissions: boolean;\n    requireAuth: boolean;\n    captchaEnabled: boolean;\n    theme: 'light' | 'dark' | 'auto';\n  };\n  layout: {\n    rows: FormRowExport[];\n    totalFields: number;\n  };\n  fields: FormFieldExport[];\n  fieldMap: Record<string, FormFieldExport>;\n  validation: {\n    requiredFields: string[];\n    fieldsWithValidation: string[];\n  };\n}\n\nexport interface FormRowExport {\n  id: string;\n  fields: string[]; // Array of field IDs\n  columns: number; // Total columns used in this row\n}\n\nexport interface FormFieldExport {\n  id: string;\n  type: string;\n  label: string;\n  name?: string;\n  placeholder?: string;\n  required: boolean;\n  defaultValue?: any;\n  validation?: Array<{\n    type: string;\n    value?: any;\n    message: string;\n  }>;\n  options?: Array<{\n    label: string;\n    value: string;\n  }>;\n  properties: {\n    helpText?: string;\n    description?: string;\n    customClasses?: string;\n    classNames?: {\n      base?: string;\n      label?: string;\n      inputWrapper?: string;\n      innerWrapper?: string;\n      mainWrapper?: string;\n      input?: string;\n      clearButton?: string;\n      helperWrapper?: string;\n      description?: string;\n      errorMessage?: string;\n    };\n    width?: string;\n    rows?: number;\n    multiple?: boolean;\n    accept?: string;\n    min?: number;\n    max?: number;\n    step?: number;\n    startNewRow?: boolean;\n    size?: 'small' | 'medium' | 'large' | 'sm' | 'md' | 'lg';\n    disabled?: boolean;\n    readonly?: boolean;\n    hidden?: boolean;\n    colorVariant?: 'default' | 'primary' | 'secondary' | 'success' | 'warning' | 'danger';\n    borderRadius?: 'none' | 'small' | 'default' | 'large' | 'full' | 'sm' | 'md' | 'lg';\n    variant?: 'solid' | 'bordered' | 'light' | 'flat' | 'faded' | 'shadow' | 'ghost';\n    showCharacterCount?: boolean;\n    minLength?: number;\n    maxLength?: number;\n    // Layout properties\n    marginTop?: string; // Tailwind classes like 'mt-0', 'mt-1', 'mt-2', 'mt-4', 'mt-6', 'mt-8'\n    marginBottom?: string; // Tailwind classes like 'mb-0', 'mb-1', 'mb-2', 'mb-4', 'mb-6', 'mb-8'\n    padding?: string; // Tailwind classes like 'p-0', 'p-1', 'p-2', 'p-4', 'p-6', 'p-8'\n    alignment?: string; // Tailwind classes like 'text-left', 'text-center', 'text-right', 'text-justify'\n    orientation?: 'vertical' | 'horizontal'; // Layout orientation for radio and checkbox groups\n    componentAlignment?: 'left' | 'center' | 'right'; // Unified alignment for labels and components in radio, checkbox, switch, and rating\n    // Responsive properties\n    hideOnMobile?: boolean;\n    hideOnTablet?: boolean;\n    hideOnDesktop?: boolean;\n    // Custom attributes\n    dataAttributes?: string;\n    ariaLabel?: string;\n    tabIndex?: number;\n  };\n  layout: {\n    columnSpan: number;\n    rowId: string;\n    gridClass: string;\n  };\n  conditionalLogic?: {\n    field: string;\n    operator: string;\n    value: any;\n    action: string;\n  };\n}\n\nexport function generateFormExportData(form: FormConfig): FormExportData {\n  const rows = groupFieldsIntoRows(form.fields);\n  const now = new Date().toISOString();\n  \n  // Generate unique names for fields that don't have them\n  const fieldsWithNames = form.fields.map((field, index) => {\n    if (field.name && field.name.trim()) {\n      return field;\n    }\n    \n    // Generate unique name based on type and existing names\n    const baseName = field.type.replace(/[-_]/g, '_').toLowerCase();\n    const existingNames = form.fields\n      .slice(0, index)\n      .map(f => f.name)\n      .filter(Boolean);\n    \n    let uniqueName = baseName;\n    if (existingNames.includes(baseName)) {\n      let counter = 2;\n      uniqueName = `${baseName}${counter}`;\n      while (existingNames.includes(uniqueName)) {\n        counter++;\n        uniqueName = `${baseName}${counter}`;\n      }\n    }\n    \n    return {\n      ...field,\n      name: uniqueName\n    };\n  });\n  \n  // Process rows for export (use original fields for row mapping)\n  const exportRows: FormRowExport[] = rows.map(row => ({\n    id: row.id,\n    fields: row.fields.map(field => field.id),\n    columns: row.fields.reduce((total, field) => total + getFieldSpan(field), 0)\n  }));\n\n  // Process fields for export\n  const exportFields: FormFieldExport[] = fieldsWithNames.map(field => {\n    const span = getFieldSpan(field);\n    const rowId = rows.find(row => row.fields.some(f => f.id === field.id))?.id || 'row-0';\n    \n    return {\n      id: field.id,\n      type: field.type,\n      label: field.label,\n      name: field.name,\n      placeholder: field.placeholder,\n      required: field.required,\n      defaultValue: field.defaultValue,\n      validation: field.validation,\n      options: field.options,\n      properties: {\n        helpText: field.properties?.helpText,\n        description: field.properties?.description,\n        customClasses: field.properties?.customClasses || field.custom?.cssClasses?.join(' ') || '',\n        classNames: field.properties?.classNames,\n        width: field.properties?.width || 'full',\n        rows: field.properties?.rows,\n        multiple: field.properties?.multiple,\n        accept: field.properties?.accept,\n        min: field.properties?.min,\n        max: field.properties?.max,\n        step: field.properties?.step,\n        startNewRow: field.properties?.startNewRow,\n        size: field.properties?.size,\n        disabled: field.advanced?.disabled || field.properties?.disabled,\n        readonly: field.advanced?.readOnly || field.properties?.readonly,\n        hidden: field.advanced?.hidden || field.properties?.hidden,\n        colorVariant: field.properties?.colorVariant,\n        borderRadius: field.properties?.borderRadius,\n        variant: field.properties?.variant,\n        showCharacterCount: field.properties?.showCharacterCount,\n        minLength: field.properties?.minLength,\n        maxLength: field.properties?.maxLength,\n        // Layout properties\n        marginTop: field.properties?.marginTop,\n        marginBottom: field.properties?.marginBottom,\n        padding: field.properties?.padding,\n        alignment: field.properties?.alignment,\n        orientation: field.properties?.orientation,\n        componentAlignment: field.properties?.componentAlignment,\n        // Responsive properties\n        hideOnMobile: field.properties?.hideOnMobile,\n        hideOnTablet: field.properties?.hideOnTablet,\n        hideOnDesktop: field.properties?.hideOnDesktop,\n        // Custom attributes\n        dataAttributes: field.properties?.dataAttributes,\n        ariaLabel: field.properties?.ariaLabel,\n        tabIndex: field.properties?.tabIndex,\n      },\n      layout: {\n        columnSpan: field.columnSpan || span,\n        rowId: rowId,\n        gridClass: getGridClassName(field.columnSpan || span),\n      },\n      conditionalLogic: field.conditionalLogic,\n    };\n  });\n\n  // Create field map for easy lookup\n  const fieldMap: Record<string, FormFieldExport> = {};\n  exportFields.forEach(field => {\n    fieldMap[field.id] = field;\n  });\n\n  // Validation summary\n  const requiredFields = exportFields.filter(field => field.required).map(field => field.id);\n  const fieldsWithValidation = exportFields\n    .filter(field => field.validation && field.validation.length > 0)\n    .map(field => field.id);\n\n  return {\n    metadata: {\n      id: form.id,\n      title: form.title,\n      description: form.description,\n      version: '1.0.0',\n      createdAt: form.id, // Using ID as creation timestamp for now\n      exportedAt: now,\n      builderVersion: '1.0.0',\n    },\n    settings: form.settings,\n    layout: {\n      rows: exportRows,\n      totalFields: exportFields.length,\n    },\n    fields: exportFields,\n    fieldMap,\n    validation: {\n      requiredFields,\n      fieldsWithValidation,\n    },\n  };\n}\n\nfunction getGridClassName(span: number): string {\n  const gridClasses: Record<number, string> = {\n    1: 'col-span-1',\n    2: 'col-span-2',\n    3: 'col-span-3',\n    4: 'col-span-4',\n    5: 'col-span-5',\n    6: 'col-span-6',\n    7: 'col-span-7',\n    8: 'col-span-8',\n    9: 'col-span-9',\n    10: 'col-span-10',\n    11: 'col-span-11',\n    12: 'col-span-12',\n  };\n  \n  return gridClasses[span] || 'col-span-12';\n}\n\nexport function downloadFormAsJson(form: FormConfig, filename?: string) {\n  const exportData = generateFormExportData(form);\n  const jsonString = JSON.stringify(exportData, null, 2);\n  \n  const blob = new Blob([jsonString], { type: 'application/json' });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename || `${form.title.replace(/\\s+/g, '_')}_form_export.json`;\n  link.click();\n  URL.revokeObjectURL(url);\n}\n\n// Utility function to generate form preview JSON (for embedding in preview mode)\nexport function generateFormPreviewJson(form: FormConfig): string {\n  const exportData = generateFormExportData(form);\n  return JSON.stringify(exportData, null, 2);\n}\n","import { useDroppable } from \"@dnd-kit/core\";\nimport {\n  SortableContext,\n  verticalListSortingStrategy,\n} from \"@dnd-kit/sortable\";\nimport { \n  Card, \n  CardBody, \n  Button, \n  Input, \n  Textarea,\n  Modal,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  useDisclosure,\n  Divider\n} from \"@heroui/react\";\nimport { Plus, Check } from \"lucide-react\";\nimport { useFormBuilder } from \"../context/FormBuilderContext\";\nimport { createFormField } from \"../data/formFields\";\nimport { FormRowRenderer } from \"./FormRowRenderer\";\nimport { FormRenderer } from \"./FormRenderer\";\nimport { groupFieldsIntoRows } from \"../utils/layoutUtils\";\nimport { generateFormExportData } from \"../utils/formExport\";\nimport { useState } from \"react\";\n\nexport function FormCanvas() {\n  const { state, actions } = useFormBuilder();\n  const { currentForm, previewMode } = state;\n  \n  // Modal state for preview form submissions\n  const [submissionData, setSubmissionData] = useState<Record<string, any> | null>(null);\n  const {\n    isOpen: isSubmissionModalOpen,\n    onOpen: onSubmissionModalOpen,\n    onOpenChange: onSubmissionModalOpenChange,\n  } = useDisclosure();\n\n  const { setNodeRef, isOver } = useDroppable({\n    id: \"form-canvas\",\n  });\n\n  const handleAddField = () => {\n    const newField = createFormField(\"text\");\n    actions.addField(newField);\n  };\n\n  const handlePreviewSubmit = (data: Record<string, any>) => {\n    setSubmissionData(data);\n    onSubmissionModalOpen();\n  };\n\n  if (currentForm.fields.length === 0) {\n    return (\n      <div\n        ref={setNodeRef}\n        className={`flex-1 p-2 sm:p-4 ${\n          isOver ? \"bg-primary-50\" : \"bg-background\"\n        } transition-colors`}\n      >\n        <Card\n          radius=\"sm\"\n          className=\"h-full border-2 p-4 sm:p-10 border-dashed border-default-300\"\n        >\n          <CardBody className=\"flex flex-col items-center justify-center text-center\">\n            <Plus className=\"text-4xl sm:text-6xl text-default-400 mb-2 sm:mb-4\" />\n            <h3 className=\"text-sm sm:text-md font-semibold mb-2\">\n              Start Building Your Form\n            </h3>\n            <p className=\"text-default-600 mb-4 sm:mb-6 text-xs sm:text-sm max-w-xs sm:max-w-md\">\n              Drag elements from the sidebar or click the button below to add\n              your first field\n            </p>\n            <Button\n              color=\"secondary\"\n              size=\"sm\"\n              radius=\"sm\"\n              startContent={<Plus />}\n              onPress={handleAddField}\n            >\n              Add First Field\n            </Button>\n          </CardBody>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={setNodeRef}\n      className={`flex-1 p-2 sm:p-4 overflow-y-auto ${\n        isOver ? \"bg-primary-50\" : \"bg-background\"\n      } transition-colors`}\n    >\n      <div className={`w-full ${previewMode ? 'max-w-xs sm:max-w-sm md:max-w-md lg:max-w-lg xl:max-w-2xl mx-auto' : ''}`}>\n        {/* Form Header */}\n        <div className=\"mb-2 sm:mb-4 px-1 sm:px-2\">\n          {previewMode ? (\n          <></>\n          ) : (\n            <div className=\"space-y-2 sm:space-y-3 mb-2 sm:mb-4 p-2 sm:p-4 bg-default-50 rounded-lg border border-default-200\">\n              <h3 className=\"text-xs sm:text-sm font-semibold text-default-700 mb-1 sm:mb-2\">Form Information</h3>\n              <Input\n                label=\"Form Title\"\n                placeholder=\"Enter form title...\"\n                value={currentForm.title}\n                onChange={(e) => actions.updateFormMeta({ title: e.target.value })}\n                size=\"sm\"\n                className=\"w-full\"\n              />\n              <Textarea\n                label=\"Form Description (Optional)\"\n                placeholder=\"Enter a brief description of your form...\"\n                value={currentForm.description || \"\"}\n                onChange={(e) => actions.updateFormMeta({ description: e.target.value })}\n                size=\"sm\"\n                rows={2}\n                className=\"w-full\"\n              />\n            </div>\n          )}\n        </div>\n\n        {/* Form Fields */}\n        {previewMode ? (\n          // In preview mode, use the same FormRenderer that will be used with exported JSON\n          <FormRenderer \n            formConfig={generateFormExportData(currentForm)}\n            onSubmit={handlePreviewSubmit}\n          />\n        ) : (\n          <>\n            <SortableContext\n              items={currentForm.fields.map((field) => field.id)}\n              strategy={verticalListSortingStrategy}\n            >\n              <div className=\"space-y-2 sm:space-y-4\">\n                {groupFieldsIntoRows(currentForm.fields).map((row) => (\n                  <FormRowRenderer key={row.id} row={row} isPreview={false} />\n                ))}\n              </div>\n            </SortableContext>\n\n            {/* Submit Button (edit mode) */}\n            <div className=\"mt-2 flex justify-end sm:mt-4 pt-2 sm:pt-4 border-t border-divider px-1 sm:px-2\">\n              <Button\n                radius=\"sm\"\n                color=\"primary\"\n                type=\"submit\"\n                disabled={true}\n                className=\"sm:size-lg\"\n              >\n                {currentForm.settings.submitButtonText}\n              </Button>\n            </div>\n\n            {/* Add Field Button */}\n            <div className=\"mt-2 sm:mt-4 px-1 sm:px-2\">\n              <Button\n                radius=\"sm\"\n                variant=\"bordered\"\n                startContent={<Plus />}\n                onPress={handleAddField}\n                className=\"w-full\"\n                size=\"sm\"\n              >\n                <span className=\"hidden sm:inline\">Add Field</span>\n                <span className=\"sm:hidden\">Add</span>\n              </Button>\n            </div>\n          </>\n        )}\n      </div>\n\n      {/* Preview Submission Result Modal */}\n      <Modal\n        isOpen={isSubmissionModalOpen}\n        onOpenChange={onSubmissionModalOpenChange}\n        size=\"2xl\"\n      >\n        <ModalContent>\n          {(onClose) => (\n            <>\n              <ModalHeader>Form Preview Submission</ModalHeader>\n              <ModalBody>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center gap-2 text-success\">\n                    <Check className=\"w-5 h-5\" />\n                    <span className=\"font-medium\">\n                      Form submitted successfully in preview mode!\n                    </span>\n                  </div>\n                  <Divider />\n                  <div>\n                    <h4 className=\"font-semibold mb-2\">Submitted Data:</h4>\n                    <div className=\"bg-success-50 p-4 rounded-lg\">\n                      <pre className=\"text-sm overflow-auto whitespace-pre-wrap\">\n                        {JSON.stringify(submissionData, null, 2)}\n                      </pre>\n                    </div>\n                  </div>\n                  <div className=\"text-sm text-default-600\">\n                    <strong>Preview Mode:</strong> This shows how your form will behave when submitted. \n                    In a real application, this data would be sent to your server or API endpoint.\n                  </div>\n                </div>\n              </ModalBody>\n              <ModalFooter>\n                <Button\n                  color=\"default\"\n                  variant=\"flat\"\n                  onPress={async () => {\n                    if (submissionData) {\n                      await navigator.clipboard.writeText(\n                        JSON.stringify(submissionData, null, 2)\n                      );\n                    }\n                  }}\n                >\n                  Copy Data\n                </Button>\n                <Button color=\"primary\" onPress={onClose}>\n                  Close\n                </Button>\n              </ModalFooter>\n            </>\n          )}\n        </ModalContent>\n      </Modal>\n    </div>\n  );\n}\n","import { useState } from \"react\";\nimport { Accordion, AccordionItem, Button, Input, Chip } from \"@heroui/react\";\nimport { useDraggable } from \"@dnd-kit/core\";\nimport {\n  DRAG_ITEMS,\n  FIELD_CATEGORIES,\n  createFormField,\n} from \"../data/formFields\";\nimport { useFormBuilder } from \"../context/FormBuilderContext\";\nimport type { FormFieldType } from \"../types/form\";\nimport * as LucideIcons from \"lucide-react\";\n\ninterface DraggableFieldProps {\n  id: string;\n  type: FormFieldType;\n  label: string;\n  icon: string;\n  category: string;\n}\n\nfunction DraggableField({\n  id,\n  type,\n  label,\n  icon,\n  category,\n}: DraggableFieldProps) {\n  const { addField } = useFormBuilder().actions;\n  const isComingSoon = category === \"static\" || category === \"structure\";\n\n  const { attributes, listeners, setNodeRef, transform, isDragging } =\n    useDraggable({\n      id,\n      disabled: isComingSoon, // Disable dragging for coming soon items\n    });\n\n  const style = transform\n    ? {\n        transform: `translate3d(${transform.x}px, ${transform.y}px, 0)`,\n      }\n    : undefined;\n\n  const IconComponent = (LucideIcons as any)[icon] || LucideIcons.Plus;\n\n  const handleClick = () => {\n    if (isComingSoon) {\n      return; // Prevent adding coming soon items\n    }\n    const newField = createFormField(type);\n    addField(newField);\n  };\n\n  return (\n    <div\n      ref={setNodeRef}\n      style={style}\n      {...(!isComingSoon ? listeners : {})}\n      {...(!isComingSoon ? attributes : {})}\n      className={`${\n        !isComingSoon\n          ? \"cursor-grab active:cursor-grabbing\"\n          : \"cursor-not-allowed\"\n      } ${isDragging ? \"opacity-50\" : \"\"}`}\n    >\n      <Button\n        size=\"sm\"\n        radius=\"sm\"\n        variant=\"flat\"\n        className={`mb-1 w-full transition-colors relative ${\n         isComingSoon\n          ? \"bg-background\"\n          : \"bg-background hover:bg-default-100 cursor-pointer\"\n        }`}\n        onPress={handleClick}\n        isDisabled={isComingSoon}\n      >\n        <div className=\"flex absolute left-1 sm:left-3 items-center justify-start text-start gap-1 sm:gap-1.5\">\n          <IconComponent size={14} className=\"sm:w-4 sm:h-4\" />\n          <span className=\"text-xs font-body inline\">{label}</span>\n        </div>\n        {isComingSoon && (\n          <div className=\"absolute bg-white right-1 top-1/2 transform -translate-y-1/2\">\n            <Chip\n              size=\"sm\"\n              color=\"secondary\"\n              variant=\"flat\"\n              className=\"text-xs px-1 py-0 min-h-unit-5 h-5\"\n            >\n              Soon\n            </Chip>\n          </div>\n        )}\n      </Button>\n    </div>\n  );\n}\n\nexport function FieldSidebar() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const filteredItems = DRAG_ITEMS.filter((item) =>\n    item.label.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const groupedItems = FIELD_CATEGORIES.map((category) => ({\n    ...category,\n    items: filteredItems.filter((item) => item.category === category.id),\n  })).filter((category) => category.items.length > 0);\n\n  return (\n    <div className=\"w-full bg-background border-r border-divider h-full overflow-y-auto scrollbar-hide\">\n      <div className=\"p-1 sm:p-2 border-b border-divider\">\n        <h2 className=\"text-xs sm:text-sm font-semibold mb-2 hidden sm:block\">\n          Form Elements\n        </h2>\n        <h2 className=\"text-xs font-semibold mb-2 sm:hidden\">Elements</h2>\n        <Input\n          radius=\"sm\"\n          type=\"text\"\n          placeholder=\"Search...\"\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n          size=\"sm\"\n          className=\"w-full text-xs\"\n        />\n      </div>\n\n      <div className=\"p-1 sm:p-2\">\n        <Accordion\n          isCompact\n          variant=\"light\"\n          selectionMode=\"multiple\"\n          defaultExpandedKeys={[\"basic\", \"choices\"]}\n        >\n          {groupedItems.map((category) => {\n            return (\n              <AccordionItem\n                key={category.id}\n                aria-label={category.label}\n                title={\n                  <div className=\"flex items-center gap-1 sm:gap-2\">\n                    <span className=\"text-xs sm:text-sm inline\">\n                      {category.label}\n                    </span>\n                    <span className=\"text-xs sm:hidden\">\n                      {category.label.charAt(0)}\n                    </span>\n                    <span className=\"text-xs text-default-500 inline\">\n                      ({category.items.length})\n                    </span>\n                  </div>\n                }\n              >\n                <div className=\"space-y-1 sm:space-y-2 pb-2\">\n                  {category.items.map((item) => (\n                    <DraggableField\n                      key={item.id}\n                      id={item.id}\n                      type={item.type}\n                      label={item.label}\n                      icon={item.icon}\n                      category={item.category}\n                    />\n                  ))}\n                </div>\n              </AccordionItem>\n            );\n          })}\n        </Accordion>\n      </div>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport {\n  Card,\n  CardBody,\n  Input,\n  Switch,\n  Select,\n  SelectItem,\n  Button,\n  Tabs,\n  Tab,\n  Chip,\n} from \"@heroui/react\";\nimport { Plus, Trash2, Settings, Layout } from \"lucide-react\";\nimport { useFormBuilder } from \"../context/FormBuilderContext\";\nimport type { FormField, Option } from \"../types/form\";\n\nexport function PropertiesPanel() {\n  const { state } = useFormBuilder();\n  const { selectedFieldId, currentForm } = state;\n\n  const selectedField = currentForm.fields.find(\n    (field) => field.id === selectedFieldId\n  );\n\n  if (!selectedField) {\n    return (\n      <div className=\"w-full bg-background border-l border-divider h-full mt-1 sm:mt-2 p-1 sm:p-2\">\n        <Card radius=\"sm\" className=\"py-4 sm:py-10\">\n          <CardBody className=\"text-center py-2 sm:py-4\">\n            <Settings className=\"text-lg sm:text-2xl text-default-400 mx-auto mb-1 sm:mb-2\" />\n            <h3 className=\"text-xs font-semibold mb-1 hidden sm:block\">\n              No Field Selected\n            </h3>\n            <h3 className=\"text-xs font-semibold mb-1 sm:hidden\">\n              Select Field\n            </h3>\n            <p className=\"text-default-600 text-xs hidden sm:block\">\n              Select a field to edit properties\n            </p>\n          </CardBody>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"w-full bg-background border-l border-divider h-full overflow-y-auto\">\n      <div className=\"p-2\">\n        <h2 className=\"text-sm font-semibold mb-2\">Properties</h2>\n\n        <Tabs aria-label=\"Properties\" variant=\"underlined\" size=\"sm\">\n          <Tab key=\"basic\" title=\"Basic\">\n            <MemoizedBasicProperties field={selectedField} />\n          </Tab>\n          <Tab key=\"layout\" title=\"Layout\">\n            <MemoizedLayoutProperties field={selectedField} />\n          </Tab>\n          <Tab key=\"custom\" title=\"Custom\">\n            <MemoizedCustomProperties field={selectedField} />\n          </Tab>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n\nfunction BasicProperties({ field }: { field: FormField }) {\n  const { actions } = useFormBuilder();\n\n  const updateField = (updates: Partial<FormField>) => {\n    actions.updateField(field.id, updates);\n  };\n\n  const updateProperties = (updates: any) => {\n    actions.updateFieldProperties(field.id, updates);\n  };\n\n  const updateAdvanced = (updates: Partial<FormField[\"advanced\"]>) => {\n    actions.updateFieldAdvanced(field.id, updates);\n  };\n\n  return (\n    <div className=\"space-y-2 pt-2\">\n      <Input\n        key={`label-${field.id}`}\n        label=\"Label\"\n        value={field.label}\n        onValueChange={(value) => updateField({ label: value })}\n        size=\"sm\"\n      />\n\n      <Input\n        key={`name-${field.id}`}\n        label=\"Field Name\"\n        placeholder=\"e.g., first_name, email, age\"\n        value={field.name || \"\"}\n        onValueChange={(value) => updateField({ name: value })}\n        size=\"sm\"\n        description=\"Used as the key in form submissions\"\n      />\n\n      {field.type !== \"section\" && field.type !== \"paragraph\" && (\n        <Input\n          key={`placeholder-${field.id}`}\n          label=\"Placeholder\"\n          value={field.placeholder || \"\"}\n          onValueChange={(value) => updateField({ placeholder: value })}\n          size=\"sm\"\n        />\n      )}\n\n      {/* Description field for HeroUI description prop */}\n      {field.type !== \"section\" && field.type !== \"paragraph\" && (\n        <Input\n          key={`description-${field.id}`}\n          label=\"Description\"\n          placeholder=\"e.g. We'll never share your email with anyone else.\"\n          value={field.properties?.description || \"\"}\n          onValueChange={(value) => updateProperties({ description: value })}\n          size=\"sm\"\n          description=\"Helper text shown below the input field\"\n        />\n      )}\n\n      {/* Add Read Only and Disabled for input fields */}\n      {(field.type === \"text\" ||\n        field.type === \"email\" ||\n        field.type === \"password\" ||\n        field.type === \"number\" ||\n        field.type === \"phone\" ||\n        field.type === \"url\" ||\n        field.type === \"date\" ||\n        field.type === \"time\" ||\n        field.type === \"datetime\" ||\n        field.type === \"calendar\" ||\n        field.type === \"textarea\" ||\n        field.type === \"select\" ||\n        field.type === \"multiselect\" ||\n        field.type === \"autocomplete\" ||\n        field.type === \"search\" ||\n        field.type === \"file\" ||\n        field.type === \"rating\" ||\n        field.type === \"range\" ||\n        field.type === \"rich-text\" ||\n        field.type === \"number-format\" ||\n        field.type === \"pattern-format\") && (\n        <div className=\"space-y-2 border-t border-divider pt-2\">\n          <h5 className=\"text-xs font-medium text-default-600\">Field State</h5>\n\n          <div className=\"flex flex-col gap-1\">\n            <Switch\n              key={`required-${field.id}`}\n              isSelected={field.required}\n              onValueChange={(checked) => updateField({ required: checked })}\n              size=\"sm\"\n            >\n              Required\n            </Switch>\n            <Switch\n              key={`readonly-${field.id}`}\n              isSelected={field.advanced?.readOnly || false}\n              onValueChange={(checked) => updateAdvanced({ readOnly: checked })}\n              size=\"sm\"\n            >\n              Read Only\n            </Switch>\n\n            <Switch\n              key={`disabled-${field.id}`}\n              isSelected={field.advanced?.disabled || false}\n              onValueChange={(checked) => updateAdvanced({ disabled: checked })}\n              size=\"sm\"\n            >\n              Disabled\n            </Switch>\n          </div>\n        </div>\n      )}\n\n      {/* Validation Section */}\n      {(field.type === \"text\" ||\n        field.type === \"phone\" ||\n        field.type === \"url\" ||\n        field.type === \"textarea\") && (\n        <div className=\"space-y-2 border-t border-divider pt-2\">\n          <h5 className=\"text-xs font-medium text-default-600\">Validation</h5>\n          <Input\n            label=\"Pattern (Regex)\"\n            placeholder=\"e.g. ^[A-Za-z0-9]+$\"\n            value={\n              field.validation?.find((v) => v.type === \"pattern\")?.value || \"\"\n            }\n            onValueChange={(value) => {\n              let newValidation = (field.validation || []).filter(\n                (v) => v.type !== \"pattern\"\n              );\n              if (value) {\n                const errorMessage =\n                  field.validation?.find((v) => v.type === \"pattern\")\n                    ?.message || \"\";\n                newValidation.push({\n                  type: \"pattern\",\n                  value,\n                  message: errorMessage,\n                });\n              }\n              updateField({ validation: newValidation });\n            }}\n            size=\"sm\"\n          />\n          <Input\n            label=\"Pattern Error Message\"\n            placeholder=\"e.g. Only alphanumeric characters allowed.\"\n            value={\n              field.validation?.find((v) => v.type === \"pattern\")?.message || \"\"\n            }\n            onValueChange={(value) => {\n              let newValidation = (field.validation || []).filter(\n                (v) => v.type !== \"pattern\"\n              );\n              const patternValue =\n                field.validation?.find((v) => v.type === \"pattern\")?.value ||\n                \"\";\n              if (patternValue) {\n                newValidation.push({\n                  type: \"pattern\",\n                  value: patternValue,\n                  message: value,\n                });\n              }\n              updateField({ validation: newValidation });\n            }}\n            size=\"sm\"\n          />\n        </div>\n      )}\n\n      {/* Color and Size Settings for input fields */}\n      {(field.type === \"text\" ||\n        field.type === \"email\" ||\n        field.type === \"password\" ||\n        field.type === \"number\" ||\n        field.type === \"phone\" ||\n        field.type === \"url\" ||\n        field.type === \"date\" ||\n        field.type === \"time\" ||\n        field.type === \"datetime\" ||\n        field.type === \"calendar\" ||\n        field.type === \"textarea\" ||\n        field.type === \"select\" ||\n        field.type === \"multiselect\" ||\n        field.type === \"autocomplete\" ||\n        field.type === \"search\" ||\n        field.type === \"file\" ||\n        field.type === \"range\") && (\n        <div className=\"space-y-2 border-t border-divider pt-2\">\n          <h5 className=\"text-xs font-medium text-default-600\">Appearance</h5>\n\n          <div className=\"grid grid-cols-2 gap-2\">\n            <Select\n              label=\"Color\"\n              selectedKeys={[field.properties?.colorVariant || \"default\"]}\n              onSelectionChange={(keys) => {\n                const color = Array.from(keys)[0] as string;\n                updateProperties({ colorVariant: color });\n              }}\n              size=\"sm\"\n            >\n              <SelectItem key=\"default\">Default</SelectItem>\n              <SelectItem key=\"primary\">Primary</SelectItem>\n              <SelectItem key=\"secondary\">Secondary</SelectItem>\n              <SelectItem key=\"success\">Success</SelectItem>\n              <SelectItem key=\"warning\">Warning</SelectItem>\n              <SelectItem key=\"danger\">Danger</SelectItem>\n            </Select>\n\n            <Select\n              label=\"Size\"\n              selectedKeys={[field.properties?.size || \"md\"]}\n              onSelectionChange={(keys) => {\n                const size = Array.from(keys)[0] as string;\n                updateProperties({ size: size });\n              }}\n              size=\"sm\"\n            >\n              <SelectItem key=\"sm\">Small</SelectItem>\n              <SelectItem key=\"md\">Medium</SelectItem>\n              <SelectItem key=\"lg\">Large</SelectItem>\n            </Select>\n          </div>\n\n          <Select\n            label=\"Border Radius\"\n            selectedKeys={[field.properties?.borderRadius || \"md\"]}\n            onSelectionChange={(keys) => {\n              const radius = Array.from(keys)[0] as string;\n              updateProperties({ borderRadius: radius });\n            }}\n            size=\"sm\"\n          >\n            <SelectItem key=\"none\">None</SelectItem>\n            <SelectItem key=\"sm\">Small</SelectItem>\n            <SelectItem key=\"md\">Medium</SelectItem>\n            <SelectItem key=\"lg\">Large</SelectItem>\n            <SelectItem key=\"full\">Full</SelectItem>\n          </Select>\n        </div>\n      )}\n\n      {/* Color and Appearance for buttons and interactive elements */}\n      {(field.type === \"button\" ||\n        field.type === \"switch\" ||\n        field.type === \"checkbox\" ||\n        field.type === \"radio\") && (\n        <div className=\"space-y-2 border-t border-divider pt-2\">\n          <h5 className=\"text-xs font-medium text-default-600\">Appearance</h5>\n\n          <div className=\"grid grid-cols-2 gap-2\">\n            <Select\n              label=\"Color\"\n              selectedKeys={[field.properties?.colorVariant || \"default\"]}\n              onSelectionChange={(keys) => {\n                const color = Array.from(keys)[0] as string;\n                updateProperties({ colorVariant: color });\n              }}\n              size=\"sm\"\n            >\n              <SelectItem key=\"default\">Default</SelectItem>\n              <SelectItem key=\"primary\">Primary</SelectItem>\n              <SelectItem key=\"secondary\">Secondary</SelectItem>\n              <SelectItem key=\"success\">Success</SelectItem>\n              <SelectItem key=\"warning\">Warning</SelectItem>\n              <SelectItem key=\"danger\">Danger</SelectItem>\n            </Select>\n\n            <Select\n              label=\"Size\"\n              selectedKeys={[field.properties?.size || \"md\"]}\n              onSelectionChange={(keys) => {\n                const size = Array.from(keys)[0] as string;\n                updateProperties({ size: size });\n              }}\n              size=\"sm\"\n            >\n              <SelectItem key=\"sm\">Small</SelectItem>\n              <SelectItem key=\"md\">Medium</SelectItem>\n              <SelectItem key=\"lg\">Large</SelectItem>\n            </Select>\n          </div>\n\n          {field.type === \"button\" && (\n            <Select\n              label=\"Variant\"\n              selectedKeys={[field.properties?.variant || \"solid\"]}\n              onSelectionChange={(keys) => {\n                const variant = Array.from(keys)[0] as string;\n                updateProperties({ variant: variant });\n              }}\n              size=\"sm\"\n            >\n              <SelectItem key=\"solid\">Solid</SelectItem>\n              <SelectItem key=\"bordered\">Bordered</SelectItem>\n              <SelectItem key=\"light\">Light</SelectItem>\n              <SelectItem key=\"flat\">Flat</SelectItem>\n              <SelectItem key=\"faded\">Faded</SelectItem>\n              <SelectItem key=\"shadow\">Shadow</SelectItem>\n              <SelectItem key=\"ghost\">Ghost</SelectItem>\n            </Select>\n          )}\n        </div>\n      )}\n\n      {(field.type === \"radio\" ||\n        field.type === \"checkbox\" ||\n        field.type === \"select\" ||\n        field.type === \"multiselect\" || \n        field.type === \"autocomplete\") && (\n        <MemoizedOptionsEditor field={field} />\n      )}\n\n      {field.type === \"textarea\" && (\n        <Input\n          key={`rows-${field.id}`}\n          type=\"number\"\n          label=\"Rows\"\n          value={field.properties?.rows?.toString() || \"4\"}\n          onValueChange={(value) =>\n            updateProperties({ rows: parseInt(value) || 4 })\n          }\n          size=\"sm\"\n        />\n      )}\n\n      {field.type === \"rating\" && (\n        <Input\n          key={`max-rating-${field.id}`}\n          type=\"number\"\n          label=\"Max Rating\"\n          value={field.properties?.max?.toString() || \"5\"}\n          onValueChange={(value) =>\n            updateProperties({ max: parseInt(value) || 5 })\n          }\n          size=\"sm\"\n        />\n      )}\n\n      {field.type === \"file\" && (\n        <>\n          <Input\n            key={`accept-${field.id}`}\n            label=\"File Types\"\n            placeholder=\"e.g., .jpg,.png,.pdf\"\n            value={field.properties?.accept || \"\"}\n            onValueChange={(value) => updateProperties({ accept: value })}\n            size=\"sm\"\n          />\n          <Switch\n            key={`multiple-${field.id}`}\n            isSelected={field.properties?.multiple || false}\n            onValueChange={(checked) => updateProperties({ multiple: checked })}\n            size=\"sm\"\n          >\n            Multiple Files\n          </Switch>\n        </>\n      )}\n\n      {field.type === \"number\" && (\n        <>\n          <Input\n            key={`min-${field.id}`}\n            type=\"number\"\n            label=\"Min Value\"\n            value={field.properties?.min?.toString() || \"\"}\n            onValueChange={(value) =>\n              updateProperties({ min: value ? parseFloat(value) : undefined })\n            }\n            size=\"sm\"\n          />\n          <Input\n            key={`max-${field.id}`}\n            type=\"number\"\n            label=\"Max Value\"\n            value={field.properties?.max?.toString() || \"\"}\n            onValueChange={(value) =>\n              updateProperties({ max: value ? parseFloat(value) : undefined })\n            }\n            size=\"sm\"\n          />\n        </>\n      )}\n    </div>\n  );\n}\n\nfunction OptionsEditor({ field }: { field: FormField }) {\n  const { actions } = useFormBuilder();\n  const [newOption, setNewOption] = useState({ label: \"\", value: \"\" });\n\n  const updateOptions = (options: Option[]) => {\n    actions.updateField(field.id, { options });\n  };\n\n  const addOption = () => {\n    if (newOption.label && newOption.value) {\n      const currentOptions = field.options || [];\n      updateOptions([...currentOptions, newOption]);\n      setNewOption({ label: \"\", value: \"\" });\n    }\n  };\n\n  const removeOption = (index: number) => {\n    const currentOptions = field.options || [];\n    updateOptions(currentOptions.filter((_, i) => i !== index));\n  };\n\n  return (\n    <div className=\"space-y-2\">\n      <div className=\"flex items-center justify-between\">\n        <h4 className=\"text-xs font-medium\">Options</h4>\n        <Chip size=\"sm\" variant=\"flat\">\n          {field.options?.length || 0}\n        </Chip>\n      </div>\n\n      {field.options?.map((option, index) => (\n        <div\n          key={`option-${index}-${field.id}`}\n          className=\"p-2 border border-default-200 rounded space-y-1\"\n        >\n          <Input\n            key={`option-label-${index}-${field.id}`}\n            size=\"sm\"\n            placeholder=\"Label\"\n            value={option.label}\n            onValueChange={(value) => {\n              const currentOptions = field.options || [];\n              const updatedOptions = currentOptions.map((opt, i) =>\n                i === index ? { ...opt, label: value } : opt\n              );\n              updateOptions(updatedOptions);\n            }}\n          />\n          <div className=\"flex gap-1\">\n            <Input\n              key={`option-value-${index}-${field.id}`}\n              size=\"sm\"\n              placeholder=\"Value\"\n              value={option.value}\n              onValueChange={(value) => {\n                const currentOptions = field.options || [];\n                const updatedOptions = currentOptions.map((opt, i) =>\n                  i === index ? { ...opt, value: value } : opt\n                );\n                updateOptions(updatedOptions);\n              }}\n              className=\"flex-1\"\n            />\n            <Button\n              size=\"sm\"\n              color=\"danger\"\n              variant=\"flat\"\n              isIconOnly\n              onPress={() => removeOption(index)}\n            >\n              <Trash2 size={12} />\n            </Button>\n          </div>\n        </div>\n      ))}\n\n      <div className=\"p-2 border border-dashed border-default-300 rounded space-y-1\">\n        <Input\n          key={`new-option-label-${field.id}`}\n          size=\"sm\"\n          placeholder=\"New option label\"\n          value={newOption.label}\n          onValueChange={(value) =>\n            setNewOption({ ...newOption, label: value })\n          }\n        />\n        <div className=\"flex gap-1\">\n          <Input\n            key={`new-option-value-${field.id}`}\n            size=\"sm\"\n            placeholder=\"Value\"\n            value={newOption.value}\n            onValueChange={(value) =>\n              setNewOption({ ...newOption, value: value })\n            }\n            className=\"flex-1\"\n          />\n          <Button\n            size=\"sm\"\n            color=\"primary\"\n            variant=\"flat\"\n            isIconOnly\n            onPress={addOption}\n            isDisabled={!newOption.label || !newOption.value}\n          >\n            <Plus size={12} />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction LayoutProperties({ field }: { field: FormField }) {\n  const { actions } = useFormBuilder();\n\n  const updateField = (updates: Partial<FormField>) => {\n    actions.updateField(field.id, updates);\n  };\n\n  const updateProperties = (updates: any) => {\n    actions.updateFieldProperties(field.id, updates);\n  };\n\n  return (\n    <div className=\"space-y-3 pt-2\">\n      <h4 className=\"text-xs font-medium text-default-700 flex items-center gap-1\">\n        <Layout size={12} />\n        Layout & Positioning\n      </h4>\n\n      {/* Grid Layout */}\n      <div className=\"space-y-2\">\n        <Select\n          label=\"Column Span\"\n          selectedKeys={[\n            field.layout?.columnSpan?.toString() ||\n              field.columnSpan?.toString() ||\n              \"12\",\n          ]}\n          onSelectionChange={(keys) => {\n            const span = parseInt(Array.from(keys)[0] as string);\n            updateField({\n              columnSpan: span, // For backward compatibility\n              layout: {\n                ...field.layout,\n                columnSpan: span,\n                gridClass: `col-span-${span}`,\n              },\n            });\n          }}\n          size=\"sm\"\n        >\n          <SelectItem key=\"1\">1 column (8.33%)</SelectItem>\n          <SelectItem key=\"2\">2 columns (16.67%)</SelectItem>\n          <SelectItem key=\"3\">3 columns (25%)</SelectItem>\n          <SelectItem key=\"4\">4 columns (33.33%)</SelectItem>\n          <SelectItem key=\"5\">5 columns (41.67%)</SelectItem>\n          <SelectItem key=\"6\">6 columns (50%)</SelectItem>\n          <SelectItem key=\"7\">7 columns (58.33%)</SelectItem>\n          <SelectItem key=\"8\">8 columns (66.67%)</SelectItem>\n          <SelectItem key=\"9\">9 columns (75%)</SelectItem>\n          <SelectItem key=\"10\">10 columns (83.33%)</SelectItem>\n          <SelectItem key=\"11\">11 columns (91.67%)</SelectItem>\n          <SelectItem key=\"12\">12 columns (100%)</SelectItem>\n        </Select>\n\n        {/* Orientation for radio and checkbox groups */}\n        {(field.type === 'radio' || field.type === 'checkbox') && (\n          <Select\n            label=\"Options Layout\"\n            selectedKeys={[field.properties?.orientation || 'vertical']}\n            onSelectionChange={(keys) => {\n              const orientation = Array.from(keys)[0] as string;\n              updateProperties({ orientation });\n            }}\n            size=\"sm\"\n          >\n            <SelectItem key=\"vertical\">Vertical</SelectItem>\n            <SelectItem key=\"horizontal\">Horizontal</SelectItem>\n          </Select>\n        )}\n\n        {/* Component alignment for radio, checkbox, switch, and rating */}\n        {(field.type === 'radio' || field.type === 'checkbox' || field.type === 'switch' || field.type === 'rating') && (\n          <Select\n            label=\"Alignment\"\n            selectedKeys={[field.properties?.componentAlignment || 'left']}\n            onSelectionChange={(keys) => {\n              const componentAlignment = Array.from(keys)[0] as string;\n              updateProperties({ componentAlignment });\n            }}\n            size=\"sm\"\n          >\n            <SelectItem key=\"left\">Left</SelectItem>\n            <SelectItem key=\"center\">Center</SelectItem>\n            <SelectItem key=\"right\">Right</SelectItem>\n          </Select>\n        )}\n\n        <div className=\"flex justify-start\">\n          <Switch\n            isSelected={field.properties?.startNewRow || false}\n            onValueChange={(checked) =>\n              updateProperties({ startNewRow: checked })\n            }\n            size=\"sm\"\n          >\n            Start New Row\n          </Switch>\n        </div>\n      </div>\n\n      {/* Spacing */}\n      <div className=\"space-y-2 border-t border-divider pt-2\">\n        <h5 className=\"text-xs font-medium text-default-600 text-start\">Spacing</h5>\n\n        <div className=\"grid grid-cols-2 gap-2\">\n          <Select\n            label=\"Margin Top\"\n            selectedKeys={[field.properties?.marginTop || \"mt-0\"]}\n            onSelectionChange={(keys) => {\n              const margin = Array.from(keys)[0] as string;\n              updateProperties({ marginTop: margin });\n            }}\n            size=\"sm\"\n          >\n            <SelectItem key=\"mt-0\">None (mt-0)</SelectItem>\n            <SelectItem key=\"mt-1\">Small (mt-1)</SelectItem>\n            <SelectItem key=\"mt-2\">Medium (mt-2)</SelectItem>\n            <SelectItem key=\"mt-4\">Default (mt-4)</SelectItem>\n            <SelectItem key=\"mt-6\">Large (mt-6)</SelectItem>\n            <SelectItem key=\"mt-8\">Extra Large (mt-8)</SelectItem>\n          </Select>\n\n          <Select\n            label=\"Margin Bottom\"\n            selectedKeys={[field.properties?.marginBottom || \"mb-0\"]}\n            onSelectionChange={(keys) => {\n              const margin = Array.from(keys)[0] as string;\n              updateProperties({ marginBottom: margin });\n            }}\n            size=\"sm\"\n          >\n            <SelectItem key=\"mb-0\">None (mb-0)</SelectItem>\n            <SelectItem key=\"mb-1\">Small (mb-1)</SelectItem>\n            <SelectItem key=\"mb-2\">Medium (mb-2)</SelectItem>\n            <SelectItem key=\"mb-4\">Default (mb-4)</SelectItem>\n            <SelectItem key=\"mb-6\">Large (mb-6)</SelectItem>\n            <SelectItem key=\"mb-8\">Extra Large (mb-8)</SelectItem>\n          </Select>\n        </div>\n\n        <div className=\"grid grid-cols-2 gap-2\">\n          <Select\n            label=\"Outer Spacing\"\n            selectedKeys={[field.properties?.padding || \"p-0\"]}\n            onSelectionChange={(keys) => {\n              const padding = Array.from(keys)[0] as string;\n              updateProperties({ padding });\n            }}\n            size=\"sm\"\n          >\n            <SelectItem key=\"p-0\">None (p-0)</SelectItem>\n            <SelectItem key=\"p-1\">Small (p-1)</SelectItem>\n            <SelectItem key=\"p-2\">Medium (p-2)</SelectItem>\n            <SelectItem key=\"p-4\">Default (p-4)</SelectItem>\n            <SelectItem key=\"p-6\">Large (p-6)</SelectItem>\n            <SelectItem key=\"p-8\">Extra Large (p-8)</SelectItem>\n          </Select>\n\n          {/* Hide text alignment for specific field types that have their own alignment logic */}\n          {!['select', 'autocomplete', 'radio', 'checkbox', 'switch', 'date', 'time', 'file', 'rating'].includes(field.type) && (\n            <Select\n              label=\"Text Alignment\"\n              selectedKeys={[field.properties?.alignment || \"text-left\"]}\n              onSelectionChange={(keys) => {\n                const alignment = Array.from(keys)[0] as string;\n                updateProperties({ alignment });\n              }}\n              size=\"sm\"\n            >\n              <SelectItem key=\"text-left\">Left</SelectItem>\n              <SelectItem key=\"text-center\">Center</SelectItem>\n              <SelectItem key=\"text-right\">Right</SelectItem>\n            </Select>\n          )}\n        </div>\n      </div>\n\n      {/* Responsive Settings */}\n      <div className=\"space-y-2 border-t border-divider pt-2\">\n        <h5 className=\"text-xs font-medium text-default-600 text-start\">Responsive</h5>\n        <div className=\"flex flex-col gap-1\">\n          <Switch\n            isSelected={field.properties?.hideOnMobile || false}\n            onValueChange={(checked) =>\n              updateProperties({ hideOnMobile: checked })\n            }\n            size=\"sm\"\n          >\n            Hide on Mobile\n          </Switch>\n\n          <Switch\n            isSelected={field.properties?.hideOnTablet || false}\n            onValueChange={(checked) =>\n              updateProperties({ hideOnTablet: checked })\n            }\n            size=\"sm\"\n          >\n            Hide on Tablet\n          </Switch>\n\n          <Switch\n            isSelected={field.properties?.hideOnDesktop || false}\n            onValueChange={(checked) =>\n              updateProperties({ hideOnDesktop: checked })\n            }\n            size=\"sm\"\n          >\n            Hide on Desktop\n          </Switch>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Custom Properties Component\nfunction CustomProperties({ field }: { field: FormField }) {\n  const { actions } = useFormBuilder();\n  const [newDataKey, setNewDataKey] = useState(\"\");\n  const [newDataValue, setNewDataValue] = useState(\"\");\n\n  const updateCustom = (updates: Partial<FormField[\"custom\"]>) => {\n    actions.updateFieldCustom(field.id, updates);\n  };\n\n  const updateProperties = (updates: any) => {\n    actions.updateFieldProperties(field.id, updates);\n  };\n\n  const addDataAttribute = () => {\n    if (newDataKey && newDataValue) {\n      const currentDataAttributes = field.custom?.dataAttributes || {};\n      updateCustom({\n        dataAttributes: {\n          ...currentDataAttributes,\n          [newDataKey]: newDataValue,\n        },\n      });\n      setNewDataKey(\"\");\n      setNewDataValue(\"\");\n    }\n  };\n\n  const removeDataAttribute = (key: string) => {\n    const currentDataAttributes = field.custom?.dataAttributes || {};\n    const newAttributes = { ...currentDataAttributes };\n    delete newAttributes[key];\n    updateCustom({ dataAttributes: newAttributes });\n  };\n\n  return (\n    <div className=\"space-y-4 py-4\">\n      <div className=\"space-y-2\">\n        <h5 className=\"text-xs font-medium text-default-600\">HeroUI ClassNames</h5>\n\n        <div className=\"space-y-2 border-t border-divider pt-2\">\n          <div className=\"text-xs text-default-500 font-medium\">Layout & Structure</div>\n\n          <Input\n            key={`classnames-base-${field.id}`}\n            label=\"Base (Outer Container)\"\n            placeholder=\"e.g. p-4 bg-gray-50 rounded-lg\"\n            value={field.properties?.classNames?.base || \"\"}\n            onValueChange={(value) => {\n              const currentClassNames = field.properties?.classNames || {};\n              updateProperties({\n                classNames: {\n                  ...currentClassNames,\n                  base: value \n                } \n              });\n            }}\n            size=\"sm\"\n            description=\"Outer wrapper container\"\n          />\n\n          <Input\n            key={`classnames-mainwrapper-${field.id}`}\n            label=\"Main Wrapper\"\n            placeholder=\"e.g. flex flex-col gap-2\"\n            value={field.properties?.classNames?.mainWrapper || \"\"}\n            onValueChange={(value) => {\n              const currentClassNames = field.properties?.classNames || {};\n              updateProperties({\n                classNames: {\n                  ...currentClassNames,\n                  mainWrapper: value \n                } \n              });\n            }}\n            size=\"sm\"\n            description=\"Main wrapper around input elements\"\n          />\n\n          <Input\n            key={`classnames-innerwrapper-${field.id}`}\n            label=\"Inner Wrapper\"\n            placeholder=\"e.g. relative flex items-center\"\n            value={field.properties?.classNames?.innerWrapper || \"\"}\n            onValueChange={(value) => {\n              const currentClassNames = field.properties?.classNames || {};\n              updateProperties({\n                classNames: {\n                  ...currentClassNames,\n                  innerWrapper: value \n                } \n              });\n            }}\n            size=\"sm\"\n            description=\"Inner wrapper around input field\"\n          />\n        </div>\n\n        <div className=\"space-y-2 border-t border-divider pt-2\">\n          <div className=\"text-xs text-default-500 font-medium\">Input Elements</div>\n\n          <Input\n            key={`classnames-inputwrapper-${field.id}`}\n            label=\"Input Wrapper\"\n            placeholder=\"e.g. border border-red-500 shadow-lg\"\n            value={field.properties?.classNames?.inputWrapper || \"\"}\n            onValueChange={(value) => {\n              const currentClassNames = field.properties?.classNames || {};\n              updateProperties({\n                classNames: {\n                  ...currentClassNames,\n                  inputWrapper: value \n                } \n              });\n            }}\n            size=\"sm\"\n            description=\"Input border, background, and styling\"\n          />\n\n          <Input\n            key={`classnames-input-${field.id}`}\n            label=\"Input Field\"\n            placeholder=\"e.g. text-lg font-bold text-blue-600\"\n            value={field.properties?.classNames?.input || \"\"}\n            onValueChange={(value) => {\n              const currentClassNames = field.properties?.classNames || {};\n              updateProperties({\n                classNames: {\n                  ...currentClassNames,\n                  input: value \n                } \n              });\n            }}\n            size=\"sm\"\n            description=\"Text styling for input content\"\n          />\n\n          <Input\n            key={`classnames-clearbutton-${field.id}`}\n            label=\"Clear Button\"\n            placeholder=\"e.g. text-gray-400 hover:text-red-500\"\n            value={field.properties?.classNames?.clearButton || \"\"}\n            onValueChange={(value) => {\n              const currentClassNames = field.properties?.classNames || {};\n              updateProperties({\n                classNames: {\n                  ...currentClassNames,\n                  clearButton: value \n                } \n              });\n            }}\n            size=\"sm\"\n            description=\"Clear button styling\"\n          />\n        </div>\n\n        <div className=\"space-y-2 border-t border-divider pt-2\">\n          <div className=\"text-xs text-default-500 font-medium\">Labels & Text</div>\n\n          <Input\n            key={`classnames-label-${field.id}`}\n            label=\"Label\"\n            placeholder=\"e.g. text-sm font-semibold text-purple-700\"\n            value={field.properties?.classNames?.label || \"\"}\n            onValueChange={(value) => {\n              const currentClassNames = field.properties?.classNames || {};\n              updateProperties({\n                classNames: {\n                  ...currentClassNames,\n                  label: value \n                } \n              });\n            }}\n            size=\"sm\"\n            description=\"Field label styling\"\n          />\n\n          <Input\n            key={`classnames-description-${field.id}`}\n            label=\"Description/Helper\"\n            placeholder=\"e.g. text-xs text-gray-500 italic\"\n            value={field.properties?.classNames?.description || \"\"}\n            onValueChange={(value) => {\n              const currentClassNames = field.properties?.classNames || {};\n              updateProperties({\n                classNames: {\n                  ...currentClassNames,\n                  description: value \n                } \n              });\n            }}\n            size=\"sm\"\n            description=\"Help text styling\"\n          />\n\n          <Input\n            key={`classnames-helperwrapper-${field.id}`}\n            label=\"Helper Wrapper\"\n            placeholder=\"e.g. mt-1 flex justify-between\"\n            value={field.properties?.classNames?.helperWrapper || \"\"}\n            onValueChange={(value) => {\n              const currentClassNames = field.properties?.classNames || {};\n              updateProperties({\n                classNames: {\n                  ...currentClassNames,\n                  helperWrapper: value \n                } \n              });\n            }}\n            size=\"sm\"\n            description=\"Wrapper for helper text and validation\"\n          />\n\n          <Input\n            key={`classnames-errormessage-${field.id}`}\n            label=\"Error Message\"\n            placeholder=\"e.g. text-red-500 text-xs font-medium\"\n            value={field.properties?.classNames?.errorMessage || \"\"}\n            onValueChange={(value) => {\n              const currentClassNames = field.properties?.classNames || {};\n              updateProperties({\n                classNames: {\n                  ...currentClassNames,\n                  errorMessage: value \n                } \n              });\n            }}\n            size=\"sm\"\n            description=\"Error message styling\"\n          />\n        </div>\n\n        <div className=\"flex gap-2 pt-2 border-t border-divider\">\n          <Button\n            size=\"sm\"\n            variant=\"flat\"\n            onPress={() => {\n              updateProperties({ classNames: undefined });\n            }}\n          >\n            Clear All\n          </Button>\n\n          <Button\n            size=\"sm\"\n            variant=\"flat\"\n            color=\"primary\"\n            onPress={() => {\n              updateProperties({\n                classNames: {\n                  base: \"p-4\",\n                  inputWrapper: \"border-2 border-primary-300 hover:border-primary-500\",\n                  input: \"text-primary-700 font-medium\",\n                  label: \"text-primary-600 font-semibold\",\n                  description: \"text-primary-400\"\n                }\n              });\n            }}\n          >\n            Example Style\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"space-y-2 border-t border-divider pt-2\">\n        <div className=\"flex items-center justify-between\">\n          <h5 className=\"text-xs font-medium text-default-600\">\n            Data Attributes\n          </h5>\n          <Button\n            size=\"sm\"\n            variant=\"flat\"\n            onPress={() => {\n              updateCustom({\n                dataAttributes: {\n                  ...field.custom?.dataAttributes,\n                  'field-type': field.type,\n                  'field-name': field.name || field.label.toLowerCase().replace(/\\s+/g, '-')\n                }\n              });\n            }}\n          >\n            Add Defaults\n          </Button>\n        </div>\n\n        <div className=\"flex gap-2\">\n          <Input\n            key={`new-data-key-${field.id}`}\n            placeholder=\"e.g. analytics-event\"\n            value={newDataKey}\n            onValueChange={setNewDataKey}\n            size=\"sm\"\n            className=\"flex-1\"\n          />\n          <Input\n            key={`new-data-value-${field.id}`}\n            placeholder=\"e.g. form-submit\"\n            value={newDataValue}\n            onValueChange={setNewDataValue}\n            size=\"sm\"\n            className=\"flex-1\"\n          />\n          <Button\n            size=\"sm\"\n            variant=\"flat\"\n            onPress={addDataAttribute}\n            isIconOnly\n          >\n            <Plus className=\"w-4 h-4\" />\n          </Button>\n        </div>\n\n        <div className=\"space-y-1\">\n          {Object.entries(field.custom?.dataAttributes || {}).map(\n            ([key, value]) => (\n              <div\n                key={key}\n                className=\"flex items-center justify-between bg-default-100 p-2 rounded text-xs\"\n              >\n                <span>\n                  <strong>{key}:</strong> {value}\n                </span>\n                <Button\n                  size=\"sm\"\n                  variant=\"light\"\n                  color=\"danger\"\n                  onPress={() => removeDataAttribute(key)}\n                  isIconOnly\n                >\n                  <Trash2 className=\"w-3 h-3\" />\n                </Button>\n              </div>\n            )\n          )}\n        </div>\n      </div>\n\n      <div className=\"space-y-2 border-t border-divider pt-2\">\n        <div className=\"flex items-center justify-between\">\n          <h5 className=\"text-xs font-medium text-default-600\">Accessibility</h5>\n          <Button\n            size=\"sm\"\n            variant=\"flat\"\n            onPress={() => {\n              updateCustom({\n                role: field.type === 'button' ? 'button' : \n                      field.type === 'select' || field.type === 'multiselect' ? 'combobox' :\n                      field.type === 'radio' ? 'radiogroup' :\n                      field.type === 'checkbox' ? 'checkbox' : 'textbox',\n                tabIndex: 0\n              });\n            }}\n          >\n            Add Defaults\n          </Button>\n        </div>\n\n        <Input\n          key={`tab-index-${field.id}`}\n          label=\"Tab Index\"\n          type=\"number\"\n          value={field.custom?.tabIndex?.toString() || \"\"}\n          onValueChange={(value) =>\n            updateCustom({ tabIndex: parseInt(value) || undefined })\n          }\n          size=\"sm\"\n          placeholder=\"0 for normal tab order, -1 to skip\"\n        />\n\n        <Input\n          key={`role-${field.id}`}\n          label=\"ARIA Role\"\n          placeholder=\"textbox, button, combobox, etc.\"\n          value={field.custom?.role || \"\"}\n          onValueChange={(value) => updateCustom({ role: value })}\n          size=\"sm\"\n          description=\"Override the default ARIA role for this element\"\n        />\n      </div>\n    </div>\n  );\n}\n\n// Schema Properties Component\n// Memoized versions to prevent unnecessary re-renders\nconst MemoizedBasicProperties = React.memo(BasicProperties);\nconst MemoizedLayoutProperties = React.memo(LayoutProperties);\nconst MemoizedCustomProperties = React.memo(CustomProperties);\nconst MemoizedOptionsEditor = React.memo(OptionsEditor);\n","import {\n  Navbar,\n  NavbarBrand,\n  NavbarContent,\n  NavbarItem,\n  Button,\n  ButtonGroup,\n  Dropdown,\n  DropdownTrigger,\n  DropdownMenu,\n  DropdownItem,\n  Modal,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  useDisclosure,\n  Card,\n  CardBody,\n  CardHeader,\n  Tabs,\n  Tab,\n} from \"@heroui/react\";\nimport {\n  Download,\n  Upload,\n  MoreVertical,\n  FileJson,\n  Copy,\n  Check,\n  Rows4,\n  AlertCircle,\n  CheckCircle,\n} from \"lucide-react\";\nimport { useState } from \"react\";\nimport { useFormBuilder } from \"../context/FormBuilderContext\";\nimport {\n  downloadFormAsJson,\n  generateFormExportData,\n} from \"../utils/formExport\";\nimport type { FormConfig } from \"../types/form\";\n\nexport function FormBuilderToolbar() {\n  const { state, actions } = useFormBuilder();\n  const { previewMode, currentForm } = state;\n  const [importStatus, setImportStatus] = useState<{\n    type: 'success' | 'error' | null;\n    message: string;\n  }>({ type: null, message: '' });\n  \n  const {\n    isOpen: isJsonOpen,\n    onOpen: onJsonOpen,\n    onOpenChange: onJsonOpenChange,\n  } = useDisclosure();\n\n  const {\n    isOpen: isImportOpen,\n    onOpen: onImportOpen,\n    onOpenChange: onImportOpenChange,\n  } = useDisclosure();\n\n  const handlePreview = () => {\n    // Toggle preview mode\n    actions.setPreviewMode(!previewMode);\n  };\n\n  const handleExport = () => {\n    downloadFormAsJson(currentForm);\n  };\n\n  const handlePreviewJson = () => {\n    // Show JSON preview in modal UI\n    onJsonOpen();\n  };\n\n  const validateFormData = (data: any): boolean => {\n    // Basic validation for form structure\n    if (!data || typeof data !== 'object') return false;\n    \n    // Check if it's an exported form format (with metadata)\n    if (data.metadata && data.fields) {\n      // Validate exported form structure\n      if (!data.metadata.title || typeof data.metadata.title !== 'string') return false;\n      if (!Array.isArray(data.fields)) return false;\n      \n      // Validate each field has required properties\n      for (const field of data.fields) {\n        if (!field.id || !field.type || !field.label) return false;\n      }\n      return true;\n    }\n    \n    // Check if it's a simple form format (FormConfig)\n    if (data.title && data.fields) {\n      if (typeof data.title !== 'string') return false;\n      if (!Array.isArray(data.fields)) return false;\n      \n      // Validate each field has required properties\n      for (const field of data.fields) {\n        if (!field.id || !field.type || !field.label) return false;\n      }\n      return true;\n    }\n    \n    return false;\n  };\n\n  const handleImport = () => {\n    setImportStatus({ type: null, message: '' });\n    onImportOpen();\n  };\n\n  const convertToFormConfig = (data: any): FormConfig => {\n    // If it's already in FormConfig format, return as is\n    if (data.title && data.fields && !data.metadata) {\n      return data;\n    }\n    \n    // Convert from exported format to FormConfig\n    return {\n      id: data.metadata?.id || data.id,\n      title: data.metadata?.title || data.title,\n      description: data.metadata?.description || data.description || '',\n      fields: data.fields,\n      settings: data.settings || {\n        submitButtonText: 'Submit',\n        allowMultipleSubmissions: true,\n        requireAuth: false,\n        captchaEnabled: false,\n        theme: 'auto'\n      }\n    };\n  };\n\n  const handleFileImport = (file: File) => {\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      try {\n        const importedData = JSON.parse(e.target?.result as string);\n        \n        if (!validateFormData(importedData)) {\n          setImportStatus({\n            type: 'error',\n            message: 'Invalid form structure. Please ensure the JSON file contains a valid form configuration.'\n          });\n          return;\n        }\n\n        // Convert to FormConfig format\n        const formData = convertToFormConfig(importedData);\n        \n        // Import the form\n        actions.setForm(formData);\n        setImportStatus({\n          type: 'success',\n          message: `Successfully imported \"${formData.title}\" with ${formData.fields.length} field(s).`\n        });\n        \n        // Close modal after successful import\n        setTimeout(() => {\n          onImportOpenChange();\n          setImportStatus({ type: null, message: '' });\n        }, 2000);\n        \n      } catch (error) {\n        setImportStatus({\n          type: 'error',\n          message: 'Invalid JSON file. Please check the file format and try again.'\n        });\n      }\n    };\n    reader.readAsText(file);\n  };\n\n\n  return (\n    <>\n      <Navbar className=\"border-b border-divider\" maxWidth=\"full\">\n        <NavbarBrand>\n          <h1 className=\"font-bold text-inherit text-sm sm:text-base\">\n            Form Builder\n          </h1>\n        </NavbarBrand>\n\n        <NavbarContent className=\"flex gap-2 sm:gap-4\" justify=\"center\">\n        </NavbarContent>\n\n        <NavbarContent justify=\"end\">\n          <NavbarItem>\n            <ButtonGroup radius=\"sm\" size=\"sm\">\n              <Button\n                variant=\"flat\"\n                onPress={handlePreview}\n                size=\"sm\"\n                className=\"hidden sm:flex\"\n              >\n                {previewMode ? \"Edit Form\" : \"Preview Form\"}\n              </Button>\n              <Button\n                variant=\"flat\"\n                isIconOnly\n                onPress={handlePreview}\n                size=\"sm\"\n                className=\"sm:hidden\"\n              >\n                <Rows4 size={16} />\n              </Button>\n              <Dropdown>\n                <DropdownTrigger>\n                  <Button variant=\"flat\" isIconOnly size=\"sm\">\n                    <MoreVertical />\n                  </Button>\n                </DropdownTrigger>\n                <DropdownMenu>\n                  <DropdownItem\n                    key=\"export\"\n                    startContent={<Download size={16} />}\n                    onPress={handleExport}\n                  >\n                    Export Form JSON\n                  </DropdownItem>\n                  <DropdownItem\n                    key=\"preview-json\"\n                    startContent={<FileJson size={16} />}\n                    onPress={handlePreviewJson}\n                  >\n                    Preview JSON\n                  </DropdownItem>\n                  <DropdownItem\n                    key=\"import\"\n                    startContent={<Upload size={16} />}\n                    onPress={handleImport}\n                  >\n                    Import Form\n                  </DropdownItem>\n                </DropdownMenu>\n              </Dropdown>\n            </ButtonGroup>\n          </NavbarItem>\n        </NavbarContent>\n      </Navbar>\n\n      <JsonPreviewModal\n        isOpen={isJsonOpen}\n        onOpenChange={onJsonOpenChange}\n        form={currentForm}\n      />\n\n      {/* Import Form Modal */}\n      <Modal isOpen={isImportOpen} onOpenChange={onImportOpenChange} size=\"2xl\">\n        <ModalContent>\n          {(onClose) => (\n            <>\n              <ModalHeader className=\"flex flex-col gap-1\">\n                <h3 className=\"text-lg font-semibold\">Import Form</h3>\n                <p className=\"text-sm text-default-500\">\n                  Import a form configuration from JSON file or paste JSON directly\n                </p>\n              </ModalHeader>\n              <ModalBody>\n                 <div className=\"space-y-4\">\n                      <div className=\"border-2 border-dashed border-default-300 rounded-lg p-6 text-center hover:border-default-400 transition-colors\">\n                        <Upload className=\"mx-auto text-default-400 mb-2\" size={32} />\n                        <p className=\"text-sm text-default-600 mb-2\">\n                          Click to upload or drag and drop\n                        </p>\n                        <p className=\"text-xs text-default-500\">\n                          JSON files only (.json)\n                        </p>\n                        <input\n                          type=\"file\"\n                          accept=\".json\"\n                          className=\"absolute inset-0 w-full h-full opacity-0 cursor-pointer\"\n                          onChange={(e) => {\n                            const file = e.target.files?.[0];\n                            if (file) {\n                              handleFileImport(file);\n                            }\n                          }}\n                        />\n                      </div>\n                    </div>\n                {/* Status Messages */}\n                {importStatus.type && (\n                  <div className=\"mt-4\">\n                    <div className={`flex items-center gap-2 p-3 rounded-lg ${\n                      importStatus.type === 'success' \n                        ? 'bg-success-50 border border-success-200 text-success-700'\n                        : 'bg-danger-50 border border-danger-200 text-danger-700'\n                    }`}>\n                      {importStatus.type === 'success' ? (\n                        <CheckCircle className=\"w-4 h-4\" />\n                      ) : (\n                        <AlertCircle className=\"w-4 h-4\" />\n                      )}\n                      <span className=\"text-sm\">{importStatus.message}</span>\n                    </div>\n                  </div>\n                )}\n              </ModalBody>\n              <ModalFooter>\n                <Button variant=\"flat\" onPress={onClose}>\n                  Close\n                </Button>\n              </ModalFooter>\n            </>\n          )}\n        </ModalContent>\n      </Modal>\n    </>\n  );\n}\n\nfunction JsonPreviewModal({\n  isOpen,\n  onOpenChange,\n  form,\n}: {\n  isOpen: boolean;\n  onOpenChange: (open: boolean) => void;\n  form: FormConfig;\n}) {\n  const [copied, setCopied] = useState(false);\n  const [activeTab, setActiveTab] = useState(\"formatted\");\n\n  const formExportData = generateFormExportData(form);\n  const formattedJson = JSON.stringify(formExportData, null, 2);\n  const compactJson = JSON.stringify(formExportData);\n\n  const handleCopy = () => {\n    navigator.clipboard.writeText(formattedJson);\n    setCopied(true);\n    setTimeout(() => setCopied(false), 2000);\n  };\n\n  const handleDownload = () => {\n    const blob = new Blob([formattedJson], { type: \"application/json\" });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = `${form.title.replace(/\\s+/g, \"_\")}_form_config.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onOpenChange={onOpenChange}\n      size=\"5xl\"\n      scrollBehavior=\"inside\"\n      hideCloseButton\n    >\n      <ModalContent>\n        {(onClose) => (\n          <>\n            <ModalHeader className=\"flex flex-col gap-1\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h3 className=\"text-lg font-semibold\">\n                    Form JSON Configuration\n                  </h3>\n                  <p className=\"text-sm text-default-500\">\n                    Use this JSON to render your form elsewhere\n                  </p>\n                </div>\n                <div className=\"flex gap-2\">\n                  <Button\n                    size=\"sm\"\n                    variant=\"flat\"\n                    startContent={\n                      copied ? (\n                        <Check className=\"w-4 h-4\" />\n                      ) : (\n                        <Copy className=\"w-4 h-4\" />\n                      )\n                    }\n                    onPress={handleCopy}\n                  >\n                    {copied ? \"Copied!\" : \"Copy\"}\n                  </Button>\n                  <Button\n                    size=\"sm\"\n                    color=\"primary\"\n                    startContent={<Download className=\"w-4 h-4\" />}\n                    onPress={handleDownload}\n                  >\n                    Download\n                  </Button>\n                </div>\n              </div>\n            </ModalHeader>\n            <ModalBody>\n              <Tabs\n                selectedKey={activeTab}\n                onSelectionChange={(key) => setActiveTab(key as string)}\n                aria-label=\"JSON Format Options\"\n              >\n                <Tab key=\"formatted\" title=\"Formatted\">\n                  <Card>\n                    <CardHeader>\n                      <div className=\"flex items-center justify-between\">\n                        <h4 className=\"text-md font-medium\">Formatted JSON</h4>\n                        <div className=\"text-sm text-default-500\">\n                          {formExportData.layout.totalFields} fields •{\" \"}\n                          {formExportData.layout.rows.length} rows\n                        </div>\n                      </div>\n                    </CardHeader>\n                    <CardBody>\n                      <pre className=\"text-xs overflow-auto bg-default-50 p-4 rounded-lg max-h-96 font-mono\">\n                        {formattedJson}\n                      </pre>\n                    </CardBody>\n                  </Card>\n                </Tab>\n                <Tab key=\"compact\" title=\"Compact\">\n                  <Card>\n                    <CardHeader>\n                      <h4 className=\"text-md font-medium\">Compact JSON</h4>\n                    </CardHeader>\n                    <CardBody>\n                      <pre className=\"text-xs overflow-auto bg-default-50 p-4 rounded-lg max-h-96 font-mono break-all\">\n                        {compactJson}\n                      </pre>\n                    </CardBody>\n                  </Card>\n                </Tab>\n                <Tab key=\"metadata\" title=\"Metadata\">\n                  <Card>\n                    <CardHeader>\n                      <h4 className=\"text-md font-medium\">Form Information</h4>\n                    </CardHeader>\n                    <CardBody>\n                      <div className=\"space-y-4\">\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div>\n                            <label className=\"text-sm font-medium text-default-700\">\n                              Title\n                            </label>\n                            <p className=\"text-sm text-default-600\">\n                              {formExportData.metadata.title}\n                            </p>\n                          </div>\n                          <div>\n                            <label className=\"text-sm font-medium text-default-700\">\n                              Version\n                            </label>\n                            <p className=\"text-sm text-default-600\">\n                              {formExportData.metadata.version}\n                            </p>\n                          </div>\n                          <div>\n                            <label className=\"text-sm font-medium text-default-700\">\n                              Total Fields\n                            </label>\n                            <p className=\"text-sm text-default-600\">\n                              {formExportData.layout.totalFields}\n                            </p>\n                          </div>\n                          <div>\n                            <label className=\"text-sm font-medium text-default-700\">\n                              Required Fields\n                            </label>\n                            <p className=\"text-sm text-default-600\">\n                              {formExportData.validation.requiredFields.length}\n                            </p>\n                          </div>\n                        </div>\n\n                        <div>\n                          <label className=\"text-sm font-medium text-default-700\">\n                            Description\n                          </label>\n                          <p className=\"text-sm text-default-600\">\n                            {formExportData.metadata.description ||\n                              \"No description provided\"}\n                          </p>\n                        </div>\n\n                        <div>\n                          <label className=\"text-sm font-medium text-default-700\">\n                            Field Types\n                          </label>\n                          <div className=\"flex flex-wrap gap-2 mt-1\">\n                            {[\n                              ...new Set(\n                                formExportData.fields.map((f) => f.type)\n                              ),\n                            ].map((type) => (\n                              <span\n                                key={type}\n                                className=\"text-xs bg-default-100 text-default-700 px-2 py-1 rounded\"\n                              >\n                                {type}\n                              </span>\n                            ))}\n                          </div>\n                        </div>\n\n                        <div>\n                          <label className=\"text-sm font-medium text-default-700\">\n                            Settings\n                          </label>\n                          <div className=\"bg-default-50 p-3 rounded-lg mt-1\">\n                            <div className=\"grid grid-cols-2 gap-3 text-sm\">\n                              <div>\n                                <span className=\"text-default-700\">\n                                  Submit Button:\n                                </span>\n                                <span className=\"text-default-600 ml-2\">\n                                  {formExportData.settings.submitButtonText}\n                                </span>\n                              </div>\n                              <div>\n                                <span className=\"text-default-700\">Theme:</span>\n                                <span className=\"text-default-600 ml-2\">\n                                  {formExportData.settings.theme}\n                                </span>\n                              </div>\n                              <div>\n                                <span className=\"text-default-700\">\n                                  Multiple Submissions:\n                                </span>\n                                <span className=\"text-default-600 ml-2\">\n                                  {formExportData.settings\n                                    .allowMultipleSubmissions\n                                    ? \"Yes\"\n                                    : \"No\"}\n                                </span>\n                              </div>\n                              <div>\n                                <span className=\"text-default-700\">\n                                  Captcha:\n                                </span>\n                                <span className=\"text-default-600 ml-2\">\n                                  {formExportData.settings.captchaEnabled\n                                    ? \"Enabled\"\n                                    : \"Disabled\"}\n                                </span>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </CardBody>\n                  </Card>\n                </Tab>\n              </Tabs>\n            </ModalBody>\n            <ModalFooter>\n              <Button color=\"default\" variant=\"light\" onPress={onClose}>\n                Close\n              </Button>\n            </ModalFooter>\n          </>\n        )}\n      </ModalContent>\n    </Modal>\n  );\n}\n","import { useState } from \"react\";\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  Textarea,\n  Modal,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  useDisclosure,\n  Divider,\n} from \"@heroui/react\";\nimport { Copy, Check, Upload, FileText, AlertCircle } from \"lucide-react\";\nimport { FormRenderer } from \"../components/FormRenderer\";\nimport type { FormExportData } from \"../utils/formExport\";\n\nexport function JsonFormRenderer() {\n  const [jsonInput, setJsonInput] = useState(\"\");\n  const [parsedForm, setParsedForm] = useState<FormExportData | null>(null);\n  const [parseError, setParseError] = useState(\"\");\n  const [submissionData, setSubmissionData] = useState<Record<\n    string,\n    any\n  > | null>(null);\n  const [copied, setCopied] = useState(false);\n  const {\n    isOpen: isSubmissionModalOpen,\n    onOpen: onSubmissionModalOpen,\n    onOpenChange: onSubmissionModalOpenChange,\n  } = useDisclosure();\n\n  // Simple sample JSON for demonstration\n  const sampleJson = {\n    metadata: {\n      id: \"sample-form-001\",\n      title: \"Contact Information Form\",\n      description: \"A simple contact form example\",\n      version: \"1.0.0\",\n      createdAt: \"2025-07-19T00:00:00.000Z\",\n      exportedAt: \"2025-07-19T00:00:00.000Z\",\n      builderVersion: \"1.0.0\",\n    },\n    settings: {\n      submitButtonText: \"Submit Form\",\n      allowMultipleSubmissions: true,\n      requireAuth: false,\n      captchaEnabled: false,\n      theme: \"auto\" as const,\n    },\n    layout: {\n      rows: [\n        {\n          id: \"row-0\",\n          fields: [\"name-field\", \"email-field\"],\n          columns: 12,\n        },\n        {\n          id: \"row-1\",\n          fields: [\"message-field\"],\n          columns: 12,\n        },\n      ],\n      totalFields: 3,\n    },\n    fields: [\n      {\n        id: \"name-field\",\n        type: \"text\",\n        label: \"Full Name\",\n        name: \"full_name\",\n        placeholder: \"Enter your full name\",\n        required: true,\n        properties: {\n          width: \"full\",\n          helpText: \"Please enter your complete name\",\n        },\n        layout: {\n          columnSpan: 6,\n          rowId: \"row-0\",\n          gridClass: \"col-span-6\",\n        },\n      },\n      {\n        id: \"email-field\",\n        type: \"email\",\n        label: \"Email Address\",\n        name: \"email\",\n        placeholder: \"Enter your email\",\n        required: true,\n        properties: {\n          width: \"full\",\n          helpText: \"We'll use this to contact you\",\n        },\n        layout: {\n          columnSpan: 6,\n          rowId: \"row-0\",\n          gridClass: \"col-span-6\",\n        },\n      },\n      {\n        id: \"message-field\",\n        type: \"textarea\",\n        label: \"Message\",\n        name: \"message\",\n        placeholder: \"Enter your message here...\",\n        required: false,\n        properties: {\n          width: \"full\",\n          rows: 4,\n          helpText: \"Tell us how we can help you\",\n        },\n        layout: {\n          columnSpan: 12,\n          rowId: \"row-1\",\n          gridClass: \"col-span-12\",\n        },\n      },\n    ],\n    fieldMap: {\n      \"name-field\": {\n        id: \"name-field\",\n        type: \"text\",\n        label: \"Full Name\",\n        name: \"full_name\",\n        placeholder: \"Enter your full name\",\n        required: true,\n        properties: {\n          width: \"full\",\n          helpText: \"Please enter your complete name\",\n        },\n        layout: {\n          columnSpan: 6,\n          rowId: \"row-0\",\n          gridClass: \"col-span-6\",\n        },\n      },\n      \"email-field\": {\n        id: \"email-field\",\n        type: \"email\",\n        label: \"Email Address\",\n        name: \"email\",\n        placeholder: \"Enter your email\",\n        required: true,\n        properties: {\n          width: \"full\",\n          helpText: \"We'll use this to contact you\",\n        },\n        layout: {\n          columnSpan: 6,\n          rowId: \"row-0\",\n          gridClass: \"col-span-6\",\n        },\n      },\n      \"message-field\": {\n        id: \"message-field\",\n        type: \"textarea\",\n        label: \"Message\",\n        name: \"message\",\n        placeholder: \"Enter your message here...\",\n        required: false,\n        properties: {\n          width: \"full\",\n          rows: 4,\n          helpText: \"Tell us how we can help you\",\n        },\n        layout: {\n          columnSpan: 12,\n          rowId: \"row-1\",\n          gridClass: \"col-span-12\",\n        },\n      },\n    },\n    validation: {\n      requiredFields: [\"name-field\", \"email-field\"],\n      fieldsWithValidation: [\"email-field\"],\n    },\n  };\n\n  const handleParseJson = () => {\n    try {\n      setParseError(\"\");\n      const parsed = JSON.parse(jsonInput);\n\n      // Basic validation of JSON structure\n      if (\n        !parsed.metadata ||\n        !parsed.settings ||\n        !parsed.layout ||\n        !parsed.fields ||\n        !parsed.fieldMap\n      ) {\n        throw new Error(\n          \"Invalid form JSON structure. Missing required properties.\"\n        );\n      }\n\n      setParsedForm(parsed);\n    } catch (error) {\n      setParseError(\n        error instanceof Error\n          ? error.message\n          : \"Invalid JSON format. Please check your syntax.\"\n      );\n      setParsedForm(null);\n    }\n  };\n\n  const loadSampleJson = () => {\n    setJsonInput(JSON.stringify(sampleJson, null, 2));\n    setParsedForm(sampleJson);\n    setParseError(\"\");\n  };\n\n  const copyToClipboard = async () => {\n    await navigator.clipboard.writeText(JSON.stringify(sampleJson, null, 2));\n    setCopied(true);\n    setTimeout(() => setCopied(false), 2000);\n  };\n\n  const handleFormSubmit = (data: Record<string, any>) => {\n    setSubmissionData(data);\n    onSubmissionModalOpen();\n  };\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file && file.type === \"application/json\") {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        const content = e.target?.result as string;\n        setJsonInput(content);\n        try {\n          const parsed = JSON.parse(content);\n          setParsedForm(parsed);\n          setParseError(\"\");\n        } catch (error) {\n          setParseError(\"Invalid JSON file format\");\n          setParsedForm(null);\n        }\n      };\n      reader.readAsText(file);\n    }\n  };\n\n  const clearForm = () => {\n    setJsonInput(\"\");\n    setParsedForm(null);\n    setParseError(\"\");\n    setSubmissionData(null);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"mx-auto p-6\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold mb-2\">JSON Form Renderer</h1>\n          <p className=\"text-default-600\">\n            Paste your form JSON configuration to render and test a live form\n          </p>\n        </div>\n\n        <div className=\"flex flex-col sm:flex-row gap-6\">\n          {/* JSON Input Panel */}\n          <div className=\"basis-4/12\">\n            <Card radius=\"sm\">\n              <CardHeader>\n                <div className=\"flex items-center justify-between w-full p-1\">\n                  <div className=\"flex gap-2 flex-wrap\">\n                    <input\n                      type=\"file\"\n                      accept=\".json\"\n                      onChange={handleFileUpload}\n                      className=\"hidden\"\n                      id=\"json-file-upload\"\n                    />\n                    <Button\n                      size=\"sm\"\n                      variant=\"flat\"\n                      startContent={<Upload className=\"w-4 h-4\" />}\n                      onPress={() =>\n                        document.getElementById(\"json-file-upload\")?.click()\n                      }\n                    >\n                      Upload JSON\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"flat\"\n                      startContent={\n                        copied ? (\n                          <Check className=\"w-4 h-4\" />\n                        ) : (\n                          <Copy className=\"w-4 h-4\" />\n                        )\n                      }\n                      onPress={copyToClipboard}\n                    >\n                      {copied ? \"Copied!\" : \"Sample\"}\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      color=\"secondary\"\n                      onPress={loadSampleJson}\n                    >\n                      Load Sample\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      color=\"danger\"\n                      variant=\"flat\"\n                      onPress={clearForm}\n                    >\n                      Clear\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardBody>\n                <div className=\"p-1 \">\n                  <Textarea\n                    placeholder=\"Paste your form JSON configuration here...\"\n                    value={jsonInput}\n                    onChange={(e) => setJsonInput(e.target.value)}\n                    maxRows={20}\n                    className=\"font-mono text-sm\"\n                    classNames={{\n                      description: \"h-96\",\n                      input: \"resize-none\",\n                    }}\n                  />\n\n                  {parseError && (\n                    <div className=\"flex items-start gap-2 text-danger text-sm bg-danger-50 p-3 rounded-lg\">\n                      <AlertCircle className=\"w-4 h-4 mt-0.5 flex-shrink-0\" />\n                      <div>\n                        <strong>Parse Error:</strong> {parseError}\n                      </div>\n                    </div>\n                  )}\n\n                  <div className=\"flex gap-2 mt-4\">\n                    <Button\n                      radius=\"sm\"\n                      color=\"secondary\"\n                      onPress={handleParseJson}\n                      isDisabled={!jsonInput.trim()}\n                      className=\"flex-1\"\n                    >\n                      Parse & Render Form\n                    </Button>\n                  </div>\n                </div>\n              </CardBody>\n            </Card>\n\n            {/* Form Info */}\n            {parsedForm && (\n              <Card radius=\"sm\" className=\"mt-5\">\n                <CardHeader>\n                  <h3 className=\"text-lg font-semibold\">Form Information</h3>\n                </CardHeader>\n                <CardBody>\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-default-600\">Title:</span>\n                      <span className=\"font-medium\">\n                        {parsedForm.metadata.title}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-default-600\">Fields:</span>\n                      <span className=\"font-medium\">\n                        {parsedForm.fields.length}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-default-600\">Required Fields:</span>\n                      <span className=\"font-medium\">\n                        {parsedForm.validation.requiredFields.length}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-default-600\">Version:</span>\n                      <span className=\"font-medium\">\n                        {parsedForm.metadata.version}\n                      </span>\n                    </div>\n                  </div>\n                </CardBody>\n              </Card>\n            )}\n          </div>\n\n          {/* Form Preview Panel */}\n          <div className=\"basis-8/12\">\n            {parsedForm ? (\n              <div className=\"\">\n                <FormRenderer\n                  formConfig={parsedForm}\n                  onSubmit={handleFormSubmit}\n                />\n              </div>\n            ) : (\n              <div className=\"text-center py-12 text-default-500\">\n                <FileText className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                <p className=\"text-lg font-medium mb-2\">No Form Data</p>\n                <p>\n                  Upload a JSON file, paste JSON data, or load a sample to\n                  preview the form\n                </p>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Submission Result Modal */}\n        <Modal\n          isOpen={isSubmissionModalOpen}\n          onOpenChange={onSubmissionModalOpenChange}\n          size=\"2xl\"\n        >\n          <ModalContent>\n            {(onClose) => (\n              <>\n                <ModalHeader>Form Submission Result</ModalHeader>\n                <ModalBody>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center gap-2 text-success\">\n                      <Check className=\"w-5 h-5\" />\n                      <span className=\"font-medium\">\n                        Form submitted successfully!\n                      </span>\n                    </div>\n                    <Divider />\n                    <div>\n                      <h4 className=\"font-semibold mb-2\">Submitted Data:</h4>\n                      <div className=\"bg-success-50 p-4 rounded-lg\">\n                        <pre className=\"text-sm overflow-auto whitespace-pre-wrap\">\n                          {JSON.stringify(submissionData, null, 2)}\n                        </pre>\n                      </div>\n                    </div>\n                    <div className=\"text-sm text-default-600\">\n                      <strong>Note:</strong> This is a demonstration. In a real\n                      application, this data would be sent to your server or API\n                      endpoint.\n                    </div>\n                  </div>\n                </ModalBody>\n                <ModalFooter>\n                  <Button\n                    color=\"default\"\n                    variant=\"flat\"\n                    onPress={async () => {\n                      if (submissionData) {\n                        await navigator.clipboard.writeText(\n                          JSON.stringify(submissionData, null, 2)\n                        );\n                      }\n                    }}\n                  >\n                    Copy Data\n                  </Button>\n                  <Button color=\"primary\" onPress={onClose}>\n                    Close\n                  </Button>\n                </ModalFooter>\n              </>\n            )}\n          </ModalContent>\n        </Modal>\n      </div>\n    </div>\n  );\n}\n","import { \n  Card, \n  CardBody, \n  CardHeader, \n  Chip, \n  Progress,\n  Spacer\n} from '@heroui/react';\nimport { \n  Sparkles, \n  Zap, \n  Target, \n  Clock, \n  CheckCircle,\n  Gift,\n  Rocket,\n  Upload,\n} from 'lucide-react';\n\nconst AnnouncementPage = () => {\n  const newFeatures = [\n    {\n      icon: <Target className=\"w-5 h-5\" />,\n      title: \"Unified Field Alignment\",\n      description: \"Radio, checkbox, switch, and rating fields now have consistent label and component alignment controls.\",\n      status: \"released\"\n    },\n    {\n      icon: <Zap className=\"w-5 h-5\" />,\n      title: \"Auto-Generated Field Names\",\n      description: \"Fields without custom names automatically get unique identifiers (e.g., text_input, text_input2).\",\n      status: \"released\"\n    },\n    {\n      icon: <Sparkles className=\"w-5 h-5\" />,\n      title: \"Autocomplete Field Support\",\n      description: \"Full HeroUI Autocomplete field with searchable dropdown options and validation.\",\n      status: \"released\"\n    },\n    {\n      icon: <Upload className=\"w-5 h-5\" />,\n      title: \"Form Import/Export System\",\n      description: \"Complete JSON import/export functionality with validation and format conversion for seamless form portability.\",\n      status: \"released\"\n    }\n  ];\n\n  const improvements = [\n    \"Cleaner Properties Panel with context-aware controls\",\n    \"Hidden text alignment for field types that don't need it\",\n    \"Better drag-and-drop experience with disabled state handling\",\n    \"Enhanced form export with auto-naming logic\",\n    \"Form import functionality with format validation\",\n    \"Improved accessibility and user experience\"\n  ];\n\n  const upcomingFeatures = [\n    {\n      title: \"Static Content Elements\",\n      description: \"Rich text, images, dividers, and spacers\",\n      eta: \"Next Release\"\n    },\n    {\n      title: \"Advanced Layout Controls\",\n      description: \"Sections, tabs, and multi-step wizards\",\n      eta: \"Q2 2024\"\n    },\n    {\n      title: \"Conditional Logic\",\n      description: \"Show/hide fields based on other field values\",\n      eta: \"Q2 2024\"\n    },\n    {\n      title: \"Custom Validation Rules\",\n      description: \"Advanced validation with custom error messages\",\n      eta: \"Q3 2024\"\n    }\n  ];\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-6xl\">\n      {/* Hero Section */}\n      <div className=\"text-center mb-12\">\n        <div className=\"flex justify-center mb-4\">\n          <Chip \n            color=\"primary\" \n            variant=\"flat\" \n            startContent={<Gift className=\"w-4 h-4\" />}\n            size=\"lg\"\n          >\n            Version 1.1 - New Features\n          </Chip>\n        </div>\n        \n        <h1 className=\"text-4xl md:text-6xl font-bold bg-gradient-to-r from-primary-500 to-secondary-500 bg-clip-text text-transparent mb-5\">\n          🎉 Major Updates Available!\n        </h1>\n        \n        <p className=\"text-xl text-default-600 max-w-3xl mx-auto mb-8\">\n          We've been working hard to bring you exciting new features, improvements, and a better overall experience. \n          Here's everything new in React Form Builder!\n        </p>\n        \n        <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center\">\n          <Card className=\"bg-gradient-to-r from-primary-50 to-secondary-50 border-primary-200\">\n            <CardBody className=\"text-center py-4\">\n              <div className=\"flex items-center justify-center gap-3\">\n                <Rocket className=\"w-6 h-6 text-primary-600\" />\n                <div>\n                  <p className=\"font-semibold text-primary-700\">Try Live Demo</p>\n                  <a \n                    href=\"https://react-form-builder.flowcsolutions.com/\" \n                    target=\"_blank\" \n                    rel=\"noopener noreferrer\"\n                    className=\"text-primary-600 hover:text-primary-800 underline text-sm\"\n                  >\n                    react-form-builder.flowcsolutions.com\n                  </a>\n                </div>\n              </div>\n            </CardBody>\n          </Card>\n        </div>\n\n      </div>\n\n      {/* Progress Bar */}\n      <Card className=\"mb-8\">\n        <CardBody>\n          <div className=\"flex items-center justify-between mb-2\">\n            <span className=\"text-sm font-medium\">Release Progress</span>\n            <span className=\"text-sm text-default-600\">4/4 Features Completed</span>\n          </div>\n          <Progress value={100} color=\"success\" className=\"mb-2\" />\n          <p className=\"text-xs text-default-600\">All planned features for v1.1 have been successfully implemented!</p>\n        </CardBody>\n      </Card>\n\n      {/* New Features Grid */}\n      <div className=\"mb-12\">\n        <h2 className=\"text-3xl font-bold text-center mb-8 flex items-center justify-center gap-2\">\n          <Rocket className=\"w-8 h-8 text-primary-500\" />\n          New Features & Enhancements\n        </h2>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          {newFeatures.map((feature, index) => (\n            <Card key={index} className=\"hover:shadow-lg transition-shadow\">\n              <CardHeader className=\"pb-2\">\n                <div className=\"flex items-center gap-x-3 justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"p-2 rounded-lg bg-primary-50 text-primary-500\">\n                      {feature.icon}\n                    </div>\n                    <h3 className=\"text-lg font-semibold\">{feature.title}</h3>\n                  </div>\n                  <Chip \n                    color=\"success\" \n                    variant=\"flat\" \n                    size=\"sm\"\n                    startContent={<CheckCircle className=\"w-3 h-3\" />}\n                  >\n                    Released\n                  </Chip>\n                </div>\n              </CardHeader>\n              <CardBody className=\"pt-0\">\n                <p className=\"text-default-600\">{feature.description}</p>\n              </CardBody>\n            </Card>\n          ))}\n        </div>\n      </div>\n\n      {/* Improvements Section */}\n      <Card className=\"mb-12\">\n        <CardHeader>\n          <h2 className=\"text-2xl font-bold flex items-center gap-2\">\n            <Zap className=\"w-6 h-6 text-warning-500\" />\n            Quality Improvements\n          </h2>\n        </CardHeader>\n        <CardBody>\n          <div className=\"space-y-3\">\n            {improvements.map((improvement, index) => (\n              <div key={index} className=\"flex items-start gap-3\">\n                <CheckCircle className=\"w-5 h-5 text-success-500 mt-0.5 flex-shrink-0\" />\n                <span className=\"text-default-700\">{improvement}</span>\n              </div>\n            ))}\n          </div>\n        </CardBody>\n      </Card>\n\n      {/* Upcoming Features */}\n      <div className=\"mb-12\">\n        <h2 className=\"text-3xl font-bold text-center mb-8 flex items-center justify-center gap-2\">\n          <Clock className=\"w-8 h-8 text-secondary-500\" />\n          What's Coming Next\n        </h2>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          {upcomingFeatures.map((feature, index) => (\n            <Card key={index} className=\"border-dashed border-2 border-default-200\">\n              <CardHeader className=\"pb-2\">\n                <div className=\"flex items-center gap-x-3 justify-between\">\n                  <h3 className=\"text-lg font-semibold\">{feature.title}</h3>\n                  <Chip color=\"secondary\" variant=\"flat\" size=\"sm\">\n                    {feature.eta}\n                  </Chip>\n                </div>\n              </CardHeader>\n              <CardBody className=\"pt-0\">\n                <p className=\"text-default-600\">{feature.description}</p>\n              </CardBody>\n            </Card>\n          ))}\n        </div>\n      </div>\n\n      {/* Changelog Section */}\n      <Card className=\"mb-12\">\n        <CardHeader>\n          <h2 className=\"text-2xl font-bold flex items-center gap-2\">\n            📋 Version 1.1 Changelog\n          </h2>\n        </CardHeader>\n        <CardBody>\n          <div className=\"space-y-4\">\n            <div>\n              <h4 className=\"font-semibold text-primary-600 mb-2\">🆕 New Features</h4>\n              <ul className=\"space-y-2 text-sm text-default-600 ml-4\">\n                <li>• Added Autocomplete field type with HeroUI integration</li>\n                <li>• Implemented auto-generated field naming system</li>\n                <li>• Added unified alignment controls for radio, checkbox, switch, and rating fields</li>\n                <li>• Built comprehensive form import/export system with validation</li>\n              </ul>\n            </div>\n            \n            <div>\n              <h4 className=\"font-semibold text-warning-600 mb-2\">🛠️ Improvements</h4>\n              <ul className=\"space-y-2 text-sm text-default-600 ml-4\">\n                <li>• Enhanced Properties Panel with context-aware controls</li>\n                <li>• Hidden text alignment for irrelevant field types</li>\n                <li>• Improved drag-and-drop experience with disabled states</li>\n                <li>• Better form export logic with intelligent naming</li>\n                <li>• Added form import functionality with validation and format conversion</li>\n                <li>• Enhanced accessibility and user experience</li>\n              </ul>\n            </div>\n\n            <div>\n              <h4 className=\"font-semibold text-success-600 mb-2\">🐛 Bug Fixes</h4>\n              <ul className=\"space-y-2 text-sm text-default-600 ml-4\">\n                <li>• Fixed alignment inconsistencies across different field types</li>\n                <li>• Resolved field naming conflicts in form exports</li>\n                <li>• Improved error handling for invalid field configurations</li>\n              </ul>\n            </div>\n          </div>\n        </CardBody>\n      </Card>\n\n      {/* Thank You Section */}\n      {/* <Card className=\"bg-gradient-to-r from-primary-50 to-secondary-50 border-none\">\n        <CardBody className=\"text-center py-8\">\n          <div className=\"flex justify-center mb-4\">\n            <Heart className=\"w-8 h-8 text-danger-500\" />\n          </div>\n          <h2 className=\"text-2xl font-bold mb-4\">Thank You!</h2>\n          <p className=\"text-default-600 max-w-2xl mx-auto mb-6\">\n            Your feedback and support drive our development. We're committed to making React Form Builder \n            the best form building solution for React developers.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button \n              color=\"primary\" \n              variant=\"flat\"\n              endContent={<ExternalLink className=\"w-4 h-4\" />}\n              onPress={() => window.open('https://github.com/flowcsolutions/react-form-builder/issues/new', '_blank')}\n            >\n              Share Feedback\n            </Button>\n            <Button \n              variant=\"light\"\n              endContent={<ExternalLink className=\"w-4 h-4\" />}\n              onPress={() => window.open('https://github.com/flowcsolutions/react-form-builder/discussions', '_blank')}\n            >\n              Join Community\n            </Button>\n          </div>\n        </CardBody>\n      </Card> */}\n\n      <Spacer y={8} />\n\n      {/* Footer */}\n      <div className=\"text-center text-sm text-default-500\">\n        <p>React Form Builder v1.1 • Built with ❤️ by FlowC Solutions</p>\n      </div>\n    </div>\n  );\n};\n\nexport default AnnouncementPage;\n","import { \n  Card, \n  CardBody, \n  CardHeader, \n  Chip, \n  Spacer,\n  Code,\n  Button,\n  Link,\n  Snippet\n} from '@heroui/react';\nimport { \n  BookOpen, \n  Github, \n  Package, \n  Zap, \n  Code as CodeIcon,\n  ExternalLink,\n  Terminal,\n  Settings,\n  Palette,\n  Shield,\n  Users,\n  Rocket,\n  Upload\n} from 'lucide-react';\n\nconst DocumentationPage = () => {\n  const features = [\n    {\n      icon: <Zap className=\"w-5 h-5\" />,\n      title: \"Drag & Drop Interface\",\n      description: \"Intuitive form building with drag-and-drop functionality\"\n    },\n    {\n      icon: <Palette className=\"w-5 h-5\" />,\n      title: \"HeroUI Components\",\n      description: \"Beautiful, accessible components with modern design\"\n    },\n    {\n      icon: <Shield className=\"w-5 h-5\" />,\n      title: \"TypeScript Support\",\n      description: \"Full type safety and excellent developer experience\"\n    },\n    {\n      icon: <Settings className=\"w-5 h-5\" />,\n      title: \"Responsive Design\",\n      description: \"Mobile-first design that works on all devices\"\n    },\n    {\n      icon: <Upload className=\"w-5 h-5\" />,\n      title: \"Advanced Import/Export\",\n      description: \"Complete JSON import/export system with validation and format conversion\"\n    },\n    {\n      icon: <CodeIcon className=\"w-5 h-5\" />,\n      title: \"Extensive Field Types\",\n      description: \"17+ field types including advanced components\"\n    }\n  ];\n\n  const fieldTypes = [\n    \"Text Input\", \"Email\", \"Password\", \"Number\", \"Date\", \"Time\", \"Textarea\",\n    \"Select\", \"Autocomplete\", \"Multi-select\", \"Radio\", \"Checkbox\", \"Switch\",\n    \"File Upload\", \"Rating\", \"Phone\"\n  ];\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-6xl\">\n      {/* Hero Section */}\n      <div className=\"text-center mb-12\">\n        <div className=\"flex justify-center mb-4\">\n          <Chip \n            color=\"primary\" \n            variant=\"flat\" \n            startContent={<BookOpen className=\"w-4 h-4\" />}\n            size=\"lg\"\n          >\n            Documentation\n          </Chip>\n        </div>\n        \n        <h1 className=\"text-4xl md:text-6xl font-bold bg-gradient-to-r from-primary-500 to-secondary-500 bg-clip-text text-transparent mb-4\">\n          📚 Complete Guide\n        </h1>\n        \n        <p className=\"text-xl text-default-600 max-w-3xl mx-auto mb-8\">\n          Everything you need to know about React Form Builder - installation, usage, customization, and more.\n        </p>\n      </div>\n\n      {/* Quick Start */}\n      <Card className=\"mb-8\">\n        <CardHeader>\n          <h2 className=\"text-2xl font-bold flex items-center gap-2\">\n            <Rocket className=\"w-6 h-6 text-primary-500\" />\n            Quick Start\n          </h2>\n        </CardHeader>\n        <CardBody>\n          <div className=\"space-y-6\">\n            <div>\n              <h3 className=\"text-lg font-semibold mb-2\">Installation</h3>\n              <div className=\"space-y-4\">\n                <div>\n                  <p className=\"text-sm text-default-600 mb-2\">Install the package and required dependencies:</p>\n                  <Snippet \n                    symbol=\"\"\n                    variant=\"bordered\"\n                    color=\"default\"\n                    className=\"w-full\"\n                    classNames={{\n                      base: \"w-full\",\n                      pre: \"whitespace-pre-wrap break-all\"\n                    }}\n                  >\n                    npm install @flowcsolutions/react-form-builder react react-dom @heroui/react framer-motion lucide-react uuid\n                  </Snippet>\n                </div>\n                <div>\n                  <p className=\"text-sm text-default-600 mb-2\">Install TailwindCSS (required for styling):</p>\n                  <Snippet \n                    symbol=\"\"\n                    variant=\"bordered\"\n                    color=\"default\"\n                    className=\"w-full\"\n                    classNames={{\n                      base: \"w-full\",\n                      pre: \"whitespace-pre-wrap break-all\"\n                    }}\n                  >\n                    npm install -D tailwindcss @tailwindcss/vite\n                  </Snippet>\n                </div>\n              </div>\n            </div>\n\n            <div>\n              <h3 className=\"text-lg font-semibold mb-2\">Required Dependencies</h3>\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n                <Card className=\"bg-primary-50 border-primary-200\">\n                  <CardHeader className=\"pb-2\">\n                    <h4 className=\"font-medium text-sm text-primary-700\">Core Dependencies</h4>\n                  </CardHeader>\n                  <CardBody className=\"pt-0\">\n                    <ul className=\"text-sm text-default-600 space-y-1\">\n                      <li>• <Code size=\"sm\">react</Code> (^18.0.0 || ^19.0.0)</li>\n                      <li>• <Code size=\"sm\">react-dom</Code> (^18.0.0 || ^19.0.0)</li>\n                      <li>• <Code size=\"sm\">@heroui/react</Code> (^2.8.0)</li>\n                      <li>• <Code size=\"sm\">framer-motion</Code> (^12.0.0)</li>\n                    </ul>\n                  </CardBody>\n                </Card>\n                <Card className=\"bg-secondary-50 border-secondary-200\">\n                  <CardHeader className=\"pb-2\">\n                    <h4 className=\"font-medium text-sm text-secondary-700\">Additional Dependencies</h4>\n                  </CardHeader>\n                  <CardBody className=\"pt-0\">\n                    <ul className=\"text-sm text-default-600 space-y-1\">\n                      <li>• <Code size=\"sm\">lucide-react</Code> (^0.400.0)</li>\n                      <li>• <Code size=\"sm\">uuid</Code> (^11.0.0)</li>\n                      <li>• <Code size=\"sm\">tailwindcss</Code> (^4.0.0)</li>\n                      <li>• <Code size=\"sm\">@tailwindcss/vite</Code> (^4.0.0)</li>\n                    </ul>\n                  </CardBody>\n                </Card>\n              </div>\n            </div>\n\n            <div>\n              <h3 className=\"text-lg font-semibold mb-2\">Basic Usage</h3>\n              <Snippet \n                symbol=\"\"\n                variant=\"bordered\"\n                color=\"default\"\n                className=\"w-full\"\n                classNames={{\n                  base: \"w-full\",\n                  pre: \"whitespace-pre-wrap\"\n                }}\n              >\n{`import { ReactFormBuilderSuite } from '@flowcsolutions/react-form-builder';\nimport '@flowcsolutions/react-form-builder/style.css';\n\nfunction App() {\n  return <ReactFormBuilderSuite />;\n}`}\n              </Snippet>\n            </div>\n          </div>\n        </CardBody>\n      </Card>\n\n      {/* Features Overview */}\n      <div className=\"mb-12\">\n        <h2 className=\"text-3xl font-bold text-center mb-8 flex items-center justify-center gap-2\">\n          <Zap className=\"w-8 h-8 text-primary-500\" />\n          Key Features\n        </h2>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {features.map((feature, index) => (\n            <Card key={index} className=\"hover:shadow-lg transition-shadow\">\n              <CardHeader className=\"pb-2\">\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"p-2 rounded-lg bg-primary-50 text-primary-500\">\n                    {feature.icon}\n                  </div>\n                  <h3 className=\"text-lg font-semibold\">{feature.title}</h3>\n                </div>\n              </CardHeader>\n              <CardBody className=\"pt-0\">\n                <p className=\"text-default-600\">{feature.description}</p>\n              </CardBody>\n            </Card>\n          ))}\n        </div>\n      </div>\n\n      {/* Field Types */}\n      <Card className=\"mb-8\">\n        <CardHeader>\n          <h2 className=\"text-2xl font-bold flex items-center gap-2\">\n            <Settings className=\"w-6 h-6 text-secondary-500\" />\n            Supported Field Types\n          </h2>\n        </CardHeader>\n        <CardBody>\n          <div className=\"flex flex-wrap gap-2\">\n            {fieldTypes.map((type) => (\n              <Chip\n                key={type}\n                variant=\"flat\"\n                color=\"secondary\"\n                size=\"sm\"\n              >\n                {type}\n              </Chip>\n            ))}\n          </div>\n        </CardBody>\n      </Card>\n\n      {/* Advanced Usage */}\n      <Card className=\"mb-8\">\n        <CardHeader>\n          <h2 className=\"text-2xl font-bold flex items-center gap-2\">\n            <CodeIcon className=\"w-6 h-6 text-warning-500\" />\n            Advanced Usage\n          </h2>\n        </CardHeader>\n        <CardBody>\n          <div className=\"space-y-6\">\n            <div>\n              <h3 className=\"text-lg font-semibold mb-2\">Custom Form Renderer</h3>\n              <Snippet \n                symbol=\"\"\n                variant=\"bordered\"\n                color=\"default\"\n                className=\"w-full\"\n                classNames={{\n                  base: \"w-full\",\n                  pre: \"whitespace-pre-wrap text-xs sm:text-sm\"\n                }}\n              >\n{`import { FormRenderer } from '@flowcsolutions/react-form-builder';\n\nconst MyForm = () => {\n  const formConfig = {\n    title: \"Contact Form\",\n    fields: [\n      {\n        id: \"1\",\n        type: \"text\",\n        label: \"Name\",\n        required: true\n      }\n    ]\n  };\n\n  const handleSubmit = (data) => {\n    console.log('Form submitted:', data);\n  };\n\n  return (\n    <FormRenderer \n      form={formConfig} \n      onSubmit={handleSubmit}\n    />\n  );\n};`}\n              </Snippet>\n            </div>\n\n            <div>\n              <h3 className=\"text-lg font-semibold mb-2\">Custom Form Builder</h3>\n              <Snippet \n                symbol=\"\"\n                variant=\"bordered\"\n                color=\"default\"\n                className=\"w-full\"\n                classNames={{\n                  base: \"w-full\",\n                  pre: \"whitespace-pre-wrap text-xs sm:text-sm\"\n                }}\n              >\n{`import { \n  FormBuilderProvider, \n  FormBuilder \n} from '@flowcsolutions/react-form-builder';\n\nconst MyFormBuilder = () => {\n  return (\n    <FormBuilderProvider>\n      <FormBuilder \n        onFormChange={(form) => {\n          console.log('Form updated:', form);\n        }}\n      />\n    </FormBuilderProvider>\n  );\n};`}\n              </Snippet>\n            </div>\n          </div>\n        </CardBody>\n      </Card>\n\n      {/* Configuration */}\n      <Card className=\"mb-8\">\n        <CardHeader>\n          <h2 className=\"text-2xl font-bold flex items-center gap-2\">\n            <Settings className=\"w-6 h-6 text-success-500\" />\n            Configuration\n          </h2>\n        </CardHeader>\n        <CardBody>\n          <div className=\"space-y-4\">\n            <div>\n              <h3 className=\"text-lg font-semibold mb-2\">Form Settings</h3>\n              <Snippet \n                symbol=\"\"\n                variant=\"flat\"\n                color=\"default\"\n                className=\"w-full\"\n                classNames={{\n                  base: \"w-full\",\n                  pre: \"whitespace-pre-wrap text-xs sm:text-sm\"\n                }}\n              >\n{`{\n  \"submitButtonText\": \"Submit Form\",\n  \"allowMultipleSubmissions\": true,\n  \"requireAuth\": false,\n  \"captchaEnabled\": false,\n  \"theme\": \"auto\"\n}`}\n              </Snippet>\n            </div>\n\n            <div>\n              <h3 className=\"text-lg font-semibold mb-2\">Field Properties</h3>\n              <Snippet \n                symbol=\"\"\n                variant=\"flat\"\n                color=\"default\"\n                className=\"w-full\"\n                classNames={{\n                  base: \"w-full\",\n                  pre: \"whitespace-pre-wrap text-xs sm:text-sm\"\n                }}\n              >\n{`{\n  \"label\": \"Field Label\",\n  \"placeholder\": \"Enter value...\",\n  \"required\": true,\n  \"properties\": {\n    \"size\": \"md\",\n    \"colorVariant\": \"primary\",\n    \"borderRadius\": \"md\",\n    \"width\": \"full\"\n  }\n}`}\n              </Snippet>\n            </div>\n          </div>\n        </CardBody>\n      </Card>\n\n      {/* API Reference */}\n      <Card className=\"mb-8\">\n        <CardHeader>\n          <h2 className=\"text-2xl font-bold flex items-center gap-2\">\n            <Terminal className=\"w-6 h-6 text-danger-500\" />\n            API Reference\n          </h2>\n        </CardHeader>\n        <CardBody>\n          <div className=\"space-y-4\">\n            <div>\n              <h3 className=\"text-lg font-semibold mb-2\">Available Components</h3>\n              <ul className=\"list-disc list-inside space-y-1 text-default-600\">\n                <li><Code>ReactFormBuilderSuite</Code> - Complete form builder with preview</li>\n                <li><Code>FormBuilder</Code> - Form builder interface only</li>\n                <li><Code>FormRenderer</Code> - Render forms from JSON configuration</li>\n                <li><Code>FormBuilderProvider</Code> - Context provider for state management</li>\n                <li><Code>FieldSidebar</Code> - Draggable field components panel</li>\n                <li><Code>PropertiesPanel</Code> - Field properties editor</li>\n              </ul>\n            </div>\n\n            <div>\n              <h3 className=\"text-lg font-semibold mb-2\">Props</h3>\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full text-sm\">\n                  <thead>\n                    <tr className=\"border-b border-default-200\">\n                      <th className=\"text-left p-2\">Component</th>\n                      <th className=\"text-left p-2\">Prop</th>\n                      <th className=\"text-left p-2\">Type</th>\n                      <th className=\"text-left p-2\">Description</th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"text-default-600\">\n                    <tr className=\"border-b border-default-100\">\n                      <td className=\"p-2\"><Code>FormRenderer</Code></td>\n                      <td className=\"p-2\">form</td>\n                      <td className=\"p-2\">FormConfig</td>\n                      <td className=\"p-2\">Form configuration object</td>\n                    </tr>\n                    <tr className=\"border-b border-default-100\">\n                      <td className=\"p-2\"><Code>FormRenderer</Code></td>\n                      <td className=\"p-2\">onSubmit</td>\n                      <td className=\"p-2\">Function</td>\n                      <td className=\"p-2\">Form submission handler</td>\n                    </tr>\n                    <tr className=\"border-b border-default-100\">\n                      <td className=\"p-2\"><Code>FormBuilder</Code></td>\n                      <td className=\"p-2\">onFormChange</td>\n                      <td className=\"p-2\">Function</td>\n                      <td className=\"p-2\">Form change handler</td>\n                    </tr>\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n        </CardBody>\n      </Card>\n\n      {/* Contributing */}\n      <Card className=\"mb-8\">\n        <CardHeader>\n          <h2 className=\"text-2xl font-bold flex items-center gap-2\">\n            <Users className=\"w-6 h-6 text-primary-500\" />\n            Contributing\n          </h2>\n        </CardHeader>\n        <CardBody>\n          <div className=\"space-y-4\">\n            <p className=\"text-default-600\">\n              We welcome contributions! Please feel free to submit a Pull Request.\n            </p>\n            \n            <div className=\"flex flex-wrap gap-4\">\n              <Button\n                color=\"primary\"\n                variant=\"flat\"\n                startContent={<Github className=\"w-4 h-4\" />}\n                as={Link}\n                href=\"https://github.com/zenpou21/react-form-builder\"\n                isExternal\n              >\n                View on GitHub\n                <ExternalLink className=\"w-3 h-3 ml-1\" />\n              </Button>\n              \n              <Button\n                color=\"secondary\"\n                variant=\"flat\"\n                startContent={<Package className=\"w-4 h-4\" />}\n                as={Link}\n                href=\"https://www.npmjs.com/package/@flowcsolutions/react-form-builder\"\n                isExternal\n              >\n                View on NPM\n                <ExternalLink className=\"w-3 h-3 ml-1\" />\n              </Button>\n            </div>\n          </div>\n        </CardBody>\n      </Card>\n\n      {/* License */}\n      <Card className=\"mb-8\">\n        <CardHeader>\n          <h2 className=\"text-2xl font-bold flex items-center gap-2\">\n            <Shield className=\"w-6 h-6 text-success-500\" />\n            License\n          </h2>\n        </CardHeader>\n        <CardBody>\n          <p className=\"text-default-600\">\n            This project is licensed under the MIT License - see the LICENSE file for details.\n          </p>\n        </CardBody>\n      </Card>\n\n      <Spacer y={8} />\n\n      {/* Footer */}\n      <div className=\"text-center text-sm text-default-500\">\n        <p>React Form Builder v1.1.4 • Built with ❤️ by FlowC Solutions</p>\n      </div>\n    </div>\n  );\n};\n\nexport default DocumentationPage;\n","import { Tabs, Tab } from \"@heroui/react\";\nimport { Rocket, BookOpen } from \"lucide-react\";\nimport AnnouncementPage from \"./AnnouncementPage\";\nimport DocumentationPage from \"./DocumentationPage\";\n\nconst WhatsNewPage = () => {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Tabs\n        color=\"secondary\"\n        defaultSelectedKey=\"announcements\"\n        className=\"w-full text-white\"\n        classNames={{\n          base: \"w-full\",\n          tabList:\n            \"gap-6 w-full relative rounded-none p-0 border-b border-divider bg-background\",\n          cursor: \"w-full !text-white\",\n          tab: \"max-w-fit px-6 h-12 text-medium text-white\",\n        }}\n      >\n        <Tab\n          key=\"announcements\"\n          title={\n            <div className=\"flex items-center gap-2\">\n              <Rocket className=\"w-4 h-4\" />\n              <span>What's New</span>\n            </div>\n          }\n        >\n          <AnnouncementPage />\n        </Tab>\n        <Tab\n          key=\"documentation\"\n          title={\n            <div className=\"flex items-center gap-2\">\n              <BookOpen className=\"w-4 h-4\" />\n              <span>Documentation</span>\n            </div>\n          }\n        >\n          <DocumentationPage />\n        </Tab>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default WhatsNewPage;\n","import { useState } from \"react\";\nimport {\n  HeroUIProvider,\n  Button,\n  ButtonGroup,\n  Modal,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  useDisclosure,\n  Chip,\n} from \"@heroui/react\";\nimport { DndContext } from \"@dnd-kit/core\";\nimport type { DragEndEvent, DragOverEvent } from \"@dnd-kit/core\";\nimport {\n  FormBuilderProvider,\n  useFormBuilder,\n} from \"./context/FormBuilderContext\";\nimport { FormBuilderToolbar } from \"./components/FormBuilderToolbar\";\nimport { FieldSidebar } from \"./components/FieldSidebar\";\nimport { FormCanvas } from \"./components/FormCanvas\";\nimport { PropertiesPanel } from \"./components/PropertiesPanel\";\nimport { JsonFormRenderer } from \"./examples/JsonFormRenderer\";\nimport WhatsNewPage from \"./pages/WhatsNewPage\";\nimport { createFormField } from \"./data/formFields\";\nimport type { FormFieldType } from \"./types/form\";\nimport { Package, Settings, Sparkles } from \"lucide-react\";\nimport \"./App.css\";\nimport \"./styles.css\";\n\ntype AppMode = \"builder\" | \"renderer\" | \"announcement\";\n\nfunction AppModeSelector({\n  mode,\n  setMode,\n}: {\n  mode: AppMode;\n  setMode: (mode: AppMode) => void;\n}) {\n  return (\n    <div className=\"p-4 border-b border-divider bg-background\">\n      <div className=\"max-w-7xl mx-auto\">\n        <h1 className=\"text-xl sm:text-2xl font-bold mb-2\">\n          Form Builder Suite\n        </h1>\n\n        {/* Desktop Navigation */}\n        <div className=\"hidden sm:block\">\n          <ButtonGroup className=\"\" radius=\"sm\">\n            <Button\n              variant={mode === \"builder\" ? \"solid\" : \"flat\"}\n              color={mode === \"builder\" ? \"secondary\" : \"default\"}\n              onPress={() => setMode(\"builder\")}\n            >\n              Form Builder\n            </Button>\n            <Button\n              variant={mode === \"renderer\" ? \"solid\" : \"flat\"}\n              color={mode === \"renderer\" ? \"secondary\" : \"default\"}\n              onPress={() => setMode(\"renderer\")}\n            >\n              JSON Renderer\n            </Button>\n            <Button\n              variant={mode === \"announcement\" ? \"solid\" : \"flat\"}\n              color={mode === \"announcement\" ? \"secondary\" : \"default\"}\n              onPress={() => setMode(\"announcement\")}\n              startContent={\n                <Sparkles className=\"w-4 h-4 sparkle-animation text-warning-500\" />\n              }\n            >\n              What's New{\" \"}\n              <Chip\n                size=\"sm\"\n                color=\"success\"\n                variant=\"solid\"\n                className=\"ml-2 text-white\"\n              >\n                v1.1\n              </Chip>\n            </Button>\n          </ButtonGroup>\n        </div>\n\n        {/* Mobile Navigation */}\n        <div className=\"block sm:hidden\">\n          <div className=\"flex flex-col gap-2\">\n            {/* Row 1: Form Builder and JSON Renderer */}\n            <div className=\"flex gap-2\">\n              <Button\n                variant={mode === \"builder\" ? \"solid\" : \"flat\"}\n                color={mode === \"builder\" ? \"secondary\" : \"default\"}\n                onPress={() => setMode(\"builder\")}\n                className=\"flex-1\"\n                size=\"sm\"\n              >\n                Builder\n              </Button>\n              <Button\n                variant={mode === \"renderer\" ? \"solid\" : \"flat\"}\n                color={mode === \"renderer\" ? \"secondary\" : \"default\"}\n                onPress={() => setMode(\"renderer\")}\n                className=\"flex-1\"\n                size=\"sm\"\n              >\n                Renderer\n              </Button>\n            </div>\n\n            {/* Row 2: What's New button (full width) */}\n            <Button\n              variant={mode === \"announcement\" ? \"solid\" : \"flat\"}\n              color={mode === \"announcement\" ? \"secondary\" : \"default\"}\n              onPress={() => setMode(\"announcement\")}\n              startContent={\n                <Sparkles className=\"w-3 h-3 sparkle-animation text-warning-500\" />\n              }\n              className=\"w-full\"\n              size=\"sm\"\n            >\n              What's New{\" \"}\n              <Chip\n                size=\"sm\"\n                color=\"success\"\n                variant=\"solid\"\n                className=\"ml-1 text-white text-xs\"\n              >\n                v1.1\n              </Chip>\n            </Button>\n          </div>\n        </div>\n\n        {/* Mode descriptions */}\n        <div className=\"mt-3 text-sm text-default-500\">\n          {mode === \"builder\" &&\n            \"Create and design forms with drag-and-drop interface\"}\n          {mode === \"renderer\" &&\n            \"Import JSON configurations and render live forms\"}\n          {mode === \"announcement\" &&\n            \"Discover new features and improvements in the latest version\"}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction FormBuilderContent() {\n  const { state, actions } = useFormBuilder();\n  const { currentForm, previewMode } = state;\n\n  // Modal controls for mobile panels\n  const {\n    isOpen: isElementsOpen,\n    onOpen: onElementsOpen,\n    onOpenChange: onElementsOpenChange,\n  } = useDisclosure();\n\n  const {\n    isOpen: isPropertiesOpen,\n    onOpen: onPropertiesOpen,\n    onOpenChange: onPropertiesOpenChange,\n  } = useDisclosure();\n\n  const handleDragEnd = (event: DragEndEvent) => {\n    const { active, over } = event;\n\n    if (!over) return;\n\n    // Handle dropping from sidebar to canvas\n    if (\n      over.id === \"form-canvas\" &&\n      typeof active.id === \"string\" &&\n      !active.id.includes(\"-\")\n    ) {\n      const fieldType = active.id as FormFieldType;\n      const newField = createFormField(fieldType);\n      actions.addField(newField);\n      return;\n    }\n\n    // Handle reordering within canvas\n    if (active.id !== over.id) {\n      const oldIndex = currentForm.fields.findIndex(\n        (field) => field.id === active.id\n      );\n      const newIndex = currentForm.fields.findIndex(\n        (field) => field.id === over.id\n      );\n\n      if (oldIndex !== -1 && newIndex !== -1) {\n        actions.reorderFields(oldIndex, newIndex);\n      }\n    }\n  };\n\n  const handleDragOver = (_event: DragOverEvent) => {\n    // Handle drag over logic if needed\n  };\n\n  return (\n    <>\n      <div className=\"h-[calc(100vh-120px)] font-sans flex flex-col bg-background\">\n        <FormBuilderToolbar />\n        <div className=\"flex flex-1 overflow-hidden\">\n          <DndContext onDragEnd={handleDragEnd} onDragOver={handleDragOver}>\n            {/* Desktop Sidebar - Hidden on mobile */}\n            {!previewMode && (\n              <div className=\"hidden md:block md:w-1/4\">\n                <FieldSidebar />\n              </div>\n            )}\n\n            {/* Main Canvas - Full width on mobile, responsive on desktop */}\n            <div\n              className={`\n              flex-1 overflow-auto scrollbar-hide\n              ${previewMode ? \"w-full\" : \"w-full md:w-2/4\"}\n            `}\n            >\n              <FormCanvas />\n            </div>\n\n            {/* Desktop Properties Panel - Hidden on mobile */}\n            {!previewMode && (\n              <div className=\"hidden md:block md:w-1/4\">\n                <PropertiesPanel />\n              </div>\n            )}\n          </DndContext>\n        </div>\n\n        {/* Mobile Bottom Navigation */}\n        {!previewMode && (\n          <div className=\"md:hidden border-t border-divider bg-background p-2\">\n            <div className=\"flex gap-2\">\n              <Button\n                size=\"sm\"\n                variant=\"flat\"\n                className=\"flex-1\"\n                startContent={<Package size={16} />}\n                onPress={onElementsOpen}\n              >\n                Elements\n              </Button>\n              <Button\n                size=\"sm\"\n                variant=\"flat\"\n                className=\"flex-1\"\n                startContent={<Settings size={16} />}\n                onPress={onPropertiesOpen}\n              >\n                Properties\n              </Button>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Elements Modal for Mobile */}\n      <Modal\n        isOpen={isElementsOpen}\n        onOpenChange={onElementsOpenChange}\n        size=\"full\"\n        placement=\"bottom\"\n        classNames={{\n          base: \"md:hidden\",\n          backdrop: \"md:hidden\",\n        }}\n      >\n        <ModalContent>\n          {() => (\n            <>\n              <ModalHeader className=\"flex flex-col gap-1\">\n                <h3 className=\"text-lg font-semibold\">Form Elements</h3>\n                <p className=\"text-sm text-default-500\">\n                  Drag or tap to add elements to your form\n                </p>\n              </ModalHeader>\n              <ModalBody>\n                <FieldSidebar />\n              </ModalBody>\n            </>\n          )}\n        </ModalContent>\n      </Modal>\n\n      {/* Properties Modal for Mobile */}\n      <Modal\n        isOpen={isPropertiesOpen}\n        onOpenChange={onPropertiesOpenChange}\n        size=\"full\"\n        placement=\"bottom\"\n        classNames={{\n          base: \"md:hidden\",\n          backdrop: \"md:hidden\",\n        }}\n      >\n        <ModalContent>\n          {() => (\n            <>\n              <ModalHeader className=\"flex flex-col gap-1\">\n                <h3 className=\"text-lg font-semibold\">Field Properties</h3>\n                <p className=\"text-sm text-default-500\">\n                  {state.selectedFieldId\n                    ? `Editing: ${\n                        currentForm.fields.find(\n                          (f) => f.id === state.selectedFieldId\n                        )?.label || \"Untitled Field\"\n                      }`\n                    : \"Select a field to edit properties\"}\n                </p>\n              </ModalHeader>\n              <ModalBody>\n                <PropertiesPanel />\n              </ModalBody>\n            </>\n          )}\n        </ModalContent>\n      </Modal>\n    </>\n  );\n}\n\nfunction App() {\n  const [mode, setMode] = useState<AppMode>(\"builder\");\n\n  return (\n    <HeroUIProvider>\n      <div className=\"min-h-screen bg-background\">\n        <AppModeSelector mode={mode} setMode={setMode} />\n\n        {mode === \"builder\" && (\n          <FormBuilderProvider>\n            <FormBuilderContent />\n          </FormBuilderProvider>\n        )}\n        {mode === \"renderer\" && <JsonFormRenderer />}\n        {mode === \"announcement\" && <WhatsNewPage />}\n      </div>\n    </HeroUIProvider>\n  );\n}\n\nexport default App;\n","import App from '../App';\n\n// Export the App component as FormBuilderSuite for the library\nexport const FormBuilderSuite = App;\n\nexport default FormBuilderSuite;\n"],"names":["generateUniqueFieldName","field","existingFields","baseName","existingNames","f","counter","uniqueName","initialState","uuidv4","formBuilderReducer","state","action","fieldWithUniqueName","fields","removed","FormBuilderContext","createContext","FormBuilderProvider","children","dispatch","useReducer","actions","form","id","updates","properties","advanced","custom","events","schema","layout","oldIndex","newIndex","enabled","view","settings","meta","jsx","useFormBuilder","context","useContext","createFormField","type","baseField","getDefaultLabel","getCategoryForType","getIconForType","FIELD_TEMPLATES","DRAG_ITEMS","FIELD_CATEGORIES","buildHeroUIClasses","isEditor","borderRadius","getBorderRadiusClass","spacing","getSpacingClasses","responsive","getResponsiveClasses","legacyClasses","newClasses","allCustomClasses","customClasses","parseCustomClasses","userClassNames","ensureTailwindPrecedence","userClass","classes","result","className","marginTop","marginBottom","padding","buildFieldClasses","buildFieldWrapperClasses","SignaturePad","value","onChange","width","height","disabled","canvasRef","useRef","isDrawing","setIsDrawing","useState","isEmpty","setIsEmpty","lastPos","setLastPos","useEffect","canvas","ctx","img","getEventPos","event","rect","scaleX","scaleY","touch","startDrawing","pos","draw","currentPos","stopDrawing","saveSignature","dataURL","clearSignature","jsxs","Button","RotateCcw","Check","FormFieldRenderer","handleChange","newValue","heroUIClasses","wrapperClasses","responsiveIndicators","indicators","FieldWithIndicators","indicator","Smartphone","Tablet","Monitor","wrapWithIndicators","component","commonProps","htmlAttributes","attrs","dataAttributes","key","characterCount","currentLength","maxLength","Input","val","numVal","DateInput","date","TimeInput","time","Fragment","Textarea","Select","keys","selectedValue","option","SelectItem","Autocomplete","AutocompleteItem","radioOrientation","radioComponentAlignment","radioAlignmentClass","radioLabelAlignmentClass","RadioGroup","Radio","orientation","componentAlignment","containerClass","alignmentClass","labelAlignmentClass","Checkbox","checked","currentValues","v","checkboxComponentAlignment","checkboxAlignmentClass","checkboxLabelAlignmentClass","switchComponentAlignment","switchAlignmentClass","Switch","Upload","e","files","maxRating","ratingComponentAlignment","ratingAlignmentClass","_","i","rating","Star","Card","CardBody","Divider","React","SortableFormField","isPreview","selectedFieldId","attributes","listeners","setNodeRef","transform","transition","isDragging","useSortable","style","CSS","isSelected","handleSelect","handleDuplicate","duplicatedField","handleDelete","handleEdit","GripVertical","ButtonGroup","Edit","Copy","Trash2","groupFieldsIntoRows","rows","currentRow","currentRowSpan","index","fieldSpan","getFieldSpan","columnSpan","getGridClassName","span","FormRowRenderer","row","gridClass","combinedClasses","FormRenderer","formConfig","onSubmit","formData","setFormData","errors","setErrors","handleFieldChange","useCallback","fieldId","prev","newErrors","validateForm","rule","handleSubmit","fieldNames","usedNames","fieldName","submissionData","renderField","error","hasError","fieldAttributes","attr","wrapperAlignmentClass","selectedValues","Slider","file","Chip","signature","CardHeader","responsiveClasses","generateFormExportData","now","fieldsWithNames","exportRows","total","exportFields","rowId","fieldMap","requiredFields","fieldsWithValidation","downloadFormAsJson","filename","exportData","jsonString","blob","url","link","FormCanvas","currentForm","previewMode","setSubmissionData","isSubmissionModalOpen","onSubmissionModalOpen","onSubmissionModalOpenChange","useDisclosure","isOver","useDroppable","handleAddField","newField","handlePreviewSubmit","data","Plus","SortableContext","verticalListSortingStrategy","Modal","ModalContent","onClose","ModalHeader","ModalBody","ModalFooter","DraggableField","label","icon","category","addField","isComingSoon","useDraggable","IconComponent","LucideIcons","FieldSidebar","searchTerm","setSearchTerm","filteredItems","item","groupedItems","Accordion","AccordionItem","PropertiesPanel","selectedField","Tabs","Tab","MemoizedBasicProperties","MemoizedLayoutProperties","MemoizedCustomProperties","Settings","BasicProperties","updateField","updateProperties","updateAdvanced","newValidation","errorMessage","patternValue","color","size","radius","variant","MemoizedOptionsEditor","OptionsEditor","newOption","setNewOption","updateOptions","options","addOption","currentOptions","removeOption","updatedOptions","opt","LayoutProperties","Layout","margin","alignment","CustomProperties","newDataKey","setNewDataKey","newDataValue","setNewDataValue","updateCustom","addDataAttribute","currentDataAttributes","removeDataAttribute","newAttributes","currentClassNames","FormBuilderToolbar","importStatus","setImportStatus","isJsonOpen","onJsonOpen","onJsonOpenChange","isImportOpen","onImportOpen","onImportOpenChange","handlePreview","handleExport","handlePreviewJson","validateFormData","handleImport","convertToFormConfig","handleFileImport","reader","importedData","Navbar","NavbarBrand","NavbarContent","NavbarItem","Rows4","Dropdown","DropdownTrigger","MoreVertical","DropdownMenu","DropdownItem","Download","FileJson","JsonPreviewModal","CheckCircle","AlertCircle","isOpen","onOpenChange","copied","setCopied","activeTab","setActiveTab","formExportData","formattedJson","compactJson","handleCopy","handleDownload","a","JsonFormRenderer","jsonInput","setJsonInput","parsedForm","setParsedForm","parseError","setParseError","sampleJson","handleParseJson","parsed","loadSampleJson","copyToClipboard","handleFormSubmit","content","FileText","AnnouncementPage","newFeatures","Target","Zap","Sparkles","improvements","upcomingFeatures","Gift","Rocket","Progress","feature","improvement","Clock","Spacer","DocumentationPage","features","Palette","Shield","CodeIcon","fieldTypes","BookOpen","Snippet","Code","Terminal","Users","Github","Link","ExternalLink","Package","WhatsNewPage","AppModeSelector","mode","setMode","FormBuilderContent","isElementsOpen","onElementsOpen","onElementsOpenChange","isPropertiesOpen","onPropertiesOpen","onPropertiesOpenChange","DndContext","active","over","fieldType","_event","App","HeroUIProvider","FormBuilderSuite"],"mappings":";;;;;;;;;AAMA,SAASA,GAAwBC,GAAkBC,GAAqC;AAEtF,MAAID,EAAM,QAAQA,EAAM,KAAK;AAC3B,WAAOA,EAAM;AAIf,QAAME,IAAWF,EAAM,KAAK,QAAQ,SAAS,GAAG,EAAE,YAAA,GAG5CG,IAAgBF,EAAe,IAAI,CAAAG,MAAKA,EAAE,IAAI,EAAE,OAAO,OAAO;AAEpE,MAAI,CAACD,EAAc,SAASD,CAAQ;AAClC,WAAOA;AAIT,MAAIG,IAAU,GACVC,IAAa,GAAGJ,CAAQ,GAAGG,CAAO;AAEtC,SAAOF,EAAc,SAASG,CAAU;AACtC,IAAAD,KACAC,IAAa,GAAGJ,CAAQ,GAAGG,CAAO;AAGpC,SAAOC;AACT;AA2BA,MAAMC,KAAiC;AAAA,EACrC,aAAa;AAAA,IACX,IAAIC,GAAA;AAAA,IACJ,OAAO;AAAA,IACP,aAAa;AAAA,IACb,QAAQ,CAAA;AAAA,IACR,UAAU;AAAA,MACR,kBAAkB;AAAA,MAClB,0BAA0B;AAAA,MAC1B,aAAa;AAAA,MACb,gBAAgB;AAAA,MAChB,OAAO;AAAA,IAAA;AAAA,EACT;AAAA,EAEF,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,YAAY;AACd;AAEA,SAASC,GAAmBC,GAAyBC,GAA6C;AAChG,UAAQA,EAAO,MAAA;AAAA,IACb,KAAK;AACH,aAAO;AAAA,QACL,GAAGD;AAAA,QACH,aAAaC,EAAO;AAAA,QACpB,iBAAiB;AAAA,MAAA;AAAA,IAGrB,KAAK;AACH,YAAMC,IAAsB;AAAA,QAC1B,GAAGD,EAAO;AAAA,QACV,MAAMZ,GAAwBY,EAAO,SAASD,EAAM,YAAY,MAAM;AAAA,MAAA;AAExE,aAAO;AAAA,QACL,GAAGA;AAAA,QACH,aAAa;AAAA,UACX,GAAGA,EAAM;AAAA,UACT,QAAQ,CAAC,GAAGA,EAAM,YAAY,QAAQE,CAAmB;AAAA,QAAA;AAAA,QAE3D,iBAAiBD,EAAO,QAAQ;AAAA,MAAA;AAAA,IAGpC,KAAK;AACH,aAAO;AAAA,QACL,GAAGD;AAAA,QACH,aAAa;AAAA,UACX,GAAGA,EAAM;AAAA,UACT,QAAQA,EAAM,YAAY,OAAO;AAAA,YAAI,CAAAV,MACnCA,EAAM,OAAOW,EAAO,QAAQ,KACxB;AAAA,cACE,GAAGX;AAAA,cACH,GAAGW,EAAO,QAAQ;AAAA;AAAA,cAElB,YAAYA,EAAO,QAAQ,QAAQ,aAC/B,EAAE,GAAGX,EAAM,YAAY,GAAGW,EAAO,QAAQ,QAAQ,WAAA,IACjDX,EAAM;AAAA,cACV,UAAUW,EAAO,QAAQ,QAAQ,WAC7B,EAAE,GAAGX,EAAM,UAAU,GAAGW,EAAO,QAAQ,QAAQ,SAAA,IAC/CX,EAAM;AAAA,cACV,QAAQW,EAAO,QAAQ,QAAQ,SAC3B,EAAE,GAAGX,EAAM,QAAQ,GAAGW,EAAO,QAAQ,QAAQ,OAAA,IAC7CX,EAAM;AAAA,cACV,QAAQW,EAAO,QAAQ,QAAQ,SAC3B,EAAE,GAAGX,EAAM,QAAQ,GAAGW,EAAO,QAAQ,QAAQ,OAAA,IAC7CX,EAAM;AAAA,cACV,QAAQW,EAAO,QAAQ,QAAQ,SAC3B,EAAE,GAAGX,EAAM,QAAQ,GAAGW,EAAO,QAAQ,QAAQ,OAAA,IAC7CX,EAAM;AAAA,cACV,QAAQW,EAAO,QAAQ,QAAQ,SAC3B,EAAE,GAAGX,EAAM,QAAQ,GAAGW,EAAO,QAAQ,QAAQ,OAAA,IAC7CX,EAAM;AAAA,YAAA,IAEZA;AAAA,UAAA;AAAA,QACN;AAAA,MACF;AAAA,IAGJ,KAAK;AACH,aAAO;AAAA,QACL,GAAGU;AAAA,QACH,aAAa;AAAA,UACX,GAAGA,EAAM;AAAA,UACT,QAAQA,EAAM,YAAY,OAAO;AAAA,YAAI,OACnCV,EAAM,OAAOW,EAAO,QAAQ,KACxB,EAAE,GAAGX,GAAO,YAAY,EAAE,GAAGA,EAAM,YAAY,GAAGW,EAAO,QAAQ,WAAA,MACjEX;AAAA,UAAA;AAAA,QACN;AAAA,MACF;AAAA,IAGJ,KAAK;AACH,aAAO;AAAA,QACL,GAAGU;AAAA,QACH,aAAa;AAAA,UACX,GAAGA,EAAM;AAAA,UACT,QAAQA,EAAM,YAAY,OAAO;AAAA,YAAI,OACnCV,EAAM,OAAOW,EAAO,QAAQ,KACxB,EAAE,GAAGX,GAAO,UAAU,EAAE,GAAGA,EAAM,UAAU,GAAGW,EAAO,QAAQ,SAAA,MAC7DX;AAAA,UAAA;AAAA,QACN;AAAA,MACF;AAAA,IAGJ,KAAK;AACH,aAAO;AAAA,QACL,GAAGU;AAAA,QACH,aAAa;AAAA,UACX,GAAGA,EAAM;AAAA,UACT,QAAQA,EAAM,YAAY,OAAO;AAAA,YAAI,OACnCV,EAAM,OAAOW,EAAO,QAAQ,KACxB,EAAE,GAAGX,GAAO,QAAQ,EAAE,GAAGA,EAAM,QAAQ,GAAGW,EAAO,QAAQ,OAAA,MACzDX;AAAA,UAAA;AAAA,QACN;AAAA,MACF;AAAA,IAGJ,KAAK;AACH,aAAO;AAAA,QACL,GAAGU;AAAA,QACH,aAAa;AAAA,UACX,GAAGA,EAAM;AAAA,UACT,QAAQA,EAAM,YAAY,OAAO;AAAA,YAAI,OACnCV,EAAM,OAAOW,EAAO,QAAQ,KACxB,EAAE,GAAGX,GAAO,QAAQ,EAAE,GAAGA,EAAM,QAAQ,GAAGW,EAAO,QAAQ,OAAA,MACzDX;AAAA,UAAA;AAAA,QACN;AAAA,MACF;AAAA,IAGJ,KAAK;AACH,aAAO;AAAA,QACL,GAAGU;AAAA,QACH,aAAa;AAAA,UACX,GAAGA,EAAM;AAAA,UACT,QAAQA,EAAM,YAAY,OAAO;AAAA,YAAI,OACnCV,EAAM,OAAOW,EAAO,QAAQ,KACxB,EAAE,GAAGX,GAAO,QAAQ,EAAE,GAAGA,EAAM,QAAQ,GAAGW,EAAO,QAAQ,OAAA,MACzDX;AAAA,UAAA;AAAA,QACN;AAAA,MACF;AAAA,IAGJ,KAAK;AACH,aAAO;AAAA,QACL,GAAGU;AAAA,QACH,aAAa;AAAA,UACX,GAAGA,EAAM;AAAA,UACT,QAAQA,EAAM,YAAY,OAAO;AAAA,YAAI,OACnCV,EAAM,OAAOW,EAAO,QAAQ,KACxB,EAAE,GAAGX,GAAO,QAAQ,EAAE,GAAGA,EAAM,QAAQ,GAAGW,EAAO,QAAQ,OAAA,MACzDX;AAAA,UAAA;AAAA,QACN;AAAA,MACF;AAAA,IAGJ,KAAK;AACH,aAAO;AAAA,QACL,GAAGU;AAAA,QACH,aAAa;AAAA,UACX,GAAGA,EAAM;AAAA,UACT,QAAQA,EAAM,YAAY,OAAO,OAAO,CAAAV,MAASA,EAAM,OAAOW,EAAO,OAAO;AAAA,QAAA;AAAA,QAE9E,iBAAiBD,EAAM,oBAAoBC,EAAO,UAAU,OAAOD,EAAM;AAAA,MAAA;AAAA,IAG7E,KAAK;AACH,YAAMG,IAAS,CAAC,GAAGH,EAAM,YAAY,MAAM,GACrC,CAACI,CAAO,IAAID,EAAO,OAAOF,EAAO,QAAQ,UAAU,CAAC;AAC1D,aAAAE,EAAO,OAAOF,EAAO,QAAQ,UAAU,GAAGG,CAAO,GAC1C;AAAA,QACL,GAAGJ;AAAA,QACH,aAAa;AAAA,UACX,GAAGA,EAAM;AAAA,UACT,QAAAG;AAAA,QAAA;AAAA,MACF;AAAA,IAGJ,KAAK;AACH,aAAO;AAAA,QACL,GAAGH;AAAA,QACH,iBAAiBC,EAAO;AAAA,MAAA;AAAA,IAG5B,KAAK;AACH,aAAO;AAAA,QACL,GAAGD;AAAA,QACH,aAAaC,EAAO;AAAA,QACpB,iBAAiBA,EAAO,UAAU,OAAOD,EAAM;AAAA,MAAA;AAAA,IAGnD,KAAK;AACH,aAAO;AAAA,QACL,GAAGA;AAAA,QACH,YAAYC,EAAO;AAAA,MAAA;AAAA,IAGvB,KAAK;AACH,aAAO;AAAA,QACL,GAAGD;AAAA,QACH,aAAa;AAAA,UACX,GAAGA,EAAM;AAAA,UACT,UAAU;AAAA,YACR,GAAGA,EAAM,YAAY;AAAA,YACrB,GAAGC,EAAO;AAAA,UAAA;AAAA,QACZ;AAAA,MACF;AAAA,IAGJ,KAAK;AACH,aAAO;AAAA,QACL,GAAGD;AAAA,QACH,aAAa;AAAA,UACX,GAAGA,EAAM;AAAA,UACT,OAAOC,EAAO,QAAQ,SAASD,EAAM,YAAY;AAAA,UACjD,aAAaC,EAAO,QAAQ,eAAeD,EAAM,YAAY;AAAA,QAAA;AAAA,MAC/D;AAAA,IAGJ;AACE,aAAOA;AAAA,EAAA;AAEb;AAyBA,MAAMK,KAAqBC,GAAkD,MAAS;AAE/E,SAASC,GAAoB,EAAE,UAAAC,KAAqC;AACzE,QAAM,CAACR,GAAOS,CAAQ,IAAIC,GAAWX,IAAoBF,EAAY,GAE/Dc,IAAU;AAAA,IACd,SAAS,CAACC,MAAqBH,EAAS,EAAE,MAAM,YAAY,SAASG,GAAM;AAAA,IAC3E,UAAU,CAACtB,MAAqBmB,EAAS,EAAE,MAAM,aAAa,SAASnB,GAAO;AAAA,IAC9E,aAAa,CAACuB,GAAYC,MACxBL,EAAS,EAAE,MAAM,gBAAgB,SAAS,EAAE,IAAAI,GAAI,SAAAC,EAAA,GAAW;AAAA,IAC7D,uBAAuB,CAACD,GAAYE,MAClCN,EAAS,EAAE,MAAM,2BAA2B,SAAS,EAAE,IAAAI,GAAI,YAAAE,EAAA,GAAc;AAAA,IAC3E,qBAAqB,CAACF,GAAYG,MAChCP,EAAS,EAAE,MAAM,yBAAyB,SAAS,EAAE,IAAAI,GAAI,UAAAG,EAAA,GAAY;AAAA,IACvE,mBAAmB,CAACH,GAAYI,MAC9BR,EAAS,EAAE,MAAM,uBAAuB,SAAS,EAAE,IAAAI,GAAI,QAAAI,EAAA,GAAU;AAAA,IACnE,mBAAmB,CAACJ,GAAYK,MAC9BT,EAAS,EAAE,MAAM,uBAAuB,SAAS,EAAE,IAAAI,GAAI,QAAAK,EAAA,GAAU;AAAA,IACnE,mBAAmB,CAACL,GAAYM,MAC9BV,EAAS,EAAE,MAAM,uBAAuB,SAAS,EAAE,IAAAI,GAAI,QAAAM,EAAA,GAAU;AAAA,IACnE,mBAAmB,CAACN,GAAYO,MAC9BX,EAAS,EAAE,MAAM,uBAAuB,SAAS,EAAE,IAAAI,GAAI,QAAAO,EAAA,GAAU;AAAA,IACnE,aAAa,CAACP,MAAeJ,EAAS,EAAE,MAAM,gBAAgB,SAASI,GAAI;AAAA,IAC3E,eAAe,CAACQ,GAAkBC,MAChCb,EAAS,EAAE,MAAM,kBAAkB,SAAS,EAAE,UAAAY,GAAU,UAAAC,EAAA,GAAY;AAAA,IACtE,aAAa,CAACT,MAAsBJ,EAAS,EAAE,MAAM,gBAAgB,SAASI,GAAI;AAAA,IAClF,gBAAgB,CAACU,MAAqBd,EAAS,EAAE,MAAM,oBAAoB,SAASc,GAAS;AAAA,IAC7F,eAAe,CAACC,MACdf,EAAS,EAAE,MAAM,mBAAmB,SAASe,GAAM;AAAA,IACrD,oBAAoB,CAACC,MACnBhB,EAAS,EAAE,MAAM,wBAAwB,SAASgB,GAAU;AAAA,IAC9D,gBAAgB,CAACC,MACfjB,EAAS,EAAE,MAAM,oBAAoB,SAASiB,EAAA,CAAM;AAAA,EAAA;AAGxD,SACE,gBAAAC,EAACtB,GAAmB,UAAnB,EAA4B,OAAO,EAAE,OAAAL,GAAO,UAAAS,GAAU,SAAAE,KACpD,UAAAH,GACH;AAEJ;AAEO,SAASoB,IAAiB;AAC/B,QAAMC,IAAUC,GAAWzB,EAAkB;AAC7C,MAAIwB,MAAY;AACd,UAAM,IAAI,MAAM,0DAA0D;AAE5E,SAAOA;AACT;AC3VO,SAASE,EAAgBC,GAAgC;AAC9D,QAAMC,IAAY;AAAA,IAChB,IAAInC,GAAA;AAAA,IACJ,MAAAkC;AAAA,IACA,OAAOE,GAAgBF,CAAI;AAAA,IAC3B,UAAU;AAAA,IACV,YAAY,CAAA;AAAA,IACZ,UAAU;AAAA,MACR,QAAQ;AAAA,MACR,WAAW;AAAA,MACX,iBAAiB;AAAA,MACjB,YAAY;AAAA,MACZ,aAAa;AAAA,MACb,UAAU;AAAA,MACV,UAAU;AAAA,MACV,iBAAiB;AAAA,MACjB,uBAAuB;AAAA,IAAA;AAAA,IAEzB,QAAQ;AAAA,MACN,YAAY;AAAA,MACZ,WAAW;AAAA,IAAA;AAAA,IAEb,QAAQ;AAAA,MACN,YAAY,CAAA;AAAA,MACZ,gBAAgB,CAAA;AAAA,IAAC;AAAA,IAEnB,QAAQ,CAAA;AAAA,IACR,QAAQ;AAAA,MACN,eAAe;AAAA,MACf,UAAUG,GAAmBH,CAAI;AAAA,MACjC,UAAUA;AAAA,MACV,MAAMI,GAAeJ,CAAI;AAAA,MACzB,cAAc;AAAA,MACd,aAAa;AAAA,IAAA;AAAA,EACf;AAIF,UAAQA,GAAA;AAAA,IACN,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AACH,aAAO;AAAA,QACL,GAAGC;AAAA,QACH,aAAa,SAASA,EAAU,MAAM,aAAa;AAAA,QACnD,YAAY;AAAA,UACV,GAAGA,EAAU;AAAA,UACb,OAAO;AAAA,UACP,WAAW;AAAA,UACX,cAAc;AAAA,UACd,MAAM;AAAA,UACN,cAAc;AAAA,QAAA;AAAA,MAChB;AAAA,IAGJ,KAAK;AACH,aAAO;AAAA,QACL,GAAGA;AAAA,QACH,aAAa,SAASA,EAAU,MAAM,aAAa;AAAA,QACnD,YAAY;AAAA,UACV,GAAGA,EAAU;AAAA,UACb,OAAO;AAAA,UACP,MAAM;AAAA,UACN,WAAW;AAAA,UACX,cAAc;AAAA,UACd,MAAM;AAAA,UACN,cAAc;AAAA,QAAA;AAAA,MAChB;AAAA,IAGJ,KAAK;AAAA,IACL,KAAK;AACH,aAAO;AAAA,QACL,GAAGA;AAAA,QACH,aAAa;AAAA,QACb,YAAY;AAAA,UACV,GAAGA,EAAU;AAAA,UACb,OAAO;AAAA,QAAA;AAAA,QAET,UAAU;AAAA,UACR,GAAGA,EAAU;AAAA,UACb,WAAW;AAAA,QAAA;AAAA,MACb;AAAA,IAGJ,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AACH,aAAO;AAAA,QACL,GAAGA;AAAA,QACH,SAAS;AAAA,UACP,EAAE,OAAO,YAAY,OAAO,UAAA;AAAA,UAC5B,EAAE,OAAO,YAAY,OAAO,UAAA;AAAA,QAAU;AAAA,QAExC,YAAY;AAAA,UACV,GAAGA,EAAU;AAAA,UACb,OAAO;AAAA,UACP,cAAc;AAAA,UACd,MAAM;AAAA,UACN,cAAc;AAAA,UACd,aAAaD,MAAS,WAAWA,MAAS,aAAa,aAAa;AAAA,UACpE,oBAAoBA,MAAS,WAAWA,MAAS,aAAa,SAAS;AAAA,QAAA;AAAA,QAEzE,UAAU;AAAA,UACR,GAAGC,EAAU;AAAA,UACb,WAAWD,MAAS,iBAAiBA,MAAS,aAAa,UAAmB;AAAA,QAAA;AAAA,MAChF;AAAA,IAGJ,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AACH,aAAO;AAAA,QACL,GAAGC;AAAA,QACH,YAAY;AAAA,UACV,GAAGA,EAAU;AAAA,UACb,OAAO;AAAA,QAAA;AAAA,QAET,UAAU;AAAA,UACR,GAAGA,EAAU;AAAA,UACb,WAAW;AAAA,QAAA;AAAA,MACb;AAAA,IAGJ,KAAK;AACH,aAAO;AAAA,QACL,GAAGA;AAAA,QACH,YAAY;AAAA,UACV,GAAGA,EAAU;AAAA,UACb,OAAO;AAAA,UACP,QAAQ;AAAA,UACR,UAAU;AAAA,QAAA;AAAA,QAEZ,UAAU;AAAA,UACR,GAAGA,EAAU;AAAA,UACb,WAAW;AAAA,QAAA;AAAA,MACb;AAAA,IAGJ,KAAK;AAAA,IACL,KAAK;AACH,aAAO;AAAA,QACL,GAAGA;AAAA,QACH,YAAY;AAAA,UACV,GAAGA,EAAU;AAAA,UACb,OAAO;AAAA,UACP,KAAK;AAAA,UACL,oBAAoBD,MAAS,WAAW,SAAS;AAAA,QAAA;AAAA,QAEnD,UAAU;AAAA,UACR,GAAGC,EAAU;AAAA,UACb,WAAW;AAAA,QAAA;AAAA,MACb;AAAA,IAGJ,KAAK;AACH,aAAO;AAAA,QACL,GAAGA;AAAA,QACH,YAAY;AAAA,UACV,GAAGA,EAAU;AAAA,UACb,OAAO;AAAA,UACP,MAAM;AAAA,UACN,oBAAoB;AAAA,QAAA;AAAA,QAEtB,UAAU;AAAA,UACR,GAAGA,EAAU;AAAA,UACb,WAAW;AAAA,QAAA;AAAA,MACb;AAAA,IAGJ,KAAK;AACH,aAAO;AAAA,QACL,GAAGA;AAAA,QACH,YAAY;AAAA,UACV,GAAGA,EAAU;AAAA,UACb,OAAO;AAAA,QAAA;AAAA,QAET,UAAU;AAAA,UACR,GAAGA,EAAU;AAAA,UACb,WAAW;AAAA,QAAA;AAAA,MACb;AAAA;AAAA,IAIJ,KAAK;AACH,aAAO;AAAA,QACL,GAAGA;AAAA,QACH,OAAO;AAAA,QACP,YAAY;AAAA,UACV,GAAGA,EAAU;AAAA,UACb,OAAO;AAAA,QAAA;AAAA,QAET,UAAU;AAAA,UACR,GAAGA,EAAU;AAAA,UACb,QAAQ;AAAA,QAAA;AAAA,MACV;AAAA,IAGJ,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AACH,aAAO;AAAA,QACL,GAAGA;AAAA,QACH,OAAO;AAAA,QACP,YAAY;AAAA,UACV,GAAGA,EAAU;AAAA,UACb,OAAO;AAAA,QAAA;AAAA,QAET,UAAU;AAAA,UACR,GAAGA,EAAU;AAAA,UACb,QAAQ;AAAA,QAAA;AAAA,MACV;AAAA,IAGJ,KAAK;AACH,aAAO;AAAA,QACL,GAAGA;AAAA,QACH,OAAO;AAAA,QACP,YAAY;AAAA,UACV,GAAGA,EAAU;AAAA,UACb,OAAO;AAAA,QAAA;AAAA,QAET,UAAU;AAAA,UACR,GAAGA,EAAU;AAAA,UACb,QAAQ;AAAA,QAAA;AAAA,MACV;AAAA,IAGJ,KAAK;AACH,aAAO;AAAA,QACL,GAAGA;AAAA,QACH,OAAO;AAAA,QACP,YAAY;AAAA,UACV,GAAGA,EAAU;AAAA,UACb,OAAO;AAAA,UACP,cAAc;AAAA,UACd,MAAM;AAAA,UACN,cAAc;AAAA,UACd,SAAS;AAAA,QAAA;AAAA,QAEX,UAAU;AAAA,UACR,GAAGA,EAAU;AAAA,UACb,QAAQ;AAAA,QAAA;AAAA,MACV;AAAA;AAAA,IAIJ,KAAK;AAAA,IACL,KAAK;AACH,aAAO;AAAA,QACL,GAAGA;AAAA,QACH,OAAO;AAAA,QACP,YAAY;AAAA,UACV,GAAGA,EAAU;AAAA,UACb,OAAO;AAAA,QAAA;AAAA,QAET,UAAU;AAAA,UACR,GAAGA,EAAU;AAAA,UACb,QAAQ;AAAA,QAAA;AAAA,MACV;AAAA,IAGJ,KAAK;AAAA,IACL,KAAK;AACH,aAAO;AAAA,QACL,GAAGA;AAAA,QACH,OAAO;AAAA,QACP,YAAY;AAAA,UACV,GAAGA,EAAU;AAAA,UACb,OAAO;AAAA,QAAA;AAAA,QAET,UAAU;AAAA,UACR,GAAGA,EAAU;AAAA,UACb,QAAQ;AAAA,QAAA;AAAA,MACV;AAAA,IAGJ;AACE,aAAOA;AAAA,EAAA;AAEb;AAEA,SAASC,GAAgBF,GAA6B;AAiEpD,SAhE8C;AAAA;AAAA,IAE5C,MAAM;AAAA,IACN,OAAO;AAAA,IACP,UAAU;AAAA,IACV,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,KAAK;AAAA,IACL,UAAU;AAAA;AAAA,IAGV,QAAQ;AAAA,IACR,aAAa;AAAA,IACb,OAAO;AAAA,IACP,UAAU;AAAA,IACV,QAAQ;AAAA,IACR,cAAc;AAAA,IACd,QAAQ;AAAA;AAAA,IAGR,MAAM;AAAA,IACN,UAAU;AAAA,IACV,MAAM;AAAA,IACN,UAAU;AAAA;AAAA,IAGV,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,WAAW;AAAA,IACX,OAAO;AAAA,IACP,aAAa;AAAA,IACb,iBAAiB;AAAA,IACjB,kBAAkB;AAAA;AAAA,IAGlB,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,WAAW;AAAA,IACX,OAAO;AAAA,IACP,SAAS;AAAA,IACT,iBAAiB;AAAA,IACjB,mBAAmB;AAAA,IACnB,SAAS;AAAA,IACT,WAAW;AAAA,IACX,MAAM;AAAA;AAAA,IAGN,WAAW;AAAA,IACX,MAAM;AAAA,IACN,KAAK;AAAA,IACL,YAAY;AAAA,IACZ,SAAS;AAAA,IACT,WAAW;AAAA,IACX,UAAU;AAAA;AAAA,IAGV,MAAM;AAAA,IACN,UAAU;AAAA;AAAA,IAGV,iBAAiB;AAAA,EAAA,EAGLA,CAAI,KAAK;AACzB;AAEA,SAASG,GAAmBH,GAA6B;AAiEvD,SAhEkD;AAAA;AAAA,IAEhD,MAAM;AAAA,IACN,OAAO;AAAA,IACP,UAAU;AAAA,IACV,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,KAAK;AAAA,IACL,UAAU;AAAA;AAAA,IAGV,QAAQ;AAAA,IACR,aAAa;AAAA,IACb,OAAO;AAAA,IACP,UAAU;AAAA,IACV,QAAQ;AAAA,IACR,cAAc;AAAA,IACd,QAAQ;AAAA;AAAA,IAGR,MAAM;AAAA,IACN,UAAU;AAAA,IACV,MAAM;AAAA,IACN,UAAU;AAAA;AAAA,IAGV,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,WAAW;AAAA,IACX,OAAO;AAAA,IACP,aAAa;AAAA,IACb,iBAAiB;AAAA,IACjB,kBAAkB;AAAA;AAAA,IAGlB,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,WAAW;AAAA,IACX,OAAO;AAAA,IACP,SAAS;AAAA,IACT,iBAAiB;AAAA,IACjB,mBAAmB;AAAA,IACnB,SAAS;AAAA,IACT,WAAW;AAAA,IACX,MAAM;AAAA;AAAA,IAGN,WAAW;AAAA,IACX,MAAM;AAAA,IACN,KAAK;AAAA,IACL,YAAY;AAAA,IACZ,SAAS;AAAA,IACT,WAAW;AAAA,IACX,UAAU;AAAA;AAAA,IAGV,MAAM;AAAA,IACN,UAAU;AAAA;AAAA,IAGV,iBAAiB;AAAA,EAAA,EAGDA,CAAI,KAAK;AAC7B;AAEA,SAASI,GAAeJ,GAA6B;AAiEnD,SAhE6C;AAAA;AAAA,IAE3C,MAAM;AAAA,IACN,OAAO;AAAA,IACP,UAAU;AAAA,IACV,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,KAAK;AAAA,IACL,UAAU;AAAA;AAAA,IAGV,QAAQ;AAAA,IACR,aAAa;AAAA,IACb,OAAO;AAAA,IACP,UAAU;AAAA,IACV,QAAQ;AAAA,IACR,cAAc;AAAA,IACd,QAAQ;AAAA;AAAA,IAGR,MAAM;AAAA,IACN,UAAU;AAAA,IACV,MAAM;AAAA,IACN,UAAU;AAAA;AAAA,IAGV,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,WAAW;AAAA,IACX,OAAO;AAAA,IACP,aAAa;AAAA,IACb,iBAAiB;AAAA,IACjB,kBAAkB;AAAA;AAAA,IAGlB,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,WAAW;AAAA,IACX,OAAO;AAAA,IACP,SAAS;AAAA,IACT,iBAAiB;AAAA,IACjB,mBAAmB;AAAA,IACnB,SAAS;AAAA,IACT,WAAW;AAAA,IACX,MAAM;AAAA;AAAA,IAGN,WAAW;AAAA,IACX,MAAM;AAAA,IACN,KAAK;AAAA,IACL,YAAY;AAAA,IACZ,SAAS;AAAA,IACT,WAAW;AAAA,IACX,UAAU;AAAA;AAAA,IAGV,MAAM;AAAA,IACN,UAAU;AAAA;AAAA,IAGV,iBAAiB;AAAA,EAAA,EAGNA,CAAI,KAAK;AACxB;AAKO,MAAMK,KAAoD;AAAA;AAAA,EAE/D,MAAMN,EAAgB,MAAM;AAAA,EAC5B,OAAOA,EAAgB,OAAO;AAAA,EAC9B,UAAUA,EAAgB,UAAU;AAAA,EACpC,QAAQA,EAAgB,QAAQ;AAAA,EAChC,OAAOA,EAAgB,OAAO;AAAA,EAC9B,KAAKA,EAAgB,KAAK;AAAA,EAC1B,UAAUA,EAAgB,UAAU;AAAA;AAAA,EAGpC,QAAQA,EAAgB,QAAQ;AAAA,EAChC,aAAaA,EAAgB,aAAa;AAAA,EAC1C,OAAOA,EAAgB,OAAO;AAAA,EAC9B,UAAUA,EAAgB,UAAU;AAAA,EACpC,QAAQA,EAAgB,QAAQ;AAAA,EAChC,cAAcA,EAAgB,cAAc;AAAA,EAC5C,QAAQA,EAAgB,QAAQ;AAAA;AAAA,EAGhC,MAAMA,EAAgB,MAAM;AAAA,EAC5B,UAAUA,EAAgB,UAAU;AAAA,EACpC,MAAMA,EAAgB,MAAM;AAAA,EAC5B,UAAUA,EAAgB,UAAU;AAAA;AAAA,EAGpC,MAAMA,EAAgB,MAAM;AAAA,EAC5B,QAAQA,EAAgB,QAAQ;AAAA,EAChC,WAAWA,EAAgB,WAAW;AAAA,EACtC,OAAOA,EAAgB,OAAO;AAAA,EAC9B,aAAaA,EAAgB,WAAW;AAAA,EACxC,iBAAiBA,EAAgB,eAAe;AAAA,EAChD,kBAAkBA,EAAgB,gBAAgB;AAAA;AAAA,EAGlD,QAAQA,EAAgB,QAAQ;AAAA,EAChC,OAAOA,EAAgB,OAAO;AAAA,EAC9B,QAAQA,EAAgB,QAAQ;AAAA,EAChC,WAAWA,EAAgB,WAAW;AAAA,EACtC,OAAOA,EAAgB,OAAO;AAAA,EAC9B,SAASA,EAAgB,SAAS;AAAA,EAClC,iBAAiBA,EAAgB,eAAe;AAAA,EAChD,mBAAmBA,EAAgB,iBAAiB;AAAA,EACpD,SAASA,EAAgB,SAAS;AAAA,EAClC,WAAWA,EAAgB,SAAS;AAAA,EACpC,MAAMA,EAAgB,MAAM;AAAA;AAAA,EAG5B,WAAWA,EAAgB,WAAW;AAAA,EACtC,MAAMA,EAAgB,MAAM;AAAA,EAC5B,KAAKA,EAAgB,KAAK;AAAA,EAC1B,YAAYA,EAAgB,YAAY;AAAA,EACxC,SAASA,EAAgB,SAAS;AAAA,EAClC,WAAWA,EAAgB,WAAW;AAAA,EACtC,UAAUA,EAAgB,UAAU;AAAA;AAAA,EAGpC,MAAMA,EAAgB,MAAM;AAAA,EAC5B,UAAUA,EAAgB,UAAU;AAAA;AAAA,EAGpC,iBAAiBA,EAAgB,eAAe;AAClD,GAKaO,KAAyB;AAAA;AAAA,EAEpC,EAAE,IAAI,QAAQ,MAAM,QAAQ,OAAO,cAAc,MAAM,QAAQ,UAAU,SAAA;AAAA,EACzE,EAAE,IAAI,SAAS,MAAM,SAAS,OAAO,SAAS,MAAM,QAAQ,UAAU,SAAA;AAAA,EACtE,EAAE,IAAI,YAAY,MAAM,YAAY,OAAO,YAAY,MAAM,OAAO,UAAU,SAAA;AAAA,EAC9E,EAAE,IAAI,UAAU,MAAM,UAAU,OAAO,UAAU,MAAM,QAAQ,UAAU,SAAA;AAAA,EACzE,EAAE,IAAI,SAAS,MAAM,SAAS,OAAO,SAAS,MAAM,SAAS,UAAU,SAAA;AAAA,EACvE,EAAE,IAAI,YAAY,MAAM,YAAY,OAAO,aAAa,MAAM,YAAY,UAAU,SAAA;AAAA;AAAA,EAGpF,EAAE,IAAI,UAAU,MAAM,UAAU,OAAO,UAAU,MAAM,eAAe,UAAU,SAAA;AAAA,EAChF;AAAA,IACA,IAAI;AAAA,IACJ,MAAM;AAAA,IACN,OAAO;AAAA,IACP,MAAM;AAAA;AAAA,IACN,UAAU;AAAA;AAAA,EAAA;AAAA,EAEV,EAAE,IAAI,gBAAgB,MAAM,gBAAgB,OAAO,iBAAiB,MAAM,UAAU,UAAU,SAAA;AAAA,EAC9F,EAAE,IAAI,SAAS,MAAM,SAAS,OAAO,eAAe,MAAM,UAAU,UAAU,SAAA;AAAA,EAC9E,EAAE,IAAI,YAAY,MAAM,YAAY,OAAO,kBAAkB,MAAM,UAAU,UAAU,SAAA;AAAA,EACvF,EAAE,IAAI,UAAU,MAAM,UAAU,OAAO,UAAU,MAAM,cAAc,UAAU,SAAA;AAAA;AAAA,EAG/E,EAAE,IAAI,QAAQ,MAAM,QAAQ,OAAO,QAAQ,MAAM,YAAY,UAAU,SAAA;AAAA,EACvE,EAAE,IAAI,QAAQ,MAAM,QAAQ,OAAO,QAAQ,MAAM,SAAS,UAAU,SAAA;AAAA;AAAA,EAGpE,EAAE,IAAI,QAAQ,MAAM,QAAQ,OAAO,eAAe,MAAM,UAAU,UAAU,SAAA;AAAA,EAC5E,EAAE,IAAI,UAAU,MAAM,UAAU,OAAO,UAAU,MAAM,QAAQ,UAAU,SAAA;AAAA;AAAA,EAGzE,EAAE,IAAI,UAAU,MAAM,UAAU,OAAO,UAAU,MAAM,WAAW,UAAU,SAAA;AAAA,EAC5E,EAAE,IAAI,aAAa,MAAM,aAAa,OAAO,aAAa,MAAM,QAAQ,UAAU,SAAA;AAAA,EAClF,EAAE,IAAI,SAAS,MAAM,SAAS,OAAO,SAAS,MAAM,SAAS,UAAU,SAAA;AAAA,EACvE,EAAE,IAAI,UAAU,MAAM,UAAU,OAAO,UAAU,MAAM,gBAAgB,UAAU,SAAA;AAAA;AAAA,EAGjF,EAAE,IAAI,WAAW,MAAM,WAAW,OAAO,WAAW,MAAM,UAAU,UAAU,YAAA;AAAA,EAC9E,EAAE,IAAI,aAAa,MAAM,aAAa,OAAO,aAAa,MAAM,OAAO,UAAU,YAAA;AAAA,EACjF,EAAE,IAAI,QAAQ,MAAM,QAAQ,OAAO,QAAQ,MAAM,UAAU,UAAU,YAAA;AACvE,GAKaC,KAAmB;AAAA,EAC9B;AAAA,IACE,IAAI;AAAA,IACJ,OAAO;AAAA,IACP,aAAa;AAAA,EAAA;AAAA,EAEf;AAAA,IACE,IAAI;AAAA,IACJ,OAAO;AAAA,IACP,aAAa;AAAA,EAAA;AAAA,EAEf;AAAA,IACE,IAAI;AAAA,IACJ,OAAO;AAAA,IACP,aAAa;AAAA,EAAA;AAAA,EAEf;AAAA,IACE,IAAI;AAAA,IACJ,OAAO;AAAA,IACP,aAAa;AAAA,EAAA;AAAA,EAEf;AAAA,IACE,IAAI;AAAA,IACJ,OAAO;AAAA,IACP,aAAa;AAAA,EAAA;AAEjB;AC5nBO,SAASC,GAAmBlD,GAAkBmD,IAAoB,IAAO;AAC9E,QAAMC,IAAeC,GAAqBrD,EAAM,YAAY,YAAY,GAClEsD,IAAUC,GAAkBvD,CAAK,GACjCwD,IAAaC,GAAqBzD,GAAOmD,CAAQ,GAGjDO,IAAgB1D,EAAM,YAAY,iBAAiB,IACnD2D,IAAa3D,EAAM,QAAQ,YAAY,KAAK,GAAG,KAAK,IACpD4D,IAAmB,CAACF,GAAeC,CAAU,EAAE,OAAO,OAAO,EAAE,KAAK,GAAG,GAGvEE,IAAgBC,GAAmBF,CAAgB,GAGnDG,IAAiB/D,EAAM,YAAY,cAAc,CAAA,GAGjDgE,IAA2B,CAACC,MAC3BA,KAEDA,EAAU,SAAS,OAAO,KAAKA,EAAU,SAAS,KAAK,KAAKA,EAAU,SAAS,SAAS,GACnFA,KAHc;AAwEzB,SAhEe;AAAA;AAAA,IAEb,MAAM;AAAA,MACJX,EAAQ;AAAA,MACRA,EAAQ;AAAA,MACPH,IAAmC,KAAxBK,EAAW;AAAA;AAAA,MACvBK,EAAc;AAAA,MACdE,EAAe,QAAQ;AAAA,IAAA,EACvB,OAAO,OAAO,EAAE,KAAK,GAAG;AAAA;AAAA,IAG1B,OAAO;AAAA,MACL;AAAA;AAAA,MACAF,EAAc;AAAA,MACdG,EAAyBD,EAAe,SAAS,EAAE;AAAA,IAAA,EACnD,OAAO,OAAO,EAAE,KAAK,GAAG;AAAA;AAAA,IAG1B,cAAc;AAAA,MACZX;AAAA,MACAS,EAAc;AAAA,MACdG,EAAyBD,EAAe,gBAAgB,EAAE;AAAA,IAAA,EAC1D,OAAO,OAAO,EAAE,KAAK,GAAG;AAAA;AAAA,IAG1B,cAAc;AAAA,MACZC,EAAyBD,EAAe,gBAAgB,EAAE;AAAA,IAAA,EAC1D,OAAO,OAAO,EAAE,KAAK,GAAG;AAAA;AAAA,IAG1B,aAAa;AAAA,MACXC,EAAyBD,EAAe,eAAe,EAAE;AAAA,IAAA,EACzD,OAAO,OAAO,EAAE,KAAK,GAAG;AAAA;AAAA,IAG1B,OAAO;AAAA,MACL/D,EAAM,YAAY,aAAa;AAAA,MAC/B6D,EAAc;AAAA,MACdG,EAAyBD,EAAe,SAAS,EAAE;AAAA,IAAA,EACnD,OAAO,OAAO,EAAE,KAAK,GAAG;AAAA;AAAA,IAG1B,aAAa;AAAA,MACXC,EAAyBD,EAAe,eAAe,EAAE;AAAA,IAAA,EACzD,OAAO,OAAO,EAAE,KAAK,GAAG;AAAA;AAAA,IAG1B,eAAe;AAAA,MACbC,EAAyBD,EAAe,iBAAiB,EAAE;AAAA,IAAA,EAC3D,OAAO,OAAO,EAAE,KAAK,GAAG;AAAA;AAAA,IAG1B,aAAa;AAAA,MACX;AAAA;AAAA,MACAF,EAAc;AAAA,MACdG,EAAyBD,EAAe,eAAe,EAAE;AAAA,IAAA,EACzD,OAAO,OAAO,EAAE,KAAK,GAAG;AAAA;AAAA,IAG1B,cAAc;AAAA,MACZC,EAAyBD,EAAe,gBAAgB,EAAE;AAAA,IAAA,EAC1D,OAAO,OAAO,EAAE,KAAK,GAAG;AAAA,EAAA;AAI9B;AAGA,SAASD,GAAmBD,GAAuB;AACjD,MAAI,CAACA,EAAc;AACjB,WAAO;AAAA,MACL,SAAS;AAAA,MACT,cAAc;AAAA,MACd,OAAO;AAAA,MACP,OAAO;AAAA,MACP,aAAa;AAAA,IAAA;AAIjB,QAAMK,IAAUL,EAAc,KAAA,EAAO,MAAM,KAAK,GAC1CM,IAAS;AAAA,IACb,SAAS,CAAA;AAAA,IACT,cAAc,CAAA;AAAA,IACd,OAAO,CAAA;AAAA,IACP,OAAO,CAAA;AAAA,IACP,aAAa,CAAA;AAAA,EAAC;AAGhB,SAAAD,EAAQ,QAAQ,CAAAE,MAAa;AAE3B,IAAIA,EAAU,MAAM,mCAAmC,IACrDD,EAAO,aAAa,KAAKC,CAAS,IAG3BA,EAAU,MAAM,6CAA6C,IACpED,EAAO,MAAM,KAAKC,CAAS,IAGpBA,EAAU,MAAM,8FAA8F,IACrHD,EAAO,QAAQ,KAAKC,CAAS,IAI7BD,EAAO,aAAa,KAAKC,CAAS;AAAA,EAEtC,CAAC,GAEM;AAAA,IACL,SAASD,EAAO,QAAQ,KAAK,GAAG;AAAA,IAChC,cAAcA,EAAO,aAAa,KAAK,GAAG;AAAA,IAC1C,OAAOA,EAAO,MAAM,KAAK,GAAG;AAAA,IAC5B,OAAOA,EAAO,MAAM,KAAK,GAAG;AAAA,IAC5B,aAAaA,EAAO,YAAY,KAAK,GAAG;AAAA,EAAA;AAE5C;AAEA,SAASd,GAAqBD,GAA+B;AAC3D,UAAQA,GAAA;AAAA,IACN,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,aAAO;AAAA,IACT;AACE,aAAO;AAAA,EAAA;AAEb;AAEA,SAASG,GAAkBvD,GAAkB;AAC3C,QAAMqE,IAAYrE,EAAM,YAAY,WAC9BsE,IAAetE,EAAM,YAAY,cACjCuE,IAAUvE,EAAM,YAAY;AAElC,SAAO;AAAA,IACL,QAAQ;AAAA,MACNqE,KAAa;AAAA,MACbC,KAAgB;AAAA,IAAA,EAChB,OAAO,OAAO,EAAE,KAAK,GAAG;AAAA,IAE1B,SAASC,KAAW;AAAA,EAAA;AAExB;AAEA,SAASd,GAAqBzD,GAAkBmD,IAAoB,IAAO;AACzE,QAAMe,IAAoB,CAAA;AAG1B,SAAKf,MACCnD,EAAM,YAAY,gBACpBkE,EAAQ,KAAK,iBAAiB,GAE5BlE,EAAM,YAAY,gBACpBkE,EAAQ,KAAK,oBAAoB,GAE/BlE,EAAM,YAAY,iBACpBkE,EAAQ,KAAK,WAAW,IAIrB;AAAA,IACL,YAAYA,EAAQ,KAAK,GAAG;AAAA,EAAA;AAEhC;AAGO,SAASM,GAAkBxE,GAA0B;AAE1D,SADsBkD,GAAmBlD,CAAK,EACzB;AACvB;AAEO,SAASyE,GAAyBzE,GAAkBmD,IAAoB,IAAe;AAC5F,QAAMe,IAAoB,CAAA;AAG1B,EAAIlE,EAAM,QAAQ,aAChBkE,EAAQ,KAAKlE,EAAM,OAAO,SAAS;AAIrC,QAAMwD,IAAaC,GAAqBzD,GAAOmD,CAAQ;AACvD,SAAIK,EAAW,cACbU,EAAQ,KAAKV,EAAW,UAAU,GAG7BU,EAAQ,KAAK,GAAG;AACzB;AC9MO,SAASQ,GAAa;AAAA,EAC3B,OAAAC;AAAA,EACA,UAAAC;AAAA,EACA,OAAAC,IAAQ;AAAA,EACR,QAAAC,IAAS;AAAA,EACT,UAAAC,IAAW;AAAA,EACX,WAAAX,IAAY;AACd,GAAsB;AACpB,QAAMY,IAAYC,GAA0B,IAAI,GAC1C,CAACC,GAAWC,CAAY,IAAIC,EAAS,EAAK,GAC1C,CAACC,GAASC,CAAU,IAAIF,EAAS,EAAI,GACrC,CAACG,GAASC,CAAU,IAAIJ,EAAS,EAAE,GAAG,GAAG,GAAG,GAAG;AAErD,EAAAK,GAAU,MAAM;AACd,UAAMC,IAASV,EAAU;AACzB,QAAI,CAACU,EAAQ;AAEb,UAAMC,IAAMD,EAAO,WAAW,IAAI;AAClC,QAAKC,MAGLD,EAAO,QAAQb,GACfa,EAAO,SAASZ,GAGhBa,EAAI,UAAU,SACdA,EAAI,WAAW,SACfA,EAAI,cAAc,WAClBA,EAAI,YAAY,GAGhBA,EAAI,YAAY,WAChBA,EAAI,SAAS,GAAG,GAAGd,GAAOC,CAAM,GAG5BH,KAASA,EAAM,WAAW,YAAY,IAAG;AAC3C,YAAMiB,IAAM,IAAI,MAAA;AAChB,MAAAA,EAAI,SAAS,MAAM;AACjB,QAAAD,EAAI,UAAU,GAAG,GAAGd,GAAOC,CAAM,GACjCa,EAAI,YAAY,WAChBA,EAAI,SAAS,GAAG,GAAGd,GAAOC,CAAM,GAChCa,EAAI,UAAUC,GAAK,GAAG,GAAGf,GAAOC,CAAM,GACtCQ,EAAW,EAAK;AAAA,MAClB,GACAM,EAAI,MAAMjB;AAAA,IACZ;AAAA,EACF,GAAG,CAACE,GAAOC,GAAQH,CAAK,CAAC;AAEzB,QAAMkB,IAAc,CAACC,MAAyE;AAC5F,UAAMJ,IAASV,EAAU;AACzB,QAAI,CAACU,EAAQ,QAAO,EAAE,GAAG,GAAG,GAAG,EAAA;AAE/B,UAAMK,IAAOL,EAAO,sBAAA,GACdM,IAASN,EAAO,QAAQK,EAAK,OAC7BE,IAASP,EAAO,SAASK,EAAK;AAEpC,QAAI,aAAaD,GAAO;AACtB,YAAMI,IAAQJ,EAAM,QAAQ,CAAC;AAC7B,aAAO;AAAA,QACL,IAAII,EAAM,UAAUH,EAAK,QAAQC;AAAA,QACjC,IAAIE,EAAM,UAAUH,EAAK,OAAOE;AAAA,MAAA;AAAA,IAEpC;AACE,aAAO;AAAA,QACL,IAAIH,EAAM,UAAUC,EAAK,QAAQC;AAAA,QACjC,IAAIF,EAAM,UAAUC,EAAK,OAAOE;AAAA,MAAA;AAAA,EAGtC,GAEME,IAAe,CAACL,MAA+C;AACnE,QAAIf,EAAU;AAEd,IAAAe,EAAM,eAAA;AACN,UAAMM,IAAMP,EAAYC,CAAK;AAC7B,IAAAX,EAAa,EAAI,GACjBK,EAAWY,CAAG,GACdd,EAAW,EAAK;AAAA,EAClB,GAEMe,IAAO,CAACP,MAA+C;AAC3D,QAAI,CAACZ,KAAaH,EAAU;AAE5B,IAAAe,EAAM,eAAA;AACN,UAAMJ,IAASV,EAAU,SACnBW,IAAMD,GAAQ,WAAW,IAAI;AACnC,QAAI,CAACA,KAAU,CAACC,EAAK;AAErB,UAAMW,IAAaT,EAAYC,CAAK;AAEpC,IAAAH,EAAI,UAAA,GACJA,EAAI,OAAOJ,EAAQ,GAAGA,EAAQ,CAAC,GAC/BI,EAAI,OAAOW,EAAW,GAAGA,EAAW,CAAC,GACrCX,EAAI,OAAA,GAEJH,EAAWc,CAAU;AAAA,EACvB,GAEMC,IAAc,MAAM;AACxB,IAAKrB,MACLC,EAAa,EAAK,GAClBqB,EAAA;AAAA,EACF,GAEMA,IAAgB,MAAM;AAC1B,UAAMd,IAASV,EAAU;AACzB,QAAI,CAACU,EAAQ;AAEb,UAAMe,IAAUf,EAAO,UAAU,WAAW;AAC5C,IAAAd,IAAW6B,CAAO;AAAA,EACpB,GAEMC,IAAiB,MAAM;AAC3B,UAAMhB,IAASV,EAAU,SACnBW,IAAMD,GAAQ,WAAW,IAAI;AACnC,IAAI,CAACA,KAAU,CAACC,MAEhBA,EAAI,YAAY,WAChBA,EAAI,SAAS,GAAG,GAAGd,GAAOC,CAAM,GAChCQ,EAAW,EAAI,GACfV,IAAW,EAAE;AAAA,EACf;AAEA,SACE,gBAAA+B,EAAC,OAAA,EAAI,WAAW,iBAAiBvC,CAAS,IACxC,UAAA;AAAA,IAAA,gBAAA/B,EAAC,OAAA,EAAI,WAAU,mEACb,UAAA,gBAAAA;AAAA,MAAC;AAAA,MAAA;AAAA,QACC,KAAK2C;AAAA,QACL,WAAU;AAAA,QACV,OAAO,EAAE,OAAO,QAAQ,QAAQ,QAAQ,UAAU,GAAGH,CAAK,KAAA;AAAA,QAC1D,aAAasB;AAAA,QACb,aAAaE;AAAA,QACb,WAAWE;AAAA,QACX,cAAcA;AAAA,QACd,cAAcJ;AAAA,QACd,aAAaE;AAAA,QACb,YAAYE;AAAA,MAAA;AAAA,IAAA,GAEhB;AAAA,IAEA,gBAAAI,EAAC,OAAA,EAAI,WAAU,0CACb,UAAA;AAAA,MAAA,gBAAAtE,EAAC,OAAA,EAAI,WAAU,4BACZ,UAAAgD,IAAU,eAAe,sBAC5B;AAAA,MACA,gBAAAsB,EAAC,OAAA,EAAI,WAAU,cACb,UAAA;AAAA,QAAA,gBAAAtE;AAAA,UAACuE;AAAA,UAAA;AAAA,YACC,MAAK;AAAA,YACL,SAAQ;AAAA,YACR,OAAM;AAAA,YACN,cAAc,gBAAAvE,EAACwE,IAAA,EAAU,MAAM,GAAA,CAAI;AAAA,YACnC,SAASH;AAAA,YACT,YAAY3B,KAAYM;AAAA,YACzB,UAAA;AAAA,UAAA;AAAA,QAAA;AAAA,QAGA,CAACA,KACA,gBAAAhD;AAAA,UAACuE;AAAA,UAAA;AAAA,YACC,MAAK;AAAA,YACL,OAAM;AAAA,YACN,SAAQ;AAAA,YACR,cAAc,gBAAAvE,EAACyE,IAAA,EAAM,MAAM,GAAA,CAAI;AAAA,YAC/B,SAASN;AAAA,YACT,YAAYzB;AAAA,YACb,UAAA;AAAA,UAAA;AAAA,QAAA;AAAA,MAED,EAAA,CAEJ;AAAA,IAAA,EAAA,CACF;AAAA,EAAA,GACF;AAEJ;ACzJO,SAASgC,GAAkB;AAAA,EAChC,OAAA/G;AAAA,EACA,OAAA2E;AAAA,EACA,UAAAC;AACF,GAA2B;AACzB,QAAMoC,IAAe,CAACC,MAAkB;AACtC,IAAIrC,KACFA,EAASqC,CAAQ;AAAA,EAErB;AAGA,MAAIjH,EAAM,UAAU,UAAUA,EAAM,YAAY;AAC9C,WAAO;AAIT,QAAMkH,IAAgBhE,GAAmBlD,GAAO,EAAI,GAG9CmH,IAAiBD,EAAc,MAiB/BE,KAd0B,MAAM;AACpC,UAAMC,IAAa,CAAA;AACnB,WAAIrH,EAAM,YAAY,gBACpBqH,EAAW,KAAK,kBAAkB,GAEhCrH,EAAM,YAAY,gBACpBqH,EAAW,KAAK,kBAAkB,GAEhCrH,EAAM,YAAY,iBACpBqH,EAAW,KAAK,mBAAmB,GAE9BA;AAAA,EACT,GAE6B,GAGvBC,IAAsB,CAAC,EAAE,UAAApG,QACzBkG,EAAqB,WAAW,2BACxB,UAAAlG,GAAS,IAInB,gBAAAyF,EAAC,OAAA,EAAI,WAAU,YACZ,UAAA;AAAA,IAAAzF;AAAA,sBACA,OAAA,EAAI,WAAU,mEACZ,UAAAkG,EAAqB,IAAI,CAACG,MACzB,gBAAAlF;AAAA,MAAC;AAAA,MAAA;AAAA,QAEC,WAAU;AAAA,QACV,OAAOkF;AAAA,QAEN,UAAAA,EAAU,SAAS,QAAQ,sBAAKC,IAAA,EAAW,MAAM,IAAI,IAAKD,EAAU,SAAS,QAAQ,sBAAKE,IAAA,EAAO,MAAM,IAAI,IAAK,gBAAApF,EAACqF,IAAA,EAAQ,MAAM,GAAA,CAAI;AAAA,MAAA;AAAA,MAJ/HH;AAAA,IAAA,CAMR,EAAA,CACH;AAAA,EAAA,GACF,GAKEI,IAAqB,CAACC,MAC1B,gBAAAvF,EAACiF,KAAqB,UAAAM,GAAU,GAI5BC,IAAc;AAAA,IAClB,OAAO7H,EAAM;AAAA,IACb,aAAaA,EAAM;AAAA,IACnB,YAAYA,EAAM;AAAA,IAClB,aAAaA,EAAM,YAAY;AAAA,IAC/B,YAAYA,EAAM,UAAU,YAAYA,EAAM,YAAY;AAAA,IAC1D,YAAYA,EAAM,UAAU,YAAYA,EAAM,YAAY;AAAA,IAC1D,MAAMA,EAAM,YAAY;AAAA,IACxB,OAAOA,EAAM,YAAY;AAAA,IACzB,SAASA,EAAM,YAAY;AAAA,IAC3B,QAAQA,EAAM,YAAY;AAAA,IAC1B,YAAY;AAAA,MACV,MAAMkH,EAAc;AAAA,MACpB,OAAOA,EAAc;AAAA,MACrB,cAAcA,EAAc;AAAA,MAC5B,cAAcA,EAAc;AAAA,MAC5B,aAAaA,EAAc;AAAA,MAC3B,OAAOA,EAAc;AAAA,MACrB,aAAaA,EAAc;AAAA,MAC3B,eAAeA,EAAc;AAAA,MAC7B,aAAaA,EAAc;AAAA,MAC3B,cAAcA,EAAc;AAAA,IAAA;AAAA,EAC9B,GA0CIY,KAtCsB,MAAM;AAChC,UAAMC,IAA6B,CAAA,GAG7BC,IAAiBhI,EAAM,QAAQ,kBAAkB,CAAA;AACvD,kBAAO,QAAQgI,CAAc,EAAE,QAAQ,CAAC,CAACC,GAAKtD,CAAK,MAAM;AACvD,MAAAoD,EAAM,QAAQE,CAAG,EAAE,IAAItD;AAAAA,IACzB,CAAC,GAGG3E,EAAM,QAAQ,SAChB+H,EAAM,OAAU/H,EAAM,OAAO,OAG3BA,EAAM,QAAQ,aAAa,WAC7B+H,EAAM,WAAc/H,EAAM,OAAO,WAG/BA,EAAM,YAAY,cACpB+H,EAAM,YAAY,IAAI/H,EAAM,WAAW,YAIrCA,EAAM,SAAS,aACbA,EAAM,YAAY,QAAQ,WAC5B+H,EAAM,MAAS/H,EAAM,WAAW,MAE9BA,EAAM,YAAY,QAAQ,WAC5B+H,EAAM,MAAS/H,EAAM,WAAW,MAE9BA,EAAM,YAAY,SAAS,WAC7B+H,EAAM,OAAU/H,EAAM,WAAW,QAI9B+H;AAAA,EACT,GAEuB,GAejBG,KAZoB,MAAM;AAC9B,QACElI,EAAM,YAAY,uBACjBA,EAAM,SAAS,UAAUA,EAAM,SAAS,aACzC;AACA,YAAMmI,IAAgBxD,IAAQA,EAAM,SAAS,GACvCyD,IAAYpI,EAAM,YAAY;AACpC,aAAOoI,IAAY,GAAGD,CAAa,IAAIC,CAAS,KAAK,GAAGD,CAAa;AAAA,IACvE;AACA,WAAO;AAAA,EACT,GAEuB;AAEvB,UAAQnI,EAAM,MAAA;AAAA,IACZ,KAAK;AACH,+BACGsH,GAAA,EACC,UAAA;AAAA,QAAA,gBAAAjF;AAAA,UAACgG;AAAA,UAAA;AAAA,YAEE,GAAGR;AAAA,YACH,GAAGC;AAAA,YACJ,MAAK;AAAA,YACL,OAAOnD,KAAS;AAAA,YAChB,eAAe,CAAC2D,MAAQtB,EAAasB,CAAG;AAAA,YACxC,WAAWtI,EAAM,YAAY;AAAA,UAAA;AAAA,UANxB,QAAQA,EAAM,EAAE;AAAA,QAAA;AAAA,QAQtBkI,KACC,gBAAA7F,EAAC,OAAA,EAAI,WAAU,4CACZ,UAAA6F,EAAA,CACH;AAAA,MAAA,GAEJ;AAAA,IAGJ,KAAK;AACH,+BACGZ,GAAA,EACC,UAAA,gBAAAjF;AAAA,QAACgG;AAAA,QAAA;AAAA,UAEE,GAAGR;AAAA,UACH,GAAGC;AAAA,UACJ,MAAK;AAAA,UACL,OAAOnD,KAAS;AAAA,UAChB,eAAe,CAAC2D,MAAQtB,EAAasB,CAAG;AAAA,QAAA;AAAA,QALnC,SAAStI,EAAM,EAAE;AAAA,MAAA,GAO1B;AAAA,IAGJ,KAAK;AACH,+BACGsH,GAAA,EACC,UAAA,gBAAAjF;AAAA,QAACgG;AAAA,QAAA;AAAA,UAEE,GAAGR;AAAA,UACH,GAAGC;AAAA,UACJ,MAAK;AAAA,UACL,OAAOnD,KAAS;AAAA,UAChB,eAAe,CAAC2D,MAAQtB,EAAasB,CAAG;AAAA,QAAA;AAAA,QALnC,YAAYtI,EAAM,EAAE;AAAA,MAAA,GAO7B;AAAA,IAGJ,KAAK;AACH,aAAO2H;AAAA,QACL,gBAAAtF;AAAA,UAACgG;AAAA,UAAA;AAAA,YAEE,GAAGR;AAAA,YACH,GAAGC;AAAA,YACJ,MAAK;AAAA,YACL,OAAOnD,KAAS;AAAA,YAChB,eAAe,CAAC2D,MAAQ;AAEtB,oBAAMC,IAAS,WAAWD,CAAG;AAC7B,cAAI,CAAC,MAAMC,CAAM,MACXvI,EAAM,YAAY,QAAQ,UAAauI,IAASvI,EAAM,WAAW,OAGjEA,EAAM,YAAY,QAAQ,UAAauI,IAASvI,EAAM,WAAW,QAIvEgH,EAAasB,CAAG;AAAA,YAClB;AAAA,UAAA;AAAA,UAjBK,UAAUtI,EAAM,EAAE;AAAA,QAAA;AAAA,MAkBzB;AAAA,IAGJ,KAAK;AACH,aAAO2H;AAAA,QACL,gBAAAtF;AAAA,UAACmG;AAAA,UAAA;AAAA,YAEE,GAAGX;AAAA,YACJ,OAAOlD,KAAS;AAAA,YAChB,UAAU,CAAC8D,MAAS;AAClB,cAEEzB,EAFEyB,IAEWA,EAAK,aAEL,EAFe;AAAA,YAIhC;AAAA,UAAA;AAAA,UAVK,QAAQzI,EAAM,EAAE;AAAA,QAAA;AAAA,MAWvB;AAAA,IAGJ,KAAK;AACH,aACE,gBAAAqC;AAAA,QAACmG;AAAA,QAAA;AAAA,UAEE,GAAGX;AAAA,UACJ,aAAY;AAAA,UACZ,OAAOlD,KAAS;AAAA,UAChB,UAAU,CAAC8D,MAAS;AAClB,YAEEzB,EAFEyB,IAEWA,EAAK,aAEL,EAFe;AAAA,UAIhC;AAAA,QAAA;AAAA,QAXK,YAAYzI,EAAM,EAAE;AAAA,MAAA;AAAA,IAe/B,KAAK;AACH,aACE,gBAAAqC;AAAA,QAACqG;AAAA,QAAA;AAAA,UAEE,GAAGb;AAAA,UACJ,OAAOlD,KAAS;AAAA,UAChB,UAAU,CAACgE,MAAS;AAClB,YAEE3B,EAFE2B,IAEWA,EAAK,aAEL,EAFe;AAAA,UAIhC;AAAA,QAAA;AAAA,QAVK,QAAQ3I,EAAM,EAAE;AAAA,MAAA;AAAA,IAc3B,KAAK;AACH,aAAO2H;AAAA,QACL,gBAAAhB,EAAAiC,GAAA,EACE,UAAA;AAAA,UAAA,gBAAAvG;AAAA,YAACwG;AAAA,YAAA;AAAA,cAEE,GAAGhB;AAAA,cACH,GAAGC;AAAA,cACJ,OAAOnD,KAAS;AAAA,cAChB,eAAe,CAAC2D,MAAQtB,EAAasB,CAAG;AAAA,cACxC,MAAMtI,EAAM,YAAY,QAAQ;AAAA,cAChC,WAAWA,EAAM,YAAY;AAAA,YAAA;AAAA,YANxB,YAAYA,EAAM,EAAE;AAAA,UAAA;AAAA,UAQ1BkI,KACC,gBAAA7F,EAAC,OAAA,EAAI,WAAU,4CACZ,UAAA6F,EAAA,CACH;AAAA,QAAA,EAAA,CAEJ;AAAA,MAAA;AAAA,IAGJ,KAAK;AACH,aAAOP;AAAA,QACL,gBAAAtF;AAAA,UAACyG;AAAA,UAAA;AAAA,YACE,GAAGjB;AAAA,YACH,GAAGC;AAAA,YACJ,cAAcnD,IAAQ,CAACA,CAAK,IAAI,CAAA;AAAA,YAChC,mBAAmB,CAACoE,MAAS;AAC3B,oBAAMC,IAAgB,MAAM,KAAKD,CAAI,EAAE,CAAC;AACxC,cAAA/B,EAAagC,CAAa;AAAA,YAC5B;AAAA,YAEC,UAAAhJ,EAAM,SAAS,IAAI,CAACiJ,MACnB,gBAAA5G,EAAC6G,GAAA,EAA+B,UAAAD,EAAO,MAAA,GAAtBA,EAAO,KAAqB,CAC9C,KAAK,CAAA;AAAA,UAAC;AAAA,QAAA;AAAA,MACT;AAAA,IAGJ,KAAK;AACH,aAAOtB;AAAA,QACL,gBAAAtF;AAAA,UAAC8G;AAAA,UAAA;AAAA,YACE,GAAGtB;AAAA,YACH,GAAGC;AAAA,YACJ,aAAanD,KAAS;AAAA,YACtB,mBAAmB,CAACsD,MAAQ;AAC1B,cAAAjB,EAAaiB,CAAG;AAAA,YAClB;AAAA,YACA,mBAAiB;AAAA,YAEhB,UAAAjI,EAAM,SAAS,IAAI,CAACiJ,MACnB,gBAAA5G,EAAC+G,IAAA,EAAqC,UAAAH,EAAO,MAAA,GAAtBA,EAAO,KAAqB,CACpD,KAAK,CAAA;AAAA,UAAC;AAAA,QAAA;AAAA,MACT;AAAA,IAGJ,KAAK;AACH,aACE,gBAAA5G;AAAA,QAACyG;AAAA,QAAA;AAAA,UACE,GAAGjB;AAAA,UACJ,eAAc;AAAA,UACd,cAAclD,KAAS,CAAA;AAAA,UACvB,mBAAmB,CAACoE,MAAS;AAC3B,YAAA/B,EAAa,MAAM,KAAK+B,CAAI,CAAC;AAAA,UAC/B;AAAA,UAEC,UAAA/I,EAAM,SAAS,IAAI,CAACiJ,MACnB,gBAAA5G,EAAC6G,GAAA,EAA+B,UAAAD,EAAO,MAAA,GAAtBA,EAAO,KAAqB,CAC9C,KAAK,CAAA;AAAA,QAAC;AAAA,MAAA;AAAA,IAIb,KAAK;AACH,YAAMI,IAAmBrJ,EAAM,YAAY,eAAe,YACpDsJ,IAA0BtJ,EAAM,YAAY,sBAAsB,QAGlEuJ,IAAsBF,MAAqB,eAC5CC,MAA4B,WAAW,mBACvCA,MAA4B,UAAU,gBAAgB,kBACtDA,MAA4B,WAAW,iBACvCA,MAA4B,UAAU,cAAc,eAEnDE,IAA2BF,MAA4B,WAAW,gBACvCA,MAA4B,UAAU,eAAe;AAOtF,aACE,gBAAAjH,EAAC,OAAA,EAAI,WAL4BiH,MAA4B,WAAW,+BACxCA,MAA4B,UAAU,4BACtC,6BAI9B,UAAA,gBAAAjH;AAAA,QAACoH;AAAA,QAAA;AAAA,UACC,OAAOzJ,EAAM;AAAA,UACb,aAAaA,EAAM,YAAY;AAAA,UAC/B,YAAYA,EAAM;AAAA,UAClB,OAAO2E,KAAS;AAAA,UAChB,eAAeqC;AAAA,UACf,MAAMhH,EAAM,YAAY;AAAA,UACxB,OAAOA,EAAM,YAAY;AAAA,UACzB,YAAYA,EAAM,UAAU,YAAYA,EAAM,YAAY;AAAA,UAC1D,YAAYA,EAAM,UAAU,YAAYA,EAAM,YAAY;AAAA,UAC1D,aAAaqJ;AAAA,UACb,YAAY;AAAA,YACV,MAAMnC,EAAc;AAAA,YACpB,OAAO,GAAGA,EAAc,KAAK,IAAIsC,CAAwB;AAAA,YACzD,SAAS,GAAGtC,EAAc,YAAY,IAAIqC,CAAmB;AAAA,YAC/D,aAAa,GAAGrC,EAAc,WAAW,IAAIsC,CAAwB;AAAA,UAAA;AAAA,UAGtE,YAAM,SAAS,IAAI,CAACP,wBAClBS,IAAA,EAAyB,OAAOT,EAAO,OACrC,YAAO,MAAA,GADEA,EAAO,KAEnB,CACD,KAAK,CAAA;AAAA,QAAC;AAAA,MAAA,GAET;AAAA,IAGJ,KAAK;AACH,UAAIjJ,EAAM,WAAWA,EAAM,QAAQ,SAAS,GAAG;AAE7C,cAAM2J,IAAc3J,EAAM,YAAY,eAAe,YAC/C4J,IAAqB5J,EAAM,YAAY,sBAAsB,QAG7D6J,IAAiBF,MAAgB,eACnC,yBACA,2BAGEG,IAAiBH,MAAgB,eAClCC,MAAuB,WAAW,mBAClCA,MAAuB,UAAU,gBAAgB,kBACjDA,MAAuB,WAAW,iBAClCA,MAAuB,UAAU,cAAc,eAE9CG,IAAsBH,MAAuB,WAAW,gBACnCA,MAAuB,UAAU,eAAe;AAO3E,iCACG,OAAA,EAAI,WAAW,aAAazC,CAAc,IALfyC,MAAuB,WAAW,+BACnCA,MAAuB,UAAU,4BACjC,2BAGyC,IAClE,UAAA;AAAA,UAAA,gBAAAjD,EAAC,SAAA,EAAM,WAAW,uBAAuBoD,CAAmB,IACzD,UAAA;AAAA,YAAA/J,EAAM;AAAA,YACNA,EAAM,YAAY,gBAAAqC,EAAC,QAAA,EAAK,WAAU,eAAc,UAAA,IAAA,CAAC;AAAA,UAAA,GACpD;AAAA,UACCrC,EAAM,YAAY,eACjB,gBAAAqC,EAAC,KAAA,EAAE,WAAW,4BAA4B0H,CAAmB,IAC1D,UAAA/J,EAAM,YAAY,YAAA,CACrB;AAAA,UAEF,gBAAAqC,EAAC,OAAA,EAAI,WAAW,GAAGwH,CAAc,IAAIC,CAAc,IAChD,UAAA9J,EAAM,QAAQ,IAAI,CAACiJ,MAClB,gBAAA5G;AAAA,YAAC2H;AAAA,YAAA;AAAA,cAEC,OAAOf,EAAO;AAAA,cACd,YAAYtE,GAAO,WAAWsE,EAAO,KAAK,KAAK;AAAA,cAC/C,eAAe,CAACgB,OAAY;AAC1B,sBAAMC,KAAgBvF,KAAS,CAAA;AAC/B,gBACEqC,EADEiD,KACW,CAAC,GAAGC,IAAejB,EAAO,KAAK,IAG1CiB,GAAc,OAAO,CAACC,MAAWA,MAAMlB,EAAO,KAAK,CAHR;AAAA,cAMjD;AAAA,cACA,MAAMjJ,EAAM,YAAY;AAAA,cACxB,OAAOA,EAAM,YAAY;AAAA,cACzB,QAAQA,EAAM,YAAY;AAAA,cAC1B,YAAYA,EAAM,UAAU,YAAYA,EAAM,YAAY;AAAA,cAC1D,YAAYA,EAAM,UAAU,YAAYA,EAAM,YAAY;AAAA,cAEzD,UAAAiJ,EAAO;AAAA,YAAA;AAAA,YAnBHA,EAAO;AAAA,UAAA,CAqBf,EAAA,CACH;AAAA,QAAA,GACF;AAAA,MAEJ,OAAO;AAEL,cAAMmB,IAA6BpK,EAAM,YAAY,sBAAsB,QACrEqK,IAAyBD,MAA+B,WAAW,wBAC1CA,MAA+B,UAAU,qBAAqB,sBACvFE,IAA8BF,MAA+B,WAAW,gBAC3CA,MAA+B,UAAU,eAAe;AAE3F,iCACG,OAAA,EAAI,WAAW,GAAGjD,CAAc,IAAIkD,CAAsB,yBACzD,UAAA;AAAA,UAAA,gBAAA1D,EAAC,SAAA,EAAM,WAAW,uBAAuB2D,CAA2B,eACjE,UAAA;AAAA,YAAAtK,EAAM;AAAA,YACNA,EAAM,YAAY,gBAAAqC,EAAC,QAAA,EAAK,WAAU,eAAc,UAAA,IAAA,CAAC;AAAA,UAAA,GACpD;AAAA,UACCrC,EAAM,YAAY,eACjB,gBAAAqC,EAAC,KAAA,EAAE,WAAW,iCAAiCiI,CAA2B,IACvE,UAAAtK,EAAM,YAAY,YAAA,CACrB;AAAA,UAEF,gBAAAqC;AAAA,YAAC2H;AAAA,YAAA;AAAA,cACC,YAAYrF,KAAS;AAAA,cACrB,eAAeqC;AAAA,cAA2B,MAAMhH,EAAM,YAAY;AAAA,cAClE,OAAOA,EAAM,YAAY;AAAA,cACzB,QAAQA,EAAM,YAAY;AAAA,cAC1B,YAAYA,EAAM,UAAU,YAAYA,EAAM,YAAY;AAAA,cAC1D,YAAYA,EAAM,UAAU,YAAYA,EAAM,YAAY;AAAA,cAC3D,UAAA;AAAA,YAAA;AAAA,UAAA;AAAA,QAED,GACF;AAAA,MAEJ;AAAA,IAEF,KAAK;AACH,YAAMuK,IAA2BvK,EAAM,YAAY,sBAAsB,QACnEwK,IAAuBD,MAA6B,WAAW,wBACxCA,MAA6B,UAAU,qBAAqB;AAEzF,aACE,gBAAA5D,EAAC,OAAA,EAAI,WAAW,aAAaQ,CAAc,IACzC,UAAA;AAAA,QAAA,gBAAA9E,EAAC,OAAA,EAAI,WAAWmI,GACd,UAAA,gBAAA7D;AAAA,UAAC8D;AAAA,UAAA;AAAA,YACC,YAAY9F,KAAS;AAAA,YACrB,eAAeqC;AAAA,YACf,MAAMhH,EAAM,YAAY;AAAA,YACxB,OAAOA,EAAM,YAAY;AAAA,YACzB,YAAYA,EAAM,UAAU,YAAYA,EAAM,YAAY;AAAA,YAC1D,YAAYA,EAAM,UAAU,YAAYA,EAAM,YAAY;AAAA,YAEzD,UAAA;AAAA,cAAAA,EAAM;AAAA,cACNA,EAAM,YAAY,gBAAAqC,EAAC,QAAA,EAAK,WAAU,oBAAmB,UAAA,IAAA,CAAC;AAAA,YAAA;AAAA,UAAA;AAAA,QAAA,GAE3D;AAAA,QACCrC,EAAM,YAAY,eACjB,gBAAAqC,EAAC,SAAI,WAAWmI,GACd,UAAA,gBAAAnI,EAAC,KAAA,EAAE,WAAU,4BACV,UAAArC,EAAM,YAAY,aACrB,EAAA,CACF;AAAA,MAAA,GAEJ;AAAA,IAGJ,KAAK;AACH,aACE,gBAAA2G,EAAC,OAAA,EAAI,WAAW,aAAaQ,CAAc,IACzC,UAAA;AAAA,QAAA,gBAAAR,EAAC,SAAA,EAAM,WAAU,uBACd,UAAA;AAAA,UAAA3G,EAAM;AAAA,UACNA,EAAM,YAAY,gBAAAqC,EAAC,QAAA,EAAK,WAAU,eAAc,UAAA,IAAA,CAAC;AAAA,QAAA,GACpD;AAAA,QACCrC,EAAM,YAAY,eACjB,gBAAAqC,EAAC,OAAE,WAAU,4BACV,UAAArC,EAAM,YAAY,YAAA,CACrB;AAAA,QAEF,gBAAA2G,EAAC,OAAA,EAAI,WAAU,4HACb,UAAA;AAAA,UAAA,gBAAAtE,EAACqI,GAAA,EAAO,WAAU,iCAAgC,MAAM,IAAI;AAAA,UAC5D,gBAAArI,EAAC,KAAA,EAAE,WAAU,iCAAgC,UAAA,oCAE7C;AAAA,4BACC,KAAA,EAAE,WAAU,4BACV,UAAArC,EAAM,YAAY,UAAU,kBAC/B;AAAA,UACA,gBAAAqC;AAAA,YAAC;AAAA,YAAA;AAAA,cACC,MAAK;AAAA,cACL,QAAQrC,EAAM,YAAY;AAAA,cAC1B,UAAUA,EAAM,YAAY;AAAA,cAC5B,WAAU;AAAA,cACV,UAAU,CAAC2K,MAAM;AACf,sBAAMC,IAAQ,MAAM,KAAKD,EAAE,OAAO,SAAS,EAAE;AAC7C,gBAAA3D,EAAahH,EAAM,YAAY,WAAW4K,IAAQA,EAAM,CAAC,CAAC;AAAA,cAC5D;AAAA,YAAA;AAAA,UAAA;AAAA,QACF,EAAA,CACF;AAAA,MAAA,GACF;AAAA,IAGJ,KAAK;AACH,YAAMC,IAAY7K,EAAM,YAAY,OAAO,GACrC8K,IAA2B9K,EAAM,YAAY,sBAAsB,QACnE+K,IAAuBD,MAA6B,WAAW,wBACxCA,MAA6B,UAAU,qBAAqB;AAEzF,aACE,gBAAAnE,EAAC,OAAA,EAAI,WAAW,aAAaQ,CAAc,IACzC,UAAA;AAAA,QAAA,gBAAA9E,EAAC,SAAI,WAAW0I,GACd,UAAA,gBAAApE,EAAC,SAAA,EAAM,WAAU,uBACd,UAAA;AAAA,UAAA3G,EAAM;AAAA,UACNA,EAAM,YAAY,gBAAAqC,EAAC,QAAA,EAAK,WAAU,eAAc,UAAA,IAAA,CAAC;AAAA,QAAA,EAAA,CACpD,EAAA,CACF;AAAA,QACCrC,EAAM,YAAY,eACjB,gBAAAqC,EAAC,SAAI,WAAW0I,GACd,UAAA,gBAAA1I,EAAC,KAAA,EAAE,WAAU,4BACV,UAAArC,EAAM,YAAY,aACrB,GACF;AAAA,0BAED,OAAA,EAAI,WAAW+K,GACd,UAAA,gBAAA1I,EAAC,OAAA,EAAI,WAAU,cACZ,UAAA,MAAM,KAAK,EAAE,QAAQwI,KAAa,CAACG,GAAGC,MAAMA,IAAI,CAAC,EAAE;AAAA,UAClD,CAACC,MACD,gBAAA7I;AAAA,YAAC;AAAA,YAAA;AAAA,cAEC,MAAK;AAAA,cACL,SAAS,MAAM2E,EAAakE,CAAM;AAAA,cAClC,WAAU;AAAA,cAEV,UAAA,gBAAA7I;AAAA,gBAAC8I;AAAA,gBAAA;AAAA,kBACC,WAAW,WACTD,MAAWvG,KAAS,KAChB,8BACA,kBACN;AAAA,gBAAA;AAAA,cAAA;AAAA,YACF;AAAA,YAXKuG;AAAA,UAAA;AAAA,QAYP,GAGJ,EAAA,CACF;AAAA,MAAA,GACF;AAAA,IAGJ,KAAK;AACH,aACE,gBAAAvE,EAAC,OAAA,EAAI,WAAW,aAAaQ,CAAc,IACzC,UAAA;AAAA,QAAA,gBAAAR,EAAC,SAAA,EAAM,WAAU,uBACd,UAAA;AAAA,UAAA3G,EAAM;AAAA,UACNA,EAAM,YAAY,gBAAAqC,EAAC,QAAA,EAAK,WAAU,eAAc,UAAA,IAAA,CAAC;AAAA,QAAA,GACpD;AAAA,QACCrC,EAAM,YAAY,eACjB,gBAAAqC,EAAC,OAAE,WAAU,4BACV,UAAArC,EAAM,YAAY,YAAA,CACrB;AAAA,QAEF,gBAAAqC;AAAA,UAACqC;AAAA,UAAA;AAAA,YACC,OAAAC;AAAA,YACA,UAAUqC;AAAA,YACV,OAAO;AAAA,YACP,QAAQ;AAAA,YACR,WAAU;AAAA,UAAA;AAAA,QAAA;AAAA,MACZ,GACF;AAAA,IAGJ,KAAK;AACH,aACE,gBAAA3E,EAAC,SAAI,WAAW8E,GACd,4BAACiE,GAAA,EACC,UAAA,gBAAAzE,EAAC0E,GAAA,EAAS,WAAU,QAClB,UAAA;AAAA,QAAA,gBAAAhJ,EAAC,MAAA,EAAG,WAAU,8BAA8B,UAAArC,EAAM,OAAM;AAAA,QACvDA,EAAM,YAAY,eACjB,gBAAAqC,EAAC,OAAE,WAAU,oBAAoB,UAAArC,EAAM,YAAY,YAAA,CAAY;AAAA,MAAA,EAAA,CAEnE,GACF,GACF;AAAA,IAGJ,KAAK;AACH,aACE,gBAAA2G,EAAC,OAAA,EAAI,WAAW,QAAQQ,CAAc,IACpC,UAAA;AAAA,QAAA,gBAAA9E,EAAC,MAAA,EAAG,WAAU,4BAA4B,UAAArC,EAAM,OAAM;AAAA,QACrDA,EAAM,YAAY,eACjB,gBAAAqC,EAAC,OAAE,WAAU,oBAAoB,UAAArC,EAAM,YAAY,YAAA,CAAY;AAAA,MAAA,GAEnE;AAAA,IAGJ,KAAK;AACH,aACE,gBAAA2G,EAAC,OAAA,EAAI,WAAW,QAAQQ,CAAc,IACpC,UAAA;AAAA,QAAA,gBAAA9E,EAACiJ,IAAA,EAAQ,WAAU,OAAA,CAAO;AAAA,QAC1B,gBAAAjJ,EAAC,OAAA,EAAI,WAAU,wCAAuC,UAAA,cAAU;AAAA,QAChE,gBAAAA,EAACiJ,IAAA,EAAQ,WAAU,OAAA,CAAO;AAAA,MAAA,GAC5B;AAAA,IAGJ,KAAK;AACH,aACE,gBAAAjJ;AAAA,QAAC;AAAA,QAAA;AAAA,UACC,WAAW,6BAA6B8E,CAAc;AAAA,UACtD,yBAAyB;AAAA,YACvB,QAAQnH,EAAM,YAAY,eAAeA,EAAM;AAAA,UAAA;AAAA,QACjD;AAAA,MAAA;AAAA,IAIN,KAAK;AACH,aACE,gBAAA2G,EAAC,OAAA,EAAI,WAAW,aAAaQ,CAAc,IACzC,UAAA;AAAA,QAAA,gBAAAR,EAAC,SAAA,EAAM,WAAU,uBACd,UAAA;AAAA,UAAA3G,EAAM;AAAA,UACNA,EAAM,YAAY,gBAAAqC,EAAC,QAAA,EAAK,WAAU,eAAc,UAAA,IAAA,CAAC;AAAA,QAAA,GACpD;AAAA,QACCrC,EAAM,YAAY,eACjB,gBAAAqC,EAAC,OAAE,WAAU,4BACV,UAAArC,EAAM,YAAY,YAAA,CACrB;AAAA,QAEF,gBAAA2G,EAAC,OAAA,EAAI,WAAU,2BACb,UAAA;AAAA,UAAA,gBAAAtE;AAAA,YAAC;AAAA,YAAA;AAAA,cACC,MAAK;AAAA,cACL,KAAKrC,EAAM,YAAY,OAAO;AAAA,cAC9B,KAAKA,EAAM,YAAY,OAAO;AAAA,cAC9B,MAAMA,EAAM,YAAY,QAAQ;AAAA,cAChC,OAAO2E,KAAS3E,EAAM,YAAY,OAAO;AAAA,cACzC,UAAU,CAAC2K,MAAM3D,EAAa,OAAO2D,EAAE,OAAO,KAAK,CAAC;AAAA,cACpD,WAAU;AAAA,YAAA;AAAA,UAAA;AAAA,UAEZ,gBAAAtI,EAAC,UAAK,WAAU,oDACb,eAASrC,EAAM,YAAY,OAAO,EAAA,CACrC;AAAA,QAAA,EAAA,CACF;AAAA,MAAA,GACF;AAAA,IAGJ,KAAK;AACH,aACE,gBAAAqC;AAAA,QAACgG;AAAA,QAAA;AAAA,UACE,GAAGR;AAAA,UACJ,MAAK;AAAA,UACL,OAAOlD,KAAS;AAAA,UAChB,eAAe,CAAC2D,MAAQtB,EAAasB,CAAG;AAAA,QAAA;AAAA,MAAA;AAAA,IAI9C,KAAK;AACH,aACE,gBAAAjG;AAAA,QAACgG;AAAA,QAAA;AAAA,UACE,GAAGR;AAAA,UACJ,MAAK;AAAA,UACL,OAAOlD,KAAS;AAAA,UAChB,eAAe,CAAC2D,MAAQtB,EAAasB,CAAG;AAAA,QAAA;AAAA,MAAA;AAAA,IAI9C,KAAK;AACH,aAAOX;AAAA,QACL,gBAAAtF;AAAA,UAACuE;AAAA,UAAA;AAAA,YAEC,OAAO5G,EAAM,YAAY;AAAA,YACzB,MAAMA,EAAM,YAAY;AAAA,YACxB,SAASA,EAAM,YAAY;AAAA,YAC3B,QAAQA,EAAM,YAAY;AAAA,YAC1B,YAAYA,EAAM,UAAU,YAAYA,EAAM,YAAY;AAAA,YAC1D,WAAWkH,EAAc;AAAA,YACzB,SAAS,MAAM;AACb,cAAAF,EAAa,SAAS;AAAA,YACxB;AAAA,YACC,GAAGc;AAAA,YAEH,UAAA9H,EAAM;AAAA,UAAA;AAAA,UAZF,UAAUA,EAAM,EAAE;AAAA,QAAA;AAAA,MAazB;AAAA,IAGJ;AACE,aACE,gBAAAqC;AAAA,QAAC;AAAA,QAAA;AAAA,UACC,WAAW,sEAAsE8E,CAAc;AAAA,UAE/F,UAAA,gBAAAR,EAAC,KAAA,EAAE,WAAU,oBAAmB,UAAA;AAAA,YAAA;AAAA,YACL3G,EAAM;AAAA,UAAA,EAAA,CACjC;AAAA,QAAA;AAAA,MAAA;AAAA,EACF;AAGR;AAGyCuL,GAAM,KAAKxE,EAAiB;AC7vB9D,SAASyE,GAAkB;AAAA,EAChC,OAAAxL;AAAA,EACA,WAAAyL;AACF,GAA2B;AACzB,QAAM,EAAE,OAAA/K,GAAO,SAAAW,EAAA,IAAYiB,EAAA,GACrB,EAAE,iBAAAoJ,MAAoBhL,GAEtB;AAAA,IACJ,YAAAiL;AAAA,IACA,WAAAC;AAAA,IACA,YAAAC;AAAA,IACA,WAAAC;AAAA,IACA,YAAAC;AAAA,IACA,YAAAC;AAAA,EAAA,IACEC,GAAY,EAAE,IAAIjM,EAAM,IAAI,GAE1BkM,IAAQ;AAAA,IACZ,WAAWC,GAAI,UAAU,SAASL,CAAS;AAAA,IAC3C,YAAAC;AAAA,EAAA,GAGIK,IAAaV,MAAoB1L,EAAM,IAEvCqM,IAAe,MAAM;AACzB,IAAKZ,KACHpK,EAAQ,YAAYrB,EAAM,EAAE;AAAA,EAEhC,GAEMsM,IAAkB,MAAM;AAC5B,UAAMC,IAAkB;AAAA,MACtB,GAAGvM;AAAA,MACH,IAAI,OAAO,WAAA;AAAA,MACX,OAAO,GAAGA,EAAM,KAAK;AAAA,IAAA;AAEvB,IAAAqB,EAAQ,SAASkL,CAAe;AAAA,EAClC,GAEMC,IAAe,MAAM;AACzB,IAAAnL,EAAQ,YAAYrB,EAAM,EAAE;AAAA,EAC9B,GAEMyM,IAAa,MAAM;AACvB,IAAApL,EAAQ,YAAYrB,EAAM,EAAE;AAAA,EAC9B,GAEMmH,IAAiB1C,GAAyBzE,GAAO,CAACyL,CAAS;AAEjE,SAAIA,IAEA,gBAAApJ,EAAC,SAAI,WAAW,UAAU8E,CAAc,IACtC,UAAA,gBAAA9E,EAAC0E,IAAA,EAAkB,OAAA/G,EAAA,CAAc,EAAA,CACnC,IAKF,gBAAAqC;AAAA,IAAC;AAAA,IAAA;AAAA,MACC,KAAKwJ;AAAA,MACL,OAAAK;AAAA,MACA,WAAW;AAAA;AAAA,UAEPF,IAAa,oBAAoB,EAAE;AAAA;AAAA,UAEnC7E,CAAc;AAAA;AAAA,MAElB,SAAU6E,IAA4B,SAAfK;AAAA,MAEvB,UAAA,gBAAAhK;AAAA,QAAC;AAAA,QAAA;AAAA,UACC,WAAW;AAAA;AAAA,YAGP+J,IACI,6BACA,6CACN;AAAA,YACEJ,IAAa,eAAe,EAAE;AAAA;AAAA,UAGlC,UAAA,gBAAArF,EAAC,OAAA,EAAI,WAAU,OAEb,UAAA;AAAA,YAAA,gBAAAA,EAAC,OAAA,EAAI,WAAU,2CACb,UAAA;AAAA,cAAA,gBAAAA,EAAC,OAAA,EAAI,WAAU,2BACb,UAAA;AAAA,gBAAA,gBAAAtE;AAAA,kBAAC;AAAA,kBAAA;AAAA,oBACE,GAAGsJ;AAAA,oBACH,GAAGC;AAAA,oBACJ,WAAU;AAAA,oBAEV,UAAA,gBAAAvJ,EAACqK,IAAA,EAAa,WAAU,oBAAmB,MAAM,GAAA,CAAI;AAAA,kBAAA;AAAA,gBAAA;AAAA,gBAEvD,gBAAArK,EAAC,QAAA,EAAK,WAAU,wCACb,YAAM,KAAK,OAAO,CAAC,EAAE,gBAAgBrC,EAAM,KAAK,MAAM,CAAC,EAAA,CAC1D;AAAA,cAAA,GACF;AAAA,cAEA,gBAAA2G,EAACgG,IAAA,EAAY,MAAK,MAAK,SAAQ,QAC7B,UAAA;AAAA,gBAAA,gBAAAtK;AAAA,kBAACuE;AAAA,kBAAA;AAAA,oBACC,YAAU;AAAA,oBACV,SAAS6F;AAAA,oBACT,OAAOL,IAAa,YAAY;AAAA,oBAEhC,UAAA,gBAAA/J,EAACuK,IAAA,EAAK,MAAM,GAAA,CAAI;AAAA,kBAAA;AAAA,gBAAA;AAAA,gBAElB,gBAAAvK,EAACuE,GAAA,EAAO,YAAU,IAAC,SAAS0F,GAC1B,UAAA,gBAAAjK,EAACwK,IAAA,EAAK,MAAM,GAAA,CAAI,EAAA,CAClB;AAAA,gBACA,gBAAAxK,EAACuE,GAAA,EAAO,YAAU,IAAC,OAAM,UAAS,SAAS4F,GACzC,UAAA,gBAAAnK,EAACyK,IAAA,EAAO,MAAM,GAAA,CAAI,EAAA,CACpB;AAAA,cAAA,EAAA,CACF;AAAA,YAAA,GACF;AAAA,8BAGC,OAAA,EAAI,WAAU,uBACb,UAAA,gBAAAzK,EAAC0E,IAAA,EAAkB,OAAA/G,GAAc,GACnC;AAAA,8BAGC,OAAA,EAAI,WAAU,yCACb,UAAA,gBAAA2G,EAAC,OAAA,EAAI,WAAU,8DACb,UAAA;AAAA,cAAA,gBAAAA,EAAC,OAAA,EAAI,WAAU,2BACb,UAAA;AAAA,gBAAA,gBAAAA,EAAC,QAAA,EAAK,UAAA;AAAA,kBAAA;AAAA,kBAAM3G,EAAM,WAAW,QAAQ;AAAA,gBAAA,GAAK;AAAA,gBACzCA,EAAM,cAAcA,EAAM,WAAW,SAAS,uBAC5C,QAAA,EAAK,UAAA;AAAA,kBAAA;AAAA,kBAAMA,EAAM,WAAW;AAAA,gBAAA,EAAA,CAAO;AAAA,cAAA,GAExC;AAAA,gCACC,QAAA,EAAK,UAAA;AAAA,gBAAA;AAAA,gBAAKA,EAAM,GAAG,MAAM,GAAG,CAAC;AAAA,gBAAE;AAAA,cAAA,EAAA,CAAG;AAAA,YAAA,EAAA,CACrC,EAAA,CACF;AAAA,UAAA,EAAA,CACF;AAAA,QAAA;AAAA,MAAA;AAAA,IACF;AAAA,EAAA;AAGN;ACjJO,SAAS+M,GAAoBlM,GAAgC;AAClE,QAAMmM,IAAkB,CAAA;AACxB,MAAIC,IAA0B,CAAA,GAC1BC,IAAiB;AAErB,SAAArM,EAAO,QAAQ,CAACb,GAAOmN,MAAU;AAC/B,UAAMC,IAAYC,GAAarN,CAAK;AAOpC,IANoBA,EAAM,YAAY,eAAe,MAMlCkN,IAAiBE,IAAY,MAAMH,EAAW,WAAW,KACtEA,EAAW,SAAS,KACtBD,EAAK,KAAK;AAAA,MACR,IAAI,OAAOA,EAAK,MAAM;AAAA,MACtB,QAAQ,CAAC,GAAGC,CAAU;AAAA,IAAA,CACvB,GAEHA,IAAa,CAACjN,CAAK,GACnBkN,IAAiBE,MAEjBH,EAAW,KAAKjN,CAAK,GACrBkN,KAAkBE,IAIhBD,MAAUtM,EAAO,SAAS,KAAKoM,EAAW,SAAS,KACrDD,EAAK,KAAK;AAAA,MACR,IAAI,OAAOA,EAAK,MAAM;AAAA,MACtB,QAAQ,CAAC,GAAGC,CAAU;AAAA,IAAA,CACvB;AAAA,EAEL,CAAC,GAEMD;AACT;AAEO,SAASK,GAAarN,GAA0B;AAErD,QAAMsN,IAAatN,EAAM,QAAQ,cAAcA,EAAM;AACrD,MAAIsN;AACF,WAAO,KAAK,IAAI,IAAI,KAAK,IAAI,GAAGA,CAAU,CAAC;AAI7C,UAAQtN,EAAM,YAAY,OAAA;AAAA,IACxB,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AAAA,IACL;AACE,aAAO;AAAA,EAAA;AAEb;AAEO,SAASuN,GAAiBC,GAAsB;AAgBrD,SAf4C;AAAA,IAC1C,GAAG;AAAA,IACH,GAAG;AAAA,IACH,GAAG;AAAA,IACH,GAAG;AAAA,IACH,GAAG;AAAA,IACH,GAAG;AAAA,IACH,GAAG;AAAA,IACH,GAAG;AAAA,IACH,GAAG;AAAA,IACH,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,EAAA,EAGaA,CAAI,KAAK;AAC9B;ACrEO,SAASC,GAAgB,EAAE,KAAAC,GAAK,WAAAjC,KAAmC;AACxE,QAAM,EAAE,QAAA5K,MAAW6M;AAGnB,MAAI7M,EAAO,WAAW,KAAKwM,GAAaxM,EAAO,CAAC,CAAC,MAAM,IAAI;AACzD,UAAMsG,IAAiB1C,GAAyB5D,EAAO,CAAC,GAAG,CAAC4K,CAAS;AACrE,WACE,gBAAApJ,EAAC,OAAA,EAAI,WAAW8E,GACd,UAAA,gBAAA9E;AAAA,MAACmJ;AAAA,MAAA;AAAA,QAEC,OAAO3K,EAAO,CAAC;AAAA,QACf,WAAA4K;AAAA,MAAA;AAAA,MAFK5K,EAAO,CAAC,EAAE;AAAA,IAAA,GAInB;AAAA,EAEJ;AAGA,2BACG,OAAA,EAAI,WAAU,2BACZ,UAAAA,EAAO,IAAI,CAACb,MAAU;AACrB,UAAMwN,IAAOH,GAAarN,CAAK,GACzB2N,IAAYJ,GAAiBC,CAAI,GACjCrG,IAAiB1C,GAAyBzE,GAAO,CAACyL,CAAS,GAC3DmC,IAAkB,CAACD,GAAWxG,CAAc,EAAE,OAAO,OAAO,EAAE,KAAK,GAAG;AAE5E,WACE,gBAAA9E,EAAC,OAAA,EAAmB,WAAWuL,GAC7B,UAAA,gBAAAvL;AAAA,MAACmJ;AAAA,MAAA;AAAA,QACC,OAAAxL;AAAA,QACA,WAAAyL;AAAA,MAAA;AAAA,IAAA,EACF,GAJQzL,EAAM,EAKhB;AAAA,EAEJ,CAAC,EAAA,CACH;AAEJ;AChBO,SAAS6N,GAAa;AAAA,EAC3B,YAAAC;AAAA,EACA,UAAAC;AAAA,EACA,WAAA3J,IAAY;AACd,GAAsB;AACpB,QAAM,CAAC4J,GAAUC,CAAW,IAAI7I,EAA8B,CAAA,CAAE,GAC1D,CAAC8I,GAAQC,CAAS,IAAI/I,EAAiC,CAAA,CAAE,GAEzDgJ,IAAoBC,GAAY,CAACC,GAAiB3J,MAAe;AACrE,IAAAsJ,EAAY,CAACM,OAAU;AAAA,MACrB,GAAGA;AAAA,MACH,CAACD,CAAO,GAAG3J;AAAA,IAAA,EACX,GAGFwJ,EAAU,CAACI,MAAS;AAClB,UAAIA,EAAKD,CAAO,GAAG;AACjB,cAAME,IAAY,EAAE,GAAGD,EAAA;AACvB,sBAAOC,EAAUF,CAAO,GACjBE;AAAA,MACT;AACA,aAAOD;AAAA,IACT,CAAC;AAAA,EACH,GAAG,CAAA,CAAE,GAECE,IAAe,MAAe;AAClC,UAAMD,IAAoC,CAAA;AAG1C,WAAAV,EAAW,WAAW,eAAe,QAAQ,CAACQ,MAAY;AACxD,YAAMtO,IAAQ8N,EAAW,SAASQ,CAAO,GACnC3J,IAAQqJ,EAASM,CAAO;AAE9B,OAAI,CAAC3J,KAAU,OAAOA,KAAU,YAAYA,EAAM,KAAA,MAAW,QAC3D6J,EAAUF,CAAO,IAAI,GAAGtO,EAAM,KAAK;AAAA,IAEvC,CAAC,GAGD8N,EAAW,WAAW,qBAAqB,QAAQ,CAACQ,MAAY;AAC9D,YAAMtO,IAAQ8N,EAAW,SAASQ,CAAO,GACnC3J,IAAQqJ,EAASM,CAAO;AAE9B,MAAItO,EAAM,cAAc2E,KACtB3E,EAAM,WAAW,QAAQ,CAAC0O,MAAS;AACjC,gBAAQA,EAAK,MAAA;AAAA,UACX,KAAK;AAEH,YADmB,6BACH,KAAK/J,CAAK,MACxB6J,EAAUF,CAAO,IAAII,EAAK;AAE5B;AAAA,UACF,KAAK;AACH,YAAI/J,EAAM,SAAS+J,EAAK,UACtBF,EAAUF,CAAO,IAAII,EAAK;AAE5B;AAAA,UACF,KAAK;AACH,YAAI/J,EAAM,SAAS+J,EAAK,UACtBF,EAAUF,CAAO,IAAII,EAAK;AAE5B;AAAA,UACF,KAAK;AACH,YAAI,WAAW/J,CAAK,IAAI+J,EAAK,UAC3BF,EAAUF,CAAO,IAAII,EAAK;AAE5B;AAAA,UACF,KAAK;AACH,YAAI,WAAW/J,CAAK,IAAI+J,EAAK,UAC3BF,EAAUF,CAAO,IAAII,EAAK;AAE5B;AAAA,UACF,KAAK;AAEH,YADc,IAAI,OAAOA,EAAK,KAAK,EACxB,KAAK/J,CAAK,MACnB6J,EAAUF,CAAO,IAAII,EAAK;AAE5B;AAAA,QAAA;AAAA,MAEN,CAAC;AAAA,IAEL,CAAC,GAEDP,EAAUK,CAAS,GACZ,OAAO,KAAKA,CAAS,EAAE,WAAW;AAAA,EAC3C,GAEMG,IAAe,CAAChE,MAAuB;AAG3C,QAFAA,EAAE,eAAA,GAEE8D,KAAgB;AAElB,YAAMG,wBAAiB,IAAA,GACjBC,wBAAgB,IAAA;AAGtB,aAAO,KAAKb,CAAQ,EAAE,QAAQ,CAACM,MAAY;AACzC,cAAMtO,IAAQ8N,EAAW,SAASQ,CAAO;AACzC,YAAIQ,IAAY9O,EAAM;AAEtB,YAAI,CAAC8O,KAAa,CAACA,EAAU,QAAQ;AAEnC,gBAAM5O,IAAWF,EAAM,KAAK,QAAQ,SAAS,GAAG,EAAE,YAAA;AAGlD,cAFA8O,IAAY5O,GAER2O,EAAU,IAAIC,CAAS,GAAG;AAC5B,gBAAIzO,IAAU;AAEd,iBADAyO,IAAY,GAAG5O,CAAQ,GAAGG,CAAO,IAC1BwO,EAAU,IAAIC,CAAS;AAC5B,cAAAzO,KACAyO,IAAY,GAAG5O,CAAQ,GAAGG,CAAO;AAAA,UAErC;AAAA,QACF;AAEA,QAAAwO,EAAU,IAAIC,CAAS,GACvBF,EAAW,IAAIN,GAASQ,CAAS;AAAA,MACnC,CAAC;AAGD,YAAMC,IAAsC,CAAA;AAC5C,aAAO,QAAQf,CAAQ,EAAE,QAAQ,CAAC,CAACM,GAAS3J,CAAK,MAAM;AACrD,cAAMmK,IAAYF,EAAW,IAAIN,CAAO;AACxC,QAAAS,EAAeD,CAAS,IAAInK;AAAA,MAC9B,CAAC,GAEDoJ,IAAWgB,CAAc;AAAA,IAC3B;AAAA,EACF,GAEMC,IAAc,CAAChP,MAA2B;AAC9C,UAAM2E,IAAQqJ,EAAShO,EAAM,EAAE,KAAKA,EAAM,gBAAgB,IACpDiP,IAAQf,EAAOlO,EAAM,EAAE,GACvBkP,IAAW,CAAC,CAACD,GAGb/H,IAAgBhE,GAAmBlD,GAAc,EAAK,GAGtD6H,IAAc;AAAA,MAClB,OAAO7H,EAAM;AAAA,MACb,aAAaA,EAAM;AAAA,MACnB,YAAYA,EAAM;AAAA,MAClB,aAAaA,EAAM,YAAY;AAAA,MAC/B,YAAY;AAAA,QACV,MAAMkH,EAAc;AAAA,QACpB,OAAOA,EAAc;AAAA,QACrB,cAAcA,EAAc;AAAA,QAC5B,cAAcA,EAAc;AAAA,QAC5B,aAAaA,EAAc;AAAA,QAC3B,OAAOA,EAAc;AAAA,QACrB,aAAaA,EAAc;AAAA,QAC3B,eAAeA,EAAc;AAAA,QAC7B,aAAaA,EAAc;AAAA,QAC3B,cAAcA,EAAc;AAAA,MAAA;AAAA;AAAA,MAG9B,WAAWgI;AAAA;AAAA,MACX,cAAcD;AAAA,MACd,MAAOjP,EAAM,WAAW,QAA+B;AAAA,MACvD,YAAYA,EAAM,WAAW;AAAA,MAC7B,YAAYA,EAAM,WAAW;AAAA,MAC7B,OAAOA,EAAM,WAAW;AAAA,MACxB,QAAQA,EAAM,WAAW;AAAA,MACzB,SAASA,EAAM,WAAW;AAAA,IAAA;AAI5B,QAAIA,EAAM,WAAW;AACnB,aAAO;AA6BT,UAAMmP,KAzBqB,MAAM;AAC/B,YAAMxD,IAAkC,CAAA;AAExC,aAAI3L,EAAM,WAAW,cACnB2L,EAAW,YAAY,IAAI3L,EAAM,WAAW,YAG1CA,EAAM,WAAW,aAAa,WAChC2L,EAAW,WAAW3L,EAAM,WAAW,WAGrCA,EAAM,WAAW,kBAEDA,EAAM,WAAW,eAAe,MAAM,GAAG,EACjD,QAAQ,CAAAoP,MAAQ;AACxB,cAAM,CAACnH,GAAKtD,CAAK,IAAIyK,EAAK,MAAM,GAAG;AACnC,QAAInH,KAAOtD,MACTgH,EAAW1D,EAAI,KAAA,CAAM,IAAItD,EAAM,KAAA;AAAA,MAEnC,CAAC,GAGIgH;AAAA,IACT,GAEwB;AAExB,YAAQ3L,EAAM,MAAA;AAAA,MACZ,KAAK;AACH,eACE,gBAAAqC;AAAA,UAACgG;AAAA,UAAA;AAAA,YAEE,GAAGR;AAAA,YACJ,MAAK;AAAA,YACL,OAAAlD;AAAA,YACA,eAAe,CAAC2D,MAAQ8F,EAAkBpO,EAAM,IAAIsI,CAAG;AAAA,YACvD,WAAWtI,EAAM,WAAW;AAAA,YAC5B,WAAWA,EAAM,WAAW;AAAA,UAAA;AAAA,UANvB,QAAQA,EAAM,EAAE;AAAA,QAAA;AAAA,MAU3B,KAAK;AACH,eACE,gBAAAqC;AAAA,UAACgG;AAAA,UAAA;AAAA,YAEE,GAAGR;AAAA,YACJ,MAAK;AAAA,YACL,OAAAlD;AAAA,YACA,eAAe,CAAC2D,MAAQ8F,EAAkBpO,EAAM,IAAIsI,CAAG;AAAA,YACvD,WAAWtI,EAAM,WAAW;AAAA,YAC5B,WAAWA,EAAM,WAAW;AAAA,UAAA;AAAA,UANvB,SAASA,EAAM,EAAE;AAAA,QAAA;AAAA,MAU5B,KAAK;AACH,eACE,gBAAAqC;AAAA,UAACgG;AAAA,UAAA;AAAA,YAEE,GAAGR;AAAA,YACJ,MAAK;AAAA,YACL,OAAAlD;AAAA,YACA,eAAe,CAAC2D,MAAQ8F,EAAkBpO,EAAM,IAAIsI,CAAG;AAAA,YACvD,WAAWtI,EAAM,WAAW;AAAA,YAC5B,WAAWA,EAAM,WAAW;AAAA,UAAA;AAAA,UANvB,YAAYA,EAAM,EAAE;AAAA,QAAA;AAAA,MAU/B,KAAK;AACH,eACE,gBAAAqC;AAAA,UAACgG;AAAA,UAAA;AAAA,YAEE,GAAGR;AAAA,YACJ,MAAK;AAAA,YACL,OAAAlD;AAAA,YACA,eAAe,CAAC2D,MAAQ;AAEtB,oBAAMC,IAAS,WAAWD,CAAG;AAC7B,cAAI,CAAC,MAAMC,CAAM,MACXvI,EAAM,WAAW,QAAQ,UAAauI,IAASvI,EAAM,WAAW,OAGhEA,EAAM,WAAW,QAAQ,UAAauI,IAASvI,EAAM,WAAW,QAItEoO,EAAkBpO,EAAM,IAAIsI,CAAG;AAAA,YACjC;AAAA,YACA,KAAKtI,EAAM,WAAW;AAAA,YACtB,KAAKA,EAAM,WAAW;AAAA,YACtB,MAAMA,EAAM,WAAW;AAAA,UAAA;AAAA,UAnBlB,UAAUA,EAAM,EAAE;AAAA,QAAA;AAAA,MAuB7B,KAAK;AACH,eACE,gBAAAqC;AAAA,UAACwG;AAAA,UAAA;AAAA,YAEE,GAAGhB;AAAA,YACJ,OAAAlD;AAAA,YACA,eAAe,CAAC2D,MAAQ8F,EAAkBpO,EAAM,IAAIsI,CAAG;AAAA,YACvD,MAAMtI,EAAM,WAAW,QAAQ;AAAA,YAC/B,WAAWA,EAAM,WAAW;AAAA,YAC5B,WAAWA,EAAM,WAAW;AAAA,UAAA;AAAA,UANvB,YAAYA,EAAM,EAAE;AAAA,QAAA;AAAA,MAU/B,KAAK;AACH,eACE,gBAAAqC;AAAA,UAACyG;AAAA,UAAA;AAAA,YACE,GAAGjB;AAAA,YACJ,cAAclD,IAAQ,CAACA,CAAK,IAAI,CAAA;AAAA,YAChC,mBAAmB,CAACoE,MAAS;AAC3B,oBAAMC,IAAgB,MAAM,KAAKD,CAAI,EAAE,CAAC;AACxC,cAAAqF,EAAkBpO,EAAM,IAAIgJ,CAAa;AAAA,YAC3C;AAAA,YACA,eAAehJ,EAAM,WAAW,WAAW,aAAa;AAAA,YAEvD,UAAAA,EAAM,SAAS,IAAI,CAACiJ,MACnB,gBAAA5G,EAAC6G,GAAA,EAA+B,UAAAD,EAAO,MAAA,GAAtBA,EAAO,KAAqB,CAC9C,KAAK,CAAA;AAAA,UAAC;AAAA,QAAA;AAAA,MAIb,KAAK;AACH,eACE,gBAAA5G;AAAA,UAAC8G;AAAA,UAAA;AAAA,YACE,GAAGtB;AAAA,YACJ,aAAalD,KAAS;AAAA,YACtB,mBAAmB,CAACsD,MAAQ;AAC1B,cAAAmG,EAAkBpO,EAAM,IAAIiI,CAAG;AAAA,YACjC;AAAA,YACA,mBAAiB;AAAA,YAEhB,UAAAjI,EAAM,SAAS,IAAI,CAACiJ,MACnB,gBAAA5G,EAAC+G,IAAA,EAAqC,UAAAH,EAAO,MAAA,GAAtBA,EAAO,KAAqB,CACpD,KAAK,CAAA;AAAA,UAAC;AAAA,QAAA;AAAA,MAIb,KAAK;AACH,cAAMI,IAAmBrJ,EAAM,YAAY,eAAe,YACpDsJ,IAA0BtJ,EAAM,YAAY,sBAAsB,QAGlEuJ,IAAsBF,MAAqB,eAC5CC,MAA4B,WAAW,mBACvCA,MAA4B,UAAU,gBAAgB,kBACtDA,MAA4B,WAAW,iBACvCA,MAA4B,UAAU,cAAc,eAEnDE,IAA2BF,MAA4B,WAAW,gBACvCA,MAA4B,UAAU,eAAe;AAOtF,eACE,gBAAAjH,EAAC,OAAA,EAAI,WAL4BiH,MAA4B,WAAW,+BACxCA,MAA4B,UAAU,4BACtC,6BAI9B,UAAA,gBAAAjH;AAAA,UAACoH;AAAA,UAAA;AAAA,YACC,OAAOzJ,EAAM;AAAA,YACb,aAAaA,EAAM,YAAY;AAAA,YAC/B,YAAYA,EAAM;AAAA,YAClB,OAAA2E;AAAA,YACA,eAAe,CAAC2D,MAAQ8F,EAAkBpO,EAAM,IAAIsI,CAAG;AAAA,YACvD,WAAW4G;AAAA,YACX,cAAcD;AAAA,YACd,MAAOjP,EAAM,WAAW,QAA+B;AAAA,YACvD,YAAYA,EAAM,WAAW;AAAA,YAC7B,OAAOA,EAAM,WAAW;AAAA,YACxB,aAAaqJ;AAAA,YACb,YAAY;AAAA,cACV,MAAM;AAAA,gBACJrJ,EAAM,WAAW;AAAA,gBACjBA,EAAM,WAAW;AAAA,gBACjBA,EAAM,WAAW;AAAA,cAAA,EACjB,OAAO,OAAO,EAAE,KAAK,GAAG;AAAA,cAC1B,SAAS,GAAGA,EAAM,WAAW,aAAa,EAAE,IAAIuJ,CAAmB;AAAA,cAAiB,OAAOC;AAAA,cAC7F,aAAaA;AAAA,YAAA;AAAA,YAEf,WAAWxJ,EAAM,WAAW;AAAA,YAE3B,YAAM,SAAS,IAAI,CAACiJ,wBAClBS,IAAA,EAAyB,OAAOT,EAAO,OACrC,YAAO,MAAA,GADEA,EAAO,KAEnB,CACD,KAAK,CAAA;AAAA,UAAC;AAAA,QAAA,GAET;AAAA,MAGJ,KAAK;AACH,YAAIjJ,EAAM,WAAWA,EAAM,QAAQ,SAAS,GAAG;AAC7C,gBAAM2J,IAAc3J,EAAM,YAAY,eAAe,YAC/C4J,IAAqB5J,EAAM,YAAY,sBAAsB,QAG7D6J,IAAiBF,MAAgB,eACnC,yBACA,2BAGEG,IAAiBH,MAAgB,eAClCC,MAAuB,WAAW,mBAClCA,MAAuB,UAAU,gBAAgB,kBACjDA,MAAuB,WAAW,iBAClCA,MAAuB,UAAU,cAAc,eAE9CG,KAAsBH,MAAuB,WAAW,gBACnCA,MAAuB,UAAU,eAAe,aAGrEyF,KAAwBzF,MAAuB,WAAW,+BACnCA,MAAuB,UAAU,4BACjC;AAE7B,iBACE,gBAAAjD,EAAC,OAAA,EAAI,WAAW,aAAa3G,EAAM,WAAW,iBAAiB,EAAE,IAAIqP,EAAqB,IACxF,UAAA;AAAA,YAAA,gBAAA1I,EAAC,SAAA,EAAM,WAAW,uBAAuBoD,EAAmB,IACzD,UAAA;AAAA,cAAA/J,EAAM;AAAA,cACNA,EAAM,YAAY,gBAAAqC,EAAC,QAAA,EAAK,WAAU,eAAc,UAAA,IAAA,CAAC;AAAA,YAAA,GACpD;AAAA,YACCrC,EAAM,YAAY,eACjB,gBAAAqC,EAAC,KAAA,EAAE,WAAW,4BAA4B0H,EAAmB,IAC1D,UAAA/J,EAAM,YAAY,YAAA,CACrB;AAAA,YAEF,gBAAAqC,EAAC,OAAA,EAAI,WAAW,GAAGwH,CAAc,IAAIC,CAAc,IAChD,UAAA9J,EAAM,QAAQ,IAAI,CAACiJ,MAClB,gBAAA5G;AAAA,cAAC2H;AAAA,cAAA;AAAA,gBAEC,YAAYrF,GAAO,WAAWsE,EAAO,KAAK,KAAK;AAAA,gBAC/C,eAAe,CAACgB,OAAY;AAC1B,wBAAMC,KAAgBvF,KAAS,CAAA;AAC/B,kBAAIsF,KACFmE,EAAkBpO,EAAM,IAAI;AAAA,oBAC1B,GAAGkK;AAAA,oBACHjB,EAAO;AAAA,kBAAA,CACR,IAEDmF;AAAA,oBACEpO,EAAM;AAAA,oBACNkK,GAAc,OAAO,CAACC,OAAWA,OAAMlB,EAAO,KAAK;AAAA,kBAAA;AAAA,gBAGzD;AAAA,gBACA,MAAOjJ,EAAM,WAAW,QAA+B;AAAA,gBACvD,YAAYA,EAAM,WAAW;AAAA,gBAC7B,OAAOA,EAAM,WAAW;AAAA,gBACxB,QAAQA,EAAM,WAAW;AAAA,gBAExB,UAAAiJ,EAAO;AAAA,cAAA;AAAA,cArBHA,EAAO;AAAA,YAAA,CAuBf,GACH;AAAA,YACCiG,KAAY,gBAAA7M,EAAC,KAAA,EAAE,WAAU,uBAAuB,UAAA4M,EAAA,CAAM;AAAA,UAAA,GACzD;AAAA,QAEJ,OAAO;AACL,gBAAM7E,IAA6BpK,EAAM,YAAY,sBAAsB,QACrEqK,IAAyBD,MAA+B,WAAW,mBAC1CA,MAA+B,UAAU,gBAAgB,iBAClFE,IAA8BF,MAA+B,WAAW,gBAC3CA,MAA+B,UAAU,eAAe;AAE3F,iBACE,gBAAAzD,EAAC,SAAI,WAAW,GAAG3G,EAAM,WAAW,aAAa,IAAIqK,CAAsB,IACzE,UAAA;AAAA,YAAA,gBAAA1D,EAAC,SAAA,EAAM,WAAW,kCAAkC2D,CAA2B,IAC5E,UAAA;AAAA,cAAAtK,EAAM;AAAA,cACNA,EAAM,YAAY,gBAAAqC,EAAC,QAAA,EAAK,WAAU,eAAc,UAAA,IAAA,CAAC;AAAA,YAAA,GACpD;AAAA,YACCrC,EAAM,YAAY,eACjB,gBAAAqC,EAAC,KAAA,EAAE,WAAW,iCAAiCiI,CAA2B,IACvE,UAAAtK,EAAM,YAAY,YAAA,CACrB;AAAA,YAEF,gBAAAqC;AAAA,cAAC2H;AAAA,cAAA;AAAA,gBACC,YAAYrF,KAAS;AAAA,gBACrB,eAAe,CAACsF,MACdmE,EAAkBpO,EAAM,IAAIiK,CAAO;AAAA,gBAErC,MAAOjK,EAAM,WAAW,QAA+B;AAAA,gBACvD,YAAYA,EAAM,WAAW;AAAA,gBAC7B,OAAOA,EAAM,WAAW;AAAA,gBACxB,QAAQA,EAAM,WAAW;AAAA,gBAC1B,UAAA;AAAA,cAAA;AAAA,YAAA;AAAA,YAGAkP,KAAY,gBAAA7M,EAAC,KAAA,EAAE,WAAW,4BAA4BiI,CAA2B,IAAK,UAAA2E,EAAA,CAAM;AAAA,UAAA,GAC/F;AAAA,QAEJ;AAAA,MAEF,KAAK;AACH,cAAM1E,IAA2BvK,EAAM,YAAY,sBAAsB,QACnEwK,IAAuBD,MAA6B,WAAW,wBACxCA,MAA6B,UAAU,qBAAqB;AAEzF,eACE,gBAAA5D,EAAC,SAAI,WAAW,aAAa3G,EAAM,WAAW,iBAAiB,EAAE,IAC/D,UAAA;AAAA,UAAA,gBAAAqC,EAAC,OAAA,EAAI,WAAWmI,GACd,UAAA,gBAAA7D;AAAA,YAAC8D;AAAA,YAAA;AAAA,cACC,YAAY9F,KAAS;AAAA,cACrB,eAAe,CAACsF,MAAYmE,EAAkBpO,EAAM,IAAIiK,CAAO;AAAA,cAC/D,MAAOjK,EAAM,WAAW,QAA+B;AAAA,cACvD,YAAYA,EAAM,WAAW;AAAA,cAC7B,OAAOA,EAAM,WAAW;AAAA,cAEvB,UAAA;AAAA,gBAAAA,EAAM;AAAA,gBACNA,EAAM,YAAY,gBAAAqC,EAAC,QAAA,EAAK,WAAU,oBAAmB,UAAA,IAAA,CAAC;AAAA,cAAA;AAAA,YAAA;AAAA,UAAA,GAE3D;AAAA,UACCrC,EAAM,YAAY,eACjB,gBAAAqC,EAAC,SAAI,WAAWmI,GACd,UAAA,gBAAAnI,EAAC,KAAA,EAAE,WAAU,4BACV,UAAArC,EAAM,YAAY,aACrB,GACF;AAAA,UAEDkP,KACC,gBAAA7M,EAAC,OAAA,EAAI,WAAWmI,GACd,4BAAC,KAAA,EAAE,WAAU,uBAAuB,UAAAyE,EAAA,CAAM,EAAA,CAC5C;AAAA,QAAA,GAEJ;AAAA,MAGJ,KAAK;AACH,eACE,gBAAA5M;AAAA,UAAC+I;AAAA,UAAA;AAAA,YACC,QAASpL,EAAM,WAAW,gBAAwB;AAAA,YAClD,WAAWA,EAAM,WAAW;AAAA,YAE5B,UAAA,gBAAA2G,EAAC0E,GAAA,EAAS,WAAU,QAClB,UAAA;AAAA,cAAA,gBAAAhJ,EAAC,MAAA,EAAG,WAAU,8BAA8B,UAAArC,EAAM,OAAM;AAAA,cACvDA,EAAM,YAAY,eACjB,gBAAAqC,EAAC,OAAE,WAAU,oBAAoB,UAAArC,EAAM,YAAY,YAAA,CAAY;AAAA,YAAA,EAAA,CAEnE;AAAA,UAAA;AAAA,QAAA;AAAA,MAIN,KAAK;AACH,eACE,gBAAA2G,EAAC,SAAI,WAAW,QAAQ3G,EAAM,WAAW,iBAAiB,EAAE,IAC1D,UAAA;AAAA,UAAA,gBAAAqC,EAAC,MAAA,EAAG,WAAU,4BAA4B,UAAArC,EAAM,OAAM;AAAA,UACrDA,EAAM,YAAY,eACjB,gBAAAqC,EAAC,OAAE,WAAU,oBAAoB,UAAArC,EAAM,YAAY,YAAA,CAAY;AAAA,QAAA,GAEnE;AAAA,MAGJ,KAAK;AACH,eACE,gBAAAqC;AAAA,UAACgG;AAAA,UAAA;AAAA,YAEE,GAAGR;AAAA,YACJ,MAAK;AAAA,YACL,OAAAlD;AAAA,YACA,eAAe,CAAC2D,MAAQ8F,EAAkBpO,EAAM,IAAIsI,CAAG;AAAA,YACvD,WAAWtI,EAAM,WAAW;AAAA,YAC5B,WAAWA,EAAM,WAAW;AAAA,UAAA;AAAA,UANvB,SAASA,EAAM,EAAE;AAAA,QAAA;AAAA,MAU5B,KAAK;AACH,eACE,gBAAAqC;AAAA,UAACgG;AAAA,UAAA;AAAA,YAEE,GAAGR;AAAA,YACJ,MAAK;AAAA,YACL,OAAAlD;AAAA,YACA,eAAe,CAAC2D,MAAQ8F,EAAkBpO,EAAM,IAAIsI,CAAG;AAAA,YACvD,WAAWtI,EAAM,WAAW;AAAA,YAC5B,WAAWA,EAAM,WAAW;AAAA,UAAA;AAAA,UANvB,OAAOA,EAAM,EAAE;AAAA,QAAA;AAAA,MAU1B,KAAK;AACH,eACE,gBAAAqC;AAAA,UAACgG;AAAA,UAAA;AAAA,YAEE,GAAGR;AAAA,YACJ,MAAK;AAAA,YACL,OAAAlD;AAAA,YACA,eAAe,CAAC2D,MAAQ8F,EAAkBpO,EAAM,IAAIsI,CAAG;AAAA,UAAA;AAAA,UAJlD,QAAQtI,EAAM,EAAE;AAAA,QAAA;AAAA,MAQ3B,KAAK;AACH,eACE,gBAAAqC;AAAA,UAACgG;AAAA,UAAA;AAAA,YAEE,GAAGR;AAAA,YACJ,MAAK;AAAA,YACL,OAAAlD;AAAA,YACA,eAAe,CAAC2D,MAAQ8F,EAAkBpO,EAAM,IAAIsI,CAAG;AAAA,UAAA;AAAA,UAJlD,QAAQtI,EAAM,EAAE;AAAA,QAAA;AAAA,MAQ3B,KAAK;AACH,eACE,gBAAAqC;AAAA,UAACgG;AAAA,UAAA;AAAA,YAEE,GAAGR;AAAA,YACJ,MAAK;AAAA,YACL,OAAAlD;AAAA,YACA,eAAe,CAAC2D,MAAQ8F,EAAkBpO,EAAM,IAAIsI,CAAG;AAAA,UAAA;AAAA,UAJlD,YAAYtI,EAAM,EAAE;AAAA,QAAA;AAAA,MAQ/B,KAAK;AACH,eACE,gBAAAqC;AAAA,UAACyG;AAAA,UAAA;AAAA,YACE,GAAGjB;AAAA,YACJ,eAAc;AAAA,YACd,cAAclD,KAAS,CAAA;AAAA,YACvB,mBAAmB,CAACoE,MAAS;AAC3B,oBAAMuG,IAAiB,MAAM,KAAKvG,CAAI;AACtC,cAAAqF,EAAkBpO,EAAM,IAAIsP,CAAc;AAAA,YAC5C;AAAA,YAEC,UAAAtP,EAAM,SAAS,IAAI,CAACiJ,MACnB,gBAAA5G,EAAC6G,GAAA,EAA+B,UAAAD,EAAO,MAAA,GAAtBA,EAAO,KAAqB,CAC9C,KAAK,CAAA;AAAA,UAAC;AAAA,QAAA;AAAA,MAIb,KAAK;AACH,eACE,gBAAAtC,EAAC,SAAI,WAAW,aAAa3G,EAAM,WAAW,iBAAiB,EAAE,IAC/D,UAAA;AAAA,UAAA,gBAAA2G,EAAC,SAAA,EAAM,WAAU,uBACd,UAAA;AAAA,YAAA3G,EAAM;AAAA,YACNA,EAAM,YAAY,gBAAAqC,EAAC,QAAA,EAAK,WAAU,eAAc,UAAA,IAAA,CAAC;AAAA,UAAA,GACpD;AAAA,UACCrC,EAAM,YAAY,eACjB,gBAAAqC,EAAC,OAAE,WAAU,4BACV,UAAArC,EAAM,YAAY,YAAA,CACrB;AAAA,UAEF,gBAAAqC;AAAA,YAACkN;AAAA,YAAA;AAAA,cACC,OAAO5K,KAAS3E,EAAM,WAAW,OAAO;AAAA,cACxC,UAAU,CAACsI,MAA2B;AACpC,sBAAMrB,IAAW,MAAM,QAAQqB,CAAG,IAAIA,EAAI,CAAC,IAAIA;AAC/C,gBAAA8F,EAAkBpO,EAAM,IAAIiH,CAAQ;AAAA,cACtC;AAAA,cACA,UAAUjH,EAAM,WAAW,OAAO;AAAA,cAClC,UAAUA,EAAM,WAAW,OAAO;AAAA,cAClC,MAAMA,EAAM,WAAW,QAAQ;AAAA,cAC/B,WAAU;AAAA,cACV,MAAOA,EAAM,WAAW,QAA+B;AAAA,cACvD,YAAYA,EAAM,WAAW;AAAA,cAC7B,OAAOA,EAAM,WAAW;AAAA,YAAA;AAAA,UAAA;AAAA,UAE1B,gBAAA2G,EAAC,OAAA,EAAI,WAAU,4BAA2B,UAAA;AAAA,YAAA;AAAA,YAChChC,KAAS3E,EAAM,WAAW,OAAO;AAAA,UAAA,GAC3C;AAAA,UACCkP,KAAY,gBAAA7M,EAAC,KAAA,EAAE,WAAU,uBAAuB,UAAA4M,EAAA,CAAM;AAAA,QAAA,GACzD;AAAA,MAGJ,KAAK;AACH,eACE,gBAAAtI,EAAC,SAAI,WAAW,aAAa3G,EAAM,WAAW,iBAAiB,EAAE,IAC/D,UAAA;AAAA,UAAA,gBAAA2G,EAAC,SAAA,EAAM,WAAU,uBACd,UAAA;AAAA,YAAA3G,EAAM;AAAA,YACNA,EAAM,YAAY,gBAAAqC,EAAC,QAAA,EAAK,WAAU,eAAc,UAAA,IAAA,CAAC;AAAA,UAAA,GACpD;AAAA,UACCrC,EAAM,YAAY,eACjB,gBAAAqC,EAAC,OAAE,WAAU,4BACV,UAAArC,EAAM,YAAY,YAAA,CACrB;AAAA,UAEF,gBAAA2G,EAAC,SAAI,WAAW,mHACd3G,EAAM,WAAW,WAAW,kCAAkC,EAChE,IACE,UAAA;AAAA,YAAA,gBAAAqC,EAACqI,GAAA,EAAO,WAAU,wCAAA,CAAwC;AAAA,YAC1D,gBAAArI;AAAA,cAAC;AAAA,cAAA;AAAA,gBACC,MAAK;AAAA,gBACL,QAAQrC,EAAM,WAAW,UAAU;AAAA,gBACnC,UAAUA,EAAM,WAAW;AAAA,gBAC3B,UAAUA,EAAM,WAAW;AAAA,gBAC3B,UAAU,CAAC2K,MAAM;AACf,wBAAMC,IAAQ5K,EAAM,WAAW,WAAW,MAAM,KAAK2K,EAAE,OAAO,SAAS,CAAA,CAAE,IAAIA,EAAE,OAAO,QAAQ,CAAC;AAC/F,kBAAAyD,EAAkBpO,EAAM,IAAI4K,CAAK;AAAA,gBACnC;AAAA,gBACA,WAAU;AAAA,gBACV,IAAI,QAAQ5K,EAAM,EAAE;AAAA,cAAA;AAAA,YAAA;AAAA,YAEtB,gBAAA2G,EAAC,SAAA,EAAM,SAAS,QAAQ3G,EAAM,EAAE,IAAI,WAAW,kBAAkBA,EAAM,WAAW,WAAW,uBAAuB,EAAE,IACpH,UAAA;AAAA,cAAA,gBAAA2G,EAAC,OAAA,EAAI,WAAU,4BAA2B,UAAA;AAAA,gBAAA;AAAA,gBACvB3G,EAAM,WAAW,WAAW,UAAU;AAAA,cAAA,GACzD;AAAA,cACC2E,uBACE,OAAA,EAAI,WAAU,QACZ,UAAA,MAAM,QAAQA,CAAK,IAClB,gBAAAtC,EAAC,OAAA,EAAI,WAAU,wBACZ,UAAAsC,EAAM,IAAI,CAAC6K,GAAWrC,wBACpBsC,GAAA,EAAiB,OAAM,WAAU,MAAK,MAEnC,UAAA,gBAAApN;AAAA,gBAAC;AAAA,gBAAA;AAAA,kBACC,MAAM,IAAI,gBAAgBmN,CAAI;AAAA,kBAC9B,UAAUA,EAAK;AAAA,kBAEf,QAAO;AAAA,kBACP,KAAI;AAAA,kBAEJ,UAAAA,EAAK,QAAQ,QAAQrC,IAAQ,CAAC;AAAA,gBAAA;AAAA,cAAA,EACjC,GAVQA,CAWX,CACD,EAAA,CACH,sBAECsC,GAAA,EAAK,OAAM,WAAU,MAAK,MAExB,UAAA,gBAAApN;AAAA,gBAAC;AAAA,gBAAA;AAAA,kBACC,MAAM,IAAI,gBAAgBsC,CAAK;AAAA,kBAC/B,UAAUA,EAAM;AAAA,kBAEhB,QAAO;AAAA,kBACP,KAAI;AAAA,kBAEJ,YAAM,QAAQ;AAAA,gBAAA;AAAA,cAAA,GAEnB,EAAA,CAEJ;AAAA,YAAA,EAAA,CAEJ;AAAA,UAAA,GACF;AAAA,UACCuK,KAAY,gBAAA7M,EAAC,KAAA,EAAE,WAAU,uBAAuB,UAAA4M,EAAA,CAAM;AAAA,QAAA,GACzD;AAAA,MAGJ,KAAK;AACH,cAAMnE,IAA2B9K,EAAM,YAAY,sBAAsB,QACnE+K,IAAuBD,MAA6B,WAAW,wBACxCA,MAA6B,UAAU,qBAAqB;AAEzF,eACE,gBAAAnE,EAAC,SAAI,WAAW,aAAa3G,EAAM,WAAW,iBAAiB,EAAE,IAC/D,UAAA;AAAA,UAAA,gBAAAqC,EAAC,SAAI,WAAW0I,GACd,UAAA,gBAAApE,EAAC,SAAA,EAAM,WAAU,uBACd,UAAA;AAAA,YAAA3G,EAAM;AAAA,YACNA,EAAM,YAAY,gBAAAqC,EAAC,QAAA,EAAK,WAAU,eAAc,UAAA,IAAA,CAAC;AAAA,UAAA,EAAA,CACpD,EAAA,CACF;AAAA,UACCrC,EAAM,YAAY,eACjB,gBAAAqC,EAAC,SAAI,WAAW0I,GACd,UAAA,gBAAA1I,EAAC,KAAA,EAAE,WAAU,4BACV,UAAArC,EAAM,YAAY,aACrB,GACF;AAAA,4BAED,OAAA,EAAI,WAAW+K,GACd,UAAA,gBAAA1I,EAAC,OAAA,EAAI,WAAU,kBACZ,UAAA,MAAM,KAAK,EAAE,QAAQrC,EAAM,WAAW,OAAO,KAAK,CAACgL,GAAGC,MACrD,gBAAA5I;AAAA,YAAC;AAAA,YAAA;AAAA,cAEC,MAAK;AAAA,cACL,UAAUrC,EAAM,WAAW;AAAA,cAC3B,SAAS,MAAMoO,EAAkBpO,EAAM,IAAIiL,IAAI,CAAC;AAAA,cAChD,WAAW,4CACTjL,EAAM,WAAW,WAAW,kCAAkC,EAChE;AAAA,cAEA,UAAA,gBAAAqC;AAAA,gBAAC8I;AAAA,gBAAA;AAAA,kBACC,WAAW,YACRxG,KAAS,KAAKsG,IACX,oCACA,kBACN;AAAA,gBAAA;AAAA,cAAA;AAAA,YACF;AAAA,YAdKA;AAAA,UAAA,CAgBR,GACH,EAAA,CACF;AAAA,UACCtG,uBACE,OAAA,EAAI,WAAWoG,GACd,UAAA,gBAAApE,EAAC,OAAA,EAAI,WAAU,4BACZ,UAAA;AAAA,YAAAhC;AAAA,YAAM;AAAA,YAAS3E,EAAM,WAAW,OAAO;AAAA,YAAE;AAAA,UAAA,EAAA,CAC5C,EAAA,CACF;AAAA,UAEDkP,KACC,gBAAA7M,EAAC,OAAA,EAAI,WAAW0I,GACd,4BAAC,KAAA,EAAE,WAAU,uBAAuB,UAAAkE,EAAA,CAAM,EAAA,CAC5C;AAAA,QAAA,GAEJ;AAAA,MAGJ,KAAK;AACH,eACE,gBAAAtI,EAAC,SAAI,WAAW,aAAa3G,EAAM,WAAW,iBAAiB,EAAE,IAC/D,UAAA;AAAA,UAAA,gBAAA2G,EAAC,SAAA,EAAM,WAAU,uBACd,UAAA;AAAA,YAAA3G,EAAM;AAAA,YACNA,EAAM,YAAY,gBAAAqC,EAAC,QAAA,EAAK,WAAU,eAAc,UAAA,IAAA,CAAC;AAAA,UAAA,GACpD;AAAA,UACCrC,EAAM,YAAY,eACjB,gBAAAqC,EAAC,OAAE,WAAU,4BACV,UAAArC,EAAM,YAAY,YAAA,CACrB;AAAA,UAEF,gBAAAqC;AAAA,YAACqC;AAAA,YAAA;AAAA,cACC,OAAAC;AAAA,cACA,UAAU,CAAC+K,MAActB,EAAkBpO,EAAM,IAAI0P,CAAS;AAAA,cAC9D,OAAO;AAAA,cACP,QAAQ;AAAA,cACR,WAAU;AAAA,cACV,UAAU1P,EAAM,WAAW;AAAA,YAAA;AAAA,UAAA;AAAA,UAE5BkP,KAAY,gBAAA7M,EAAC,KAAA,EAAE,WAAU,uBAAuB,UAAA4M,EAAA,CAAM;AAAA,QAAA,GACzD;AAAA,MAGJ,KAAK;AACH,iCACG,OAAA,EAAI,WAAU,QACb,UAAA,gBAAA5M,EAACiJ,MAAQ,GACX;AAAA,MAGJ,KAAK;AACH,eACE,gBAAAjJ,EAAC,OAAA,EAAI,WAAU,QACb,UAAA,gBAAAA;AAAA,UAAC;AAAA,UAAA;AAAA,YACC,yBAAyB;AAAA,cACvB,QAAQrC,EAAM,gBAAgB;AAAA,YAAA;AAAA,YAEhC,WAAU;AAAA,UAAA;AAAA,QAAA,GAEd;AAAA,MAGJ,KAAK;AACH,eACE,gBAAAqC;AAAA,UAACuE;AAAA,UAAA;AAAA,YAEC,OAAO5G,EAAM,WAAW;AAAA,YACxB,MAAMA,EAAM,WAAW;AAAA,YACvB,SAASA,EAAM,WAAW;AAAA,YAC1B,QAAQA,EAAM,WAAW;AAAA,YACzB,YAAYA,EAAM,WAAW;AAAA,YAC7B,WAAWA,EAAM,WAAW;AAAA,YAC5B,SAAS,MAAM;AAEb,sBAAQ,IAAI,mBAAmBA,EAAM,KAAK,GAC1CoO,EAAkBpO,EAAM,IAAI,SAAS;AAAA,YACvC;AAAA,YACC,GAAGmP;AAAA,YAEH,UAAAnP,EAAM;AAAA,UAAA;AAAA,UAdF,UAAUA,EAAM,EAAE;AAAA,QAAA;AAAA,MAkB7B;AACE,iCACG,OAAA,EAAI,WAAU,sEACb,UAAA,gBAAA2G,EAAC,KAAA,EAAE,WAAU,oBAAmB,UAAA;AAAA,UAAA;AAAA,UACL3G,EAAM;AAAA,QAAA,EAAA,CACjC,EAAA,CACF;AAAA,IAAA;AAAA,EAGR;AAEA;AAAA;AAAA,IAEE,gBAAAqC,EAAC,OAAA,EAAI,WAAW,eAAe+B,CAAS,IACtC,UAAA,gBAAAuC,EAACyE,GAAA,EAAK,QAAO,MAAK,WAAU,OAC1B,UAAA;AAAA,MAAA,gBAAA/I,EAACsN,GAAA,EACC,4BAAC,OAAA,EACC,UAAA;AAAA,QAAA,gBAAAtN,EAAC,MAAA,EAAG,WAAU,sBAAsB,UAAAyL,EAAW,SAAS,OAAM;AAAA,QAC7DA,EAAW,SAAS,eACnB,gBAAAzL,EAAC,OAAE,WAAU,yBACV,UAAAyL,EAAW,SAAS,YAAA,CACvB;AAAA,MAAA,EAAA,CAEJ,EAAA,CACF;AAAA,wBACCzC,GAAA,EACC,UAAA,gBAAA1E,EAAC,UAAK,UAAUgI,GAAc,WAAU,aAErC,UAAA;AAAA,QAAAb,EAAW,OAAO,KAAK,IAAI,CAACJ,MAC3B,gBAAArL,EAAC,OAAA,EAAiB,WAAU,2BACzB,UAAAqL,EAAI,OAAO,IAAI,CAACY,MAAY;AAC3B,gBAAMtO,IAAQ8N,EAAW,SAASQ,CAAO,GAiBnCsB,KAduB,MAAM;AACjC,kBAAM1L,IAAU,CAAA;AAChB,mBAAIlE,EAAM,WAAW,gBACnBkE,EAAQ,KAAK,iBAAiB,GAE5BlE,EAAM,WAAW,gBACnBkE,EAAQ,KAAK,oBAAoB,GAE/BlE,EAAM,WAAW,iBACnBkE,EAAQ,KAAK,WAAW,GAEnBA,EAAQ,KAAK,GAAG;AAAA,UACzB,GAE0B;AAE1B,iBACE,gBAAA7B;AAAA,YAAC;AAAA,YAAA;AAAA,cAEC,WAAW,GAAGrC,EAAM,OAAO,SAAS,IAAI4P,CAAiB;AAAA,cAExD,YAAY5P,CAAK;AAAA,YAAA;AAAA,YAHbsO;AAAA,UAAA;AAAA,QAMX,CAAC,EAAA,GA7BOZ,EAAI,EA8Bd,CACD;AAAA,QAGD,gBAAArL,EAAC,OAAA,EAAI,WAAU,iDACb,UAAA,gBAAAA;AAAA,UAACuE;AAAA,UAAA;AAAA,YACC,QAAO;AAAA,YACP,MAAK;AAAA,YACL,OAAM;AAAA,YACN,MAAK;AAAA,YACL,WAAU;AAAA,YAET,YAAW,SAAS;AAAA,UAAA;AAAA,QAAA,EACvB,CACF;AAAA,MAAA,EAAA,CACF,EAAA,CACF;AAAA,IAAA,EAAA,CACF,EAAA,CACF;AAAA;AAEJ;ACpzBO,SAASiJ,GAAuBvO,GAAkC;AACvE,QAAM0L,IAAOD,GAAoBzL,EAAK,MAAM,GACtCwO,KAAM,oBAAI,KAAA,GAAO,YAAA,GAGjBC,IAAkBzO,EAAK,OAAO,IAAI,CAACtB,GAAOmN,MAAU;AACxD,QAAInN,EAAM,QAAQA,EAAM,KAAK;AAC3B,aAAOA;AAIT,UAAME,IAAWF,EAAM,KAAK,QAAQ,SAAS,GAAG,EAAE,YAAA,GAC5CG,IAAgBmB,EAAK,OACxB,MAAM,GAAG6L,CAAK,EACd,IAAI,CAAA/M,MAAKA,EAAE,IAAI,EACf,OAAO,OAAO;AAEjB,QAAIE,IAAaJ;AACjB,QAAIC,EAAc,SAASD,CAAQ,GAAG;AACpC,UAAIG,IAAU;AAEd,WADAC,IAAa,GAAGJ,CAAQ,GAAGG,CAAO,IAC3BF,EAAc,SAASG,CAAU;AACtC,QAAAD,KACAC,IAAa,GAAGJ,CAAQ,GAAGG,CAAO;AAAA,IAEtC;AAEA,WAAO;AAAA,MACL,GAAGL;AAAA,MACH,MAAMM;AAAA,IAAA;AAAA,EAEV,CAAC,GAGK0P,IAA8BhD,EAAK,IAAI,CAAAU,OAAQ;AAAA,IACnD,IAAIA,EAAI;AAAA,IACR,QAAQA,EAAI,OAAO,IAAI,CAAA1N,MAASA,EAAM,EAAE;AAAA,IACxC,SAAS0N,EAAI,OAAO,OAAO,CAACuC,GAAOjQ,MAAUiQ,IAAQ5C,GAAarN,CAAK,GAAG,CAAC;AAAA,EAAA,EAC3E,GAGIkQ,IAAkCH,EAAgB,IAAI,CAAA/P,MAAS;AACnE,UAAMwN,IAAOH,GAAarN,CAAK,GACzBmQ,IAAQnD,EAAK,KAAK,CAAAU,MAAOA,EAAI,OAAO,KAAK,CAAAtN,MAAKA,EAAE,OAAOJ,EAAM,EAAE,CAAC,GAAG,MAAM;AAE/E,WAAO;AAAA,MACL,IAAIA,EAAM;AAAA,MACV,MAAMA,EAAM;AAAA,MACZ,OAAOA,EAAM;AAAA,MACb,MAAMA,EAAM;AAAA,MACZ,aAAaA,EAAM;AAAA,MACnB,UAAUA,EAAM;AAAA,MAChB,cAAcA,EAAM;AAAA,MACpB,YAAYA,EAAM;AAAA,MAClB,SAASA,EAAM;AAAA,MACf,YAAY;AAAA,QACV,UAAUA,EAAM,YAAY;AAAA,QAC5B,aAAaA,EAAM,YAAY;AAAA,QAC/B,eAAeA,EAAM,YAAY,iBAAiBA,EAAM,QAAQ,YAAY,KAAK,GAAG,KAAK;AAAA,QACzF,YAAYA,EAAM,YAAY;AAAA,QAC9B,OAAOA,EAAM,YAAY,SAAS;AAAA,QAClC,MAAMA,EAAM,YAAY;AAAA,QACxB,UAAUA,EAAM,YAAY;AAAA,QAC5B,QAAQA,EAAM,YAAY;AAAA,QAC1B,KAAKA,EAAM,YAAY;AAAA,QACvB,KAAKA,EAAM,YAAY;AAAA,QACvB,MAAMA,EAAM,YAAY;AAAA,QACxB,aAAaA,EAAM,YAAY;AAAA,QAC/B,MAAMA,EAAM,YAAY;AAAA,QACxB,UAAUA,EAAM,UAAU,YAAYA,EAAM,YAAY;AAAA,QACxD,UAAUA,EAAM,UAAU,YAAYA,EAAM,YAAY;AAAA,QACxD,QAAQA,EAAM,UAAU,UAAUA,EAAM,YAAY;AAAA,QACpD,cAAcA,EAAM,YAAY;AAAA,QAChC,cAAcA,EAAM,YAAY;AAAA,QAChC,SAASA,EAAM,YAAY;AAAA,QAC3B,oBAAoBA,EAAM,YAAY;AAAA,QACtC,WAAWA,EAAM,YAAY;AAAA,QAC7B,WAAWA,EAAM,YAAY;AAAA;AAAA,QAE7B,WAAWA,EAAM,YAAY;AAAA,QAC7B,cAAcA,EAAM,YAAY;AAAA,QAChC,SAASA,EAAM,YAAY;AAAA,QAC3B,WAAWA,EAAM,YAAY;AAAA,QAC7B,aAAaA,EAAM,YAAY;AAAA,QAC/B,oBAAoBA,EAAM,YAAY;AAAA;AAAA,QAEtC,cAAcA,EAAM,YAAY;AAAA,QAChC,cAAcA,EAAM,YAAY;AAAA,QAChC,eAAeA,EAAM,YAAY;AAAA;AAAA,QAEjC,gBAAgBA,EAAM,YAAY;AAAA,QAClC,WAAWA,EAAM,YAAY;AAAA,QAC7B,UAAUA,EAAM,YAAY;AAAA,MAAA;AAAA,MAE9B,QAAQ;AAAA,QACN,YAAYA,EAAM,cAAcwN;AAAA,QAChC,OAAA2C;AAAA,QACA,WAAW5C,GAAiBvN,EAAM,cAAcwN,CAAI;AAAA,MAAA;AAAA,MAEtD,kBAAkBxN,EAAM;AAAA,IAAA;AAAA,EAE5B,CAAC,GAGKoQ,IAA4C,CAAA;AAClD,EAAAF,EAAa,QAAQ,CAAAlQ,MAAS;AAC5B,IAAAoQ,EAASpQ,EAAM,EAAE,IAAIA;AAAA,EACvB,CAAC;AAGD,QAAMqQ,IAAiBH,EAAa,OAAO,CAAAlQ,MAASA,EAAM,QAAQ,EAAE,IAAI,CAAAA,MAASA,EAAM,EAAE,GACnFsQ,IAAuBJ,EAC1B,OAAO,CAAAlQ,MAASA,EAAM,cAAcA,EAAM,WAAW,SAAS,CAAC,EAC/D,IAAI,CAAAA,MAASA,EAAM,EAAE;AAExB,SAAO;AAAA,IACL,UAAU;AAAA,MACR,IAAIsB,EAAK;AAAA,MACT,OAAOA,EAAK;AAAA,MACZ,aAAaA,EAAK;AAAA,MAClB,SAAS;AAAA,MACT,WAAWA,EAAK;AAAA;AAAA,MAChB,YAAYwO;AAAA,MACZ,gBAAgB;AAAA,IAAA;AAAA,IAElB,UAAUxO,EAAK;AAAA,IACf,QAAQ;AAAA,MACN,MAAM0O;AAAA,MACN,aAAaE,EAAa;AAAA,IAAA;AAAA,IAE5B,QAAQA;AAAA,IACR,UAAAE;AAAA,IACA,YAAY;AAAA,MACV,gBAAAC;AAAA,MACA,sBAAAC;AAAA,IAAA;AAAA,EACF;AAEJ;AAEA,SAAS/C,GAAiBC,GAAsB;AAgB9C,SAf4C;AAAA,IAC1C,GAAG;AAAA,IACH,GAAG;AAAA,IACH,GAAG;AAAA,IACH,GAAG;AAAA,IACH,GAAG;AAAA,IACH,GAAG;AAAA,IACH,GAAG;AAAA,IACH,GAAG;AAAA,IACH,GAAG;AAAA,IACH,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI;AAAA,EAAA,EAGaA,CAAI,KAAK;AAC9B;AAEO,SAAS+C,GAAmBjP,GAAkBkP,GAAmB;AACtE,QAAMC,IAAaZ,GAAuBvO,CAAI,GACxCoP,IAAa,KAAK,UAAUD,GAAY,MAAM,CAAC,GAE/CE,IAAO,IAAI,KAAK,CAACD,CAAU,GAAG,EAAE,MAAM,oBAAoB,GAC1DE,IAAM,IAAI,gBAAgBD,CAAI,GAC9BE,IAAO,SAAS,cAAc,GAAG;AACvC,EAAAA,EAAK,OAAOD,GACZC,EAAK,WAAuB,GAAGvP,EAAK,MAAM,QAAQ,QAAQ,GAAG,CAAC,qBAC9DuP,EAAK,MAAA,GACL,IAAI,gBAAgBD,CAAG;AACzB;ACrQO,SAASE,KAAa;AAC3B,QAAM,EAAE,OAAApQ,GAAO,SAAAW,EAAA,IAAYiB,EAAA,GACrB,EAAE,aAAAyO,GAAa,aAAAC,EAAA,IAAgBtQ,GAG/B,CAACqO,GAAgBkC,CAAiB,IAAI7L,EAAqC,IAAI,GAC/E;AAAA,IACJ,QAAQ8L;AAAA,IACR,QAAQC;AAAA,IACR,cAAcC;AAAA,EAAA,IACZC,EAAA,GAEE,EAAE,YAAAxF,GAAY,QAAAyF,EAAA,IAAWC,GAAa;AAAA,IAC1C,IAAI;AAAA,EAAA,CACL,GAEKC,IAAiB,MAAM;AAC3B,UAAMC,IAAWhP,EAAgB,MAAM;AACvC,IAAApB,EAAQ,SAASoQ,CAAQ;AAAA,EAC3B,GAEMC,IAAsB,CAACC,MAA8B;AACzD,IAAAV,EAAkBU,CAAI,GACtBR,EAAA;AAAA,EACF;AAEA,SAAIJ,EAAY,OAAO,WAAW,IAE9B,gBAAA1O;AAAA,IAAC;AAAA,IAAA;AAAA,MACC,KAAKwJ;AAAA,MACL,WAAW,qBACTyF,IAAS,kBAAkB,eAC7B;AAAA,MAEA,UAAA,gBAAAjP;AAAA,QAAC+I;AAAA,QAAA;AAAA,UACC,QAAO;AAAA,UACP,WAAU;AAAA,UAEV,UAAA,gBAAAzE,EAAC0E,GAAA,EAAS,WAAU,yDAClB,UAAA;AAAA,YAAA,gBAAAhJ,EAACuP,IAAA,EAAK,WAAU,qDAAA,CAAqD;AAAA,YACrE,gBAAAvP,EAAC,MAAA,EAAG,WAAU,yCAAwC,UAAA,4BAEtD;AAAA,YACA,gBAAAA,EAAC,KAAA,EAAE,WAAU,yEAAwE,UAAA,oFAGrF;AAAA,YACA,gBAAAA;AAAA,cAACuE;AAAA,cAAA;AAAA,gBACC,OAAM;AAAA,gBACN,MAAK;AAAA,gBACL,QAAO;AAAA,gBACP,gCAAegL,IAAA,EAAK;AAAA,gBACpB,SAASJ;AAAA,gBACV,UAAA;AAAA,cAAA;AAAA,YAAA;AAAA,UAED,EAAA,CACF;AAAA,QAAA;AAAA,MAAA;AAAA,IACF;AAAA,EAAA,IAMJ,gBAAA7K;AAAA,IAAC;AAAA,IAAA;AAAA,MACC,KAAKkF;AAAA,MACL,WAAW,qCACTyF,IAAS,kBAAkB,eAC7B;AAAA,MAEA,UAAA;AAAA,QAAA,gBAAA3K,EAAC,SAAI,WAAW,UAAUqK,IAAc,sEAAsE,EAAE,IAE9G,UAAA;AAAA,UAAA,gBAAA3O,EAAC,OAAA,EAAI,WAAU,6BACZ,UAAA2O,2BACC,IAEA,gBAAArK,EAAC,OAAA,EAAI,WAAU,qGACb,UAAA;AAAA,YAAA,gBAAAtE,EAAC,MAAA,EAAG,WAAU,kEAAiE,UAAA,oBAAgB;AAAA,YAC/F,gBAAAA;AAAA,cAACgG;AAAA,cAAA;AAAA,gBACC,OAAM;AAAA,gBACN,aAAY;AAAA,gBACZ,OAAO0I,EAAY;AAAA,gBACnB,UAAU,CAACpG,MAAMtJ,EAAQ,eAAe,EAAE,OAAOsJ,EAAE,OAAO,OAAO;AAAA,gBACjE,MAAK;AAAA,gBACL,WAAU;AAAA,cAAA;AAAA,YAAA;AAAA,YAEZ,gBAAAtI;AAAA,cAACwG;AAAA,cAAA;AAAA,gBACC,OAAM;AAAA,gBACN,aAAY;AAAA,gBACZ,OAAOkI,EAAY,eAAe;AAAA,gBAClC,UAAU,CAACpG,MAAMtJ,EAAQ,eAAe,EAAE,aAAasJ,EAAE,OAAO,OAAO;AAAA,gBACvE,MAAK;AAAA,gBACL,MAAM;AAAA,gBACN,WAAU;AAAA,cAAA;AAAA,YAAA;AAAA,UACZ,EAAA,CACF,EAAA,CAEJ;AAAA,UAGCqG;AAAA;AAAA,YAEC,gBAAA3O;AAAA,cAACwL;AAAA,cAAA;AAAA,gBACC,YAAYgC,GAAuBkB,CAAW;AAAA,gBAC9C,UAAUW;AAAA,cAAA;AAAA,YAAA;AAAA,cAGZ,gBAAA/K,EAAAiC,GAAA,EACE,UAAA;AAAA,YAAA,gBAAAvG;AAAA,cAACwP;AAAA,cAAA;AAAA,gBACC,OAAOd,EAAY,OAAO,IAAI,CAAC/Q,MAAUA,EAAM,EAAE;AAAA,gBACjD,UAAU8R;AAAA,gBAEV,4BAAC,OAAA,EAAI,WAAU,0BACZ,UAAA/E,GAAoBgE,EAAY,MAAM,EAAE,IAAI,CAACrD,MAC5C,gBAAArL,EAACoL,MAA6B,KAAAC,GAAU,WAAW,MAA7BA,EAAI,EAAgC,CAC3D,EAAA,CACH;AAAA,cAAA;AAAA,YAAA;AAAA,YAIF,gBAAArL,EAAC,OAAA,EAAI,WAAU,mFACb,UAAA,gBAAAA;AAAA,cAACuE;AAAA,cAAA;AAAA,gBACC,QAAO;AAAA,gBACP,OAAM;AAAA,gBACN,MAAK;AAAA,gBACL,UAAU;AAAA,gBACV,WAAU;AAAA,gBAET,YAAY,SAAS;AAAA,cAAA;AAAA,YAAA,GAE1B;AAAA,YAGA,gBAAAvE,EAAC,OAAA,EAAI,WAAU,6BACb,UAAA,gBAAAsE;AAAA,cAACC;AAAA,cAAA;AAAA,gBACC,QAAO;AAAA,gBACP,SAAQ;AAAA,gBACR,gCAAegL,IAAA,EAAK;AAAA,gBACpB,SAASJ;AAAA,gBACT,WAAU;AAAA,gBACV,MAAK;AAAA,gBAEL,UAAA;AAAA,kBAAA,gBAAAnP,EAAC,QAAA,EAAK,WAAU,oBAAmB,UAAA,aAAS;AAAA,kBAC5C,gBAAAA,EAAC,QAAA,EAAK,WAAU,aAAY,UAAA,MAAA,CAAG;AAAA,gBAAA;AAAA,cAAA;AAAA,YAAA,EACjC,CACF;AAAA,UAAA,EAAA,CACF;AAAA,QAAA,GAEJ;AAAA,QAGA,gBAAAA;AAAA,UAAC0P;AAAA,UAAA;AAAA,YACC,QAAQb;AAAA,YACR,cAAcE;AAAA,YACd,MAAK;AAAA,YAEL,UAAA,gBAAA/O,EAAC2P,IAAA,EACE,UAAA,CAACC,MACA,gBAAAtL,EAAAiC,GAAA,EACE,UAAA;AAAA,cAAA,gBAAAvG,EAAC6P,MAAY,UAAA,0BAAA,CAAuB;AAAA,cACpC,gBAAA7P,EAAC8P,IAAA,EACC,UAAA,gBAAAxL,EAAC,OAAA,EAAI,WAAU,aACb,UAAA;AAAA,gBAAA,gBAAAA,EAAC,OAAA,EAAI,WAAU,wCACb,UAAA;AAAA,kBAAA,gBAAAtE,EAACyE,IAAA,EAAM,WAAU,UAAA,CAAU;AAAA,kBAC3B,gBAAAzE,EAAC,QAAA,EAAK,WAAU,eAAc,UAAA,+CAAA,CAE9B;AAAA,gBAAA,GACF;AAAA,kCACCiJ,IAAA,EAAQ;AAAA,kCACR,OAAA,EACC,UAAA;AAAA,kBAAA,gBAAAjJ,EAAC,MAAA,EAAG,WAAU,sBAAqB,UAAA,mBAAe;AAAA,kBAClD,gBAAAA,EAAC,OAAA,EAAI,WAAU,gCACb,4BAAC,OAAA,EAAI,WAAU,6CACZ,UAAA,KAAK,UAAU0M,GAAgB,MAAM,CAAC,GACzC,EAAA,CACF;AAAA,gBAAA,GACF;AAAA,gBACA,gBAAApI,EAAC,OAAA,EAAI,WAAU,4BACb,UAAA;AAAA,kBAAA,gBAAAtE,EAAC,YAAO,UAAA,gBAAA,CAAa;AAAA,kBAAS;AAAA,gBAAA,EAAA,CAEhC;AAAA,cAAA,EAAA,CACF,EAAA,CACF;AAAA,gCACC+P,IAAA,EACC,UAAA;AAAA,gBAAA,gBAAA/P;AAAA,kBAACuE;AAAA,kBAAA;AAAA,oBACC,OAAM;AAAA,oBACN,SAAQ;AAAA,oBACR,SAAS,YAAY;AACnB,sBAAImI,KACF,MAAM,UAAU,UAAU;AAAA,wBACxB,KAAK,UAAUA,GAAgB,MAAM,CAAC;AAAA,sBAAA;AAAA,oBAG5C;AAAA,oBACD,UAAA;AAAA,kBAAA;AAAA,gBAAA;AAAA,kCAGAnI,GAAA,EAAO,OAAM,WAAU,SAASqL,GAAS,UAAA,QAAA,CAE1C;AAAA,cAAA,EAAA,CACF;AAAA,YAAA,EAAA,CACF,EAAA,CAEJ;AAAA,UAAA;AAAA,QAAA;AAAA,MACF;AAAA,IAAA;AAAA,EAAA;AAGN;ACtNA,SAASI,GAAe;AAAA,EACtB,IAAA9Q;AAAA,EACA,MAAAmB;AAAA,EACA,OAAA4P;AAAA,EACA,MAAAC;AAAA,EACA,UAAAC;AACF,GAAwB;AACtB,QAAM,EAAE,UAAAC,EAAA,IAAanQ,EAAA,EAAiB,SAChCoQ,IAAeF,MAAa,YAAYA,MAAa,aAErD,EAAE,YAAA7G,GAAY,WAAAC,GAAW,YAAAC,GAAY,WAAAC,GAAW,YAAAE,EAAA,IACpD2G,GAAa;AAAA,IACX,IAAApR;AAAA,IACA,UAAUmR;AAAA;AAAA,EAAA,CACX,GAEGxG,IAAQJ,IACV;AAAA,IACE,WAAW,eAAeA,EAAU,CAAC,OAAOA,EAAU,CAAC;AAAA,EAAA,IAEzD,QAEE8G,IAAiBC,GAAoBN,CAAI,KAAKM,GAAY;AAUhE,SACE,gBAAAxQ;AAAA,IAAC;AAAA,IAAA;AAAA,MACC,KAAKwJ;AAAA,MACL,OAAAK;AAAA,MACC,GAAKwG,IAA2B,CAAA,IAAZ9G;AAAA,MACpB,GAAK8G,IAA4B,CAAA,IAAb/G;AAAA,MACrB,WAAW,GACR+G,IAEG,uBADA,oCAEN,IAAI1G,IAAa,eAAe,EAAE;AAAA,MAElC,UAAA,gBAAArF;AAAA,QAACC;AAAA,QAAA;AAAA,UACC,MAAK;AAAA,UACL,QAAO;AAAA,UACP,SAAQ;AAAA,UACR,WAAW,0CACV8L,IACG,kBACA,mDACJ;AAAA,UACA,SA7Bc,MAAM;AACxB,gBAAIA;AACF;AAEF,kBAAMjB,IAAWhP,EAAgBC,CAAI;AACrC,YAAA+P,EAAShB,CAAQ;AAAA,UACnB;AAAA,UAwBM,YAAYiB;AAAA,UAEZ,UAAA;AAAA,YAAA,gBAAA/L,EAAC,OAAA,EAAI,WAAU,yFACb,UAAA;AAAA,cAAA,gBAAAtE,EAACuQ,GAAA,EAAc,MAAM,IAAI,WAAU,iBAAgB;AAAA,cACnD,gBAAAvQ,EAAC,QAAA,EAAK,WAAU,4BAA4B,UAAAiQ,EAAA,CAAM;AAAA,YAAA,GACpD;AAAA,YACCI,KACC,gBAAArQ,EAAC,OAAA,EAAI,WAAU,gEACb,UAAA,gBAAAA;AAAA,cAACoN;AAAA,cAAA;AAAA,gBACC,MAAK;AAAA,gBACL,OAAM;AAAA,gBACN,SAAQ;AAAA,gBACR,WAAU;AAAA,gBACX,UAAA;AAAA,cAAA;AAAA,YAAA,EAED,CACF;AAAA,UAAA;AAAA,QAAA;AAAA,MAAA;AAAA,IAEJ;AAAA,EAAA;AAGN;AAEO,SAASqD,KAAe;AAC7B,QAAM,CAACC,GAAYC,CAAa,IAAI5N,EAAS,EAAE,GAEzC6N,IAAgBjQ,GAAW;AAAA,IAAO,CAACkQ,MACvCA,EAAK,MAAM,cAAc,SAASH,EAAW,YAAA,CAAa;AAAA,EAAA,GAGtDI,IAAelQ,GAAiB,IAAI,CAACuP,OAAc;AAAA,IACvD,GAAGA;AAAA,IACH,OAAOS,EAAc,OAAO,CAACC,MAASA,EAAK,aAAaV,EAAS,EAAE;AAAA,EAAA,EACnE,EAAE,OAAO,CAACA,MAAaA,EAAS,MAAM,SAAS,CAAC;AAElD,SACE,gBAAA7L,EAAC,OAAA,EAAI,WAAU,sFACb,UAAA;AAAA,IAAA,gBAAAA,EAAC,OAAA,EAAI,WAAU,sCACb,UAAA;AAAA,MAAA,gBAAAtE,EAAC,MAAA,EAAG,WAAU,yDAAwD,UAAA,iBAEtE;AAAA,MACA,gBAAAA,EAAC,MAAA,EAAG,WAAU,wCAAuC,UAAA,YAAQ;AAAA,MAC7D,gBAAAA;AAAA,QAACgG;AAAA,QAAA;AAAA,UACC,QAAO;AAAA,UACP,MAAK;AAAA,UACL,aAAY;AAAA,UACZ,OAAO0K;AAAA,UACP,UAAU,CAACpI,MAAMqI,EAAcrI,EAAE,OAAO,KAAK;AAAA,UAC7C,MAAK;AAAA,UACL,WAAU;AAAA,QAAA;AAAA,MAAA;AAAA,IACZ,GACF;AAAA,IAEA,gBAAAtI,EAAC,OAAA,EAAI,WAAU,cACb,UAAA,gBAAAA;AAAA,MAAC+Q;AAAA,MAAA;AAAA,QACC,WAAS;AAAA,QACT,SAAQ;AAAA,QACR,eAAc;AAAA,QACd,qBAAqB,CAAC,SAAS,SAAS;AAAA,QAEvC,UAAAD,EAAa,IAAI,CAACX,MAEf,gBAAAnQ;AAAA,UAACgR;AAAA,UAAA;AAAA,YAEC,cAAYb,EAAS;AAAA,YACrB,OACE,gBAAA7L,EAAC,OAAA,EAAI,WAAU,oCACb,UAAA;AAAA,cAAA,gBAAAtE,EAAC,QAAA,EAAK,WAAU,6BACb,UAAAmQ,EAAS,OACZ;AAAA,cACA,gBAAAnQ,EAAC,UAAK,WAAU,qBACb,YAAS,MAAM,OAAO,CAAC,GAC1B;AAAA,cACA,gBAAAsE,EAAC,QAAA,EAAK,WAAU,mCAAkC,UAAA;AAAA,gBAAA;AAAA,gBAC9C6L,EAAS,MAAM;AAAA,gBAAO;AAAA,cAAA,EAAA,CAC1B;AAAA,YAAA,GACF;AAAA,YAGF,UAAA,gBAAAnQ,EAAC,SAAI,WAAU,+BACZ,YAAS,MAAM,IAAI,CAAC6Q,MACnB,gBAAA7Q;AAAA,cAACgQ;AAAA,cAAA;AAAA,gBAEC,IAAIa,EAAK;AAAA,gBACT,MAAMA,EAAK;AAAA,gBACX,OAAOA,EAAK;AAAA,gBACZ,MAAMA,EAAK;AAAA,gBACX,UAAUA,EAAK;AAAA,cAAA;AAAA,cALVA,EAAK;AAAA,YAAA,CAOb,EAAA,CACH;AAAA,UAAA;AAAA,UA3BKV,EAAS;AAAA,QAAA,CA8BnB;AAAA,MAAA;AAAA,IAAA,EACH,CACF;AAAA,EAAA,GACF;AAEJ;AC3JO,SAASc,KAAkB;AAChC,QAAM,EAAE,OAAA5S,EAAA,IAAU4B,EAAA,GACZ,EAAE,iBAAAoJ,GAAiB,aAAAqF,EAAA,IAAgBrQ,GAEnC6S,IAAgBxC,EAAY,OAAO;AAAA,IACvC,CAAC/Q,MAAUA,EAAM,OAAO0L;AAAA,EAAA;AAG1B,SAAK6H,sBAsBF,OAAA,EAAI,WAAU,uEACb,UAAA,gBAAA5M,EAAC,OAAA,EAAI,WAAU,OACb,UAAA;AAAA,IAAA,gBAAAtE,EAAC,MAAA,EAAG,WAAU,8BAA6B,UAAA,cAAU;AAAA,sBAEpDmR,IAAA,EAAK,cAAW,cAAa,SAAQ,cAAa,MAAK,MACtD,UAAA;AAAA,MAAA,gBAAAnR,EAACoR,GAAA,EAAgB,OAAM,SACrB,UAAA,gBAAApR,EAACqR,MAAwB,OAAOH,GAAe,KADxC,OAET;AAAA,MACA,gBAAAlR,EAACoR,KAAiB,OAAM,UACtB,4BAACE,IAAA,EAAyB,OAAOJ,GAAe,EAAA,GADzC,QAET;AAAA,MACA,gBAAAlR,EAACoR,KAAiB,OAAM,UACtB,4BAACG,IAAA,EAAyB,OAAOL,EAAA,CAAe,EAAA,GADzC,QAET;AAAA,IAAA,EAAA,CACF;AAAA,EAAA,EAAA,CACF,EAAA,CACF,IApCE,gBAAAlR,EAAC,OAAA,EAAI,WAAU,+EACb,UAAA,gBAAAA,EAAC+I,GAAA,EAAK,QAAO,MAAK,WAAU,iBAC1B,UAAA,gBAAAzE,EAAC0E,GAAA,EAAS,WAAU,4BAClB,UAAA;AAAA,IAAA,gBAAAhJ,EAACwR,IAAA,EAAS,WAAU,4DAAA,CAA4D;AAAA,IAChF,gBAAAxR,EAAC,MAAA,EAAG,WAAU,8CAA6C,UAAA,qBAE3D;AAAA,IACA,gBAAAA,EAAC,MAAA,EAAG,WAAU,wCAAuC,UAAA,gBAErD;AAAA,IACA,gBAAAA,EAAC,KAAA,EAAE,WAAU,4CAA2C,UAAA,oCAAA,CAExD;AAAA,EAAA,EAAA,CACF,GACF,GACF;AAuBN;AAEA,SAASyR,GAAgB,EAAE,OAAA9T,KAA+B;AACxD,QAAM,EAAE,SAAAqB,EAAA,IAAYiB,EAAA,GAEdyR,IAAc,CAACvS,MAAgC;AACnD,IAAAH,EAAQ,YAAYrB,EAAM,IAAIwB,CAAO;AAAA,EACvC,GAEMwS,IAAmB,CAACxS,MAAiB;AACzC,IAAAH,EAAQ,sBAAsBrB,EAAM,IAAIwB,CAAO;AAAA,EACjD,GAEMyS,IAAiB,CAACzS,MAA4C;AAClE,IAAAH,EAAQ,oBAAoBrB,EAAM,IAAIwB,CAAO;AAAA,EAC/C;AAEA,SACE,gBAAAmF,EAAC,OAAA,EAAI,WAAU,kBACb,UAAA;AAAA,IAAA,gBAAAtE;AAAA,MAACgG;AAAA,MAAA;AAAA,QAEC,OAAM;AAAA,QACN,OAAOrI,EAAM;AAAA,QACb,eAAe,CAAC2E,MAAUoP,EAAY,EAAE,OAAOpP,GAAO;AAAA,QACtD,MAAK;AAAA,MAAA;AAAA,MAJA,SAAS3E,EAAM,EAAE;AAAA,IAAA;AAAA,IAOxB,gBAAAqC;AAAA,MAACgG;AAAA,MAAA;AAAA,QAEC,OAAM;AAAA,QACN,aAAY;AAAA,QACZ,OAAOrI,EAAM,QAAQ;AAAA,QACrB,eAAe,CAAC2E,MAAUoP,EAAY,EAAE,MAAMpP,GAAO;AAAA,QACrD,MAAK;AAAA,QACL,aAAY;AAAA,MAAA;AAAA,MANP,QAAQ3E,EAAM,EAAE;AAAA,IAAA;AAAA,IAStBA,EAAM,SAAS,aAAaA,EAAM,SAAS,eAC1C,gBAAAqC;AAAA,MAACgG;AAAA,MAAA;AAAA,QAEC,OAAM;AAAA,QACN,OAAOrI,EAAM,eAAe;AAAA,QAC5B,eAAe,CAAC2E,MAAUoP,EAAY,EAAE,aAAapP,GAAO;AAAA,QAC5D,MAAK;AAAA,MAAA;AAAA,MAJA,eAAe3E,EAAM,EAAE;AAAA,IAAA;AAAA,IAS/BA,EAAM,SAAS,aAAaA,EAAM,SAAS,eAC1C,gBAAAqC;AAAA,MAACgG;AAAA,MAAA;AAAA,QAEC,OAAM;AAAA,QACN,aAAY;AAAA,QACZ,OAAOrI,EAAM,YAAY,eAAe;AAAA,QACxC,eAAe,CAAC2E,MAAUqP,EAAiB,EAAE,aAAarP,GAAO;AAAA,QACjE,MAAK;AAAA,QACL,aAAY;AAAA,MAAA;AAAA,MANP,eAAe3E,EAAM,EAAE;AAAA,IAAA;AAAA,KAW9BA,EAAM,SAAS,UACfA,EAAM,SAAS,WACfA,EAAM,SAAS,cACfA,EAAM,SAAS,YACfA,EAAM,SAAS,WACfA,EAAM,SAAS,SACfA,EAAM,SAAS,UACfA,EAAM,SAAS,UACfA,EAAM,SAAS,cACfA,EAAM,SAAS,cACfA,EAAM,SAAS,cACfA,EAAM,SAAS,YACfA,EAAM,SAAS,iBACfA,EAAM,SAAS,kBACfA,EAAM,SAAS,YACfA,EAAM,SAAS,UACfA,EAAM,SAAS,YACfA,EAAM,SAAS,WACfA,EAAM,SAAS,eACfA,EAAM,SAAS,mBACfA,EAAM,SAAS,qBACf,gBAAA2G,EAAC,OAAA,EAAI,WAAU,0CACb,UAAA;AAAA,MAAA,gBAAAtE,EAAC,MAAA,EAAG,WAAU,wCAAuC,UAAA,eAAW;AAAA,MAEhE,gBAAAsE,EAAC,OAAA,EAAI,WAAU,uBACb,UAAA;AAAA,QAAA,gBAAAtE;AAAA,UAACoI;AAAA,UAAA;AAAA,YAEC,YAAYzK,EAAM;AAAA,YAClB,eAAe,CAACiK,MAAY8J,EAAY,EAAE,UAAU9J,GAAS;AAAA,YAC7D,MAAK;AAAA,YACN,UAAA;AAAA,UAAA;AAAA,UAJM,YAAYjK,EAAM,EAAE;AAAA,QAAA;AAAA,QAO3B,gBAAAqC;AAAA,UAACoI;AAAA,UAAA;AAAA,YAEC,YAAYzK,EAAM,UAAU,YAAY;AAAA,YACxC,eAAe,CAACiK,MAAYgK,EAAe,EAAE,UAAUhK,GAAS;AAAA,YAChE,MAAK;AAAA,YACN,UAAA;AAAA,UAAA;AAAA,UAJM,YAAYjK,EAAM,EAAE;AAAA,QAAA;AAAA,QAQ3B,gBAAAqC;AAAA,UAACoI;AAAA,UAAA;AAAA,YAEC,YAAYzK,EAAM,UAAU,YAAY;AAAA,YACxC,eAAe,CAACiK,MAAYgK,EAAe,EAAE,UAAUhK,GAAS;AAAA,YAChE,MAAK;AAAA,YACN,UAAA;AAAA,UAAA;AAAA,UAJM,YAAYjK,EAAM,EAAE;AAAA,QAAA;AAAA,MAM3B,EAAA,CACF;AAAA,IAAA,GACF;AAAA,KAIAA,EAAM,SAAS,UACfA,EAAM,SAAS,WACfA,EAAM,SAAS,SACfA,EAAM,SAAS,eACf,gBAAA2G,EAAC,OAAA,EAAI,WAAU,0CACb,UAAA;AAAA,MAAA,gBAAAtE,EAAC,MAAA,EAAG,WAAU,wCAAuC,UAAA,cAAU;AAAA,MAC/D,gBAAAA;AAAA,QAACgG;AAAA,QAAA;AAAA,UACC,OAAM;AAAA,UACN,aAAY;AAAA,UACZ,OACErI,EAAM,YAAY,KAAK,CAACmK,MAAMA,EAAE,SAAS,SAAS,GAAG,SAAS;AAAA,UAEhE,eAAe,CAACxF,MAAU;AACxB,gBAAIuP,KAAiBlU,EAAM,cAAc,CAAA,GAAI;AAAA,cAC3C,CAACmK,MAAMA,EAAE,SAAS;AAAA,YAAA;AAEpB,gBAAIxF,GAAO;AACT,oBAAMwP,IACJnU,EAAM,YAAY,KAAK,CAACmK,MAAMA,EAAE,SAAS,SAAS,GAC9C,WAAW;AACjB,cAAA+J,EAAc,KAAK;AAAA,gBACjB,MAAM;AAAA,gBACN,OAAAvP;AAAA,gBACA,SAASwP;AAAA,cAAA,CACV;AAAA,YACH;AACA,YAAAJ,EAAY,EAAE,YAAYG,GAAe;AAAA,UAC3C;AAAA,UACA,MAAK;AAAA,QAAA;AAAA,MAAA;AAAA,MAEP,gBAAA7R;AAAA,QAACgG;AAAA,QAAA;AAAA,UACC,OAAM;AAAA,UACN,aAAY;AAAA,UACZ,OACErI,EAAM,YAAY,KAAK,CAACmK,MAAMA,EAAE,SAAS,SAAS,GAAG,WAAW;AAAA,UAElE,eAAe,CAACxF,MAAU;AACxB,gBAAIuP,KAAiBlU,EAAM,cAAc,CAAA,GAAI;AAAA,cAC3C,CAACmK,MAAMA,EAAE,SAAS;AAAA,YAAA;AAEpB,kBAAMiK,IACJpU,EAAM,YAAY,KAAK,CAACmK,MAAMA,EAAE,SAAS,SAAS,GAAG,SACrD;AACF,YAAIiK,KACFF,EAAc,KAAK;AAAA,cACjB,MAAM;AAAA,cACN,OAAOE;AAAA,cACP,SAASzP;AAAA,YAAA,CACV,GAEHoP,EAAY,EAAE,YAAYG,GAAe;AAAA,UAC3C;AAAA,UACA,MAAK;AAAA,QAAA;AAAA,MAAA;AAAA,IACP,GACF;AAAA,KAIAlU,EAAM,SAAS,UACfA,EAAM,SAAS,WACfA,EAAM,SAAS,cACfA,EAAM,SAAS,YACfA,EAAM,SAAS,WACfA,EAAM,SAAS,SACfA,EAAM,SAAS,UACfA,EAAM,SAAS,UACfA,EAAM,SAAS,cACfA,EAAM,SAAS,cACfA,EAAM,SAAS,cACfA,EAAM,SAAS,YACfA,EAAM,SAAS,iBACfA,EAAM,SAAS,kBACfA,EAAM,SAAS,YACfA,EAAM,SAAS,UACfA,EAAM,SAAS,YACf,gBAAA2G,EAAC,OAAA,EAAI,WAAU,0CACb,UAAA;AAAA,MAAA,gBAAAtE,EAAC,MAAA,EAAG,WAAU,wCAAuC,UAAA,cAAU;AAAA,MAE/D,gBAAAsE,EAAC,OAAA,EAAI,WAAU,0BACb,UAAA;AAAA,QAAA,gBAAAA;AAAA,UAACmC;AAAA,UAAA;AAAA,YACC,OAAM;AAAA,YACN,cAAc,CAAC9I,EAAM,YAAY,gBAAgB,SAAS;AAAA,YAC1D,mBAAmB,CAAC+I,MAAS;AAC3B,oBAAMsL,IAAQ,MAAM,KAAKtL,CAAI,EAAE,CAAC;AAChC,cAAAiL,EAAiB,EAAE,cAAcK,GAAO;AAAA,YAC1C;AAAA,YACA,MAAK;AAAA,YAEL,UAAA;AAAA,cAAA,gBAAAhS,EAAC6G,GAAA,EAAyB,uBAAV,SAAiB;AAAA,cACjC,gBAAA7G,EAAC6G,GAAA,EAAyB,UAAA,UAAA,GAAV,SAAiB;AAAA,cACjC,gBAAA7G,EAAC6G,GAAA,EAA2B,UAAA,YAAA,GAAZ,WAAqB;AAAA,cACrC,gBAAA7G,EAAC6G,GAAA,EAAyB,UAAA,UAAA,GAAV,SAAiB;AAAA,cACjC,gBAAA7G,EAAC6G,GAAA,EAAyB,UAAA,UAAA,GAAV,SAAiB;AAAA,cACjC,gBAAA7G,EAAC6G,GAAA,EAAwB,UAAA,SAAA,GAAT,QAAe;AAAA,YAAA;AAAA,UAAA;AAAA,QAAA;AAAA,QAGjC,gBAAAvC;AAAA,UAACmC;AAAA,UAAA;AAAA,YACC,OAAM;AAAA,YACN,cAAc,CAAC9I,EAAM,YAAY,QAAQ,IAAI;AAAA,YAC7C,mBAAmB,CAAC+I,MAAS;AAC3B,oBAAMuL,IAAO,MAAM,KAAKvL,CAAI,EAAE,CAAC;AAC/B,cAAAiL,EAAiB,EAAE,MAAAM,GAAY;AAAA,YACjC;AAAA,YACA,MAAK;AAAA,YAEL,UAAA;AAAA,cAAA,gBAAAjS,EAAC6G,GAAA,EAAoB,qBAAL,IAAU;AAAA,cAC1B,gBAAA7G,EAAC6G,GAAA,EAAoB,UAAA,SAAA,GAAL,IAAW;AAAA,cAC3B,gBAAA7G,EAAC6G,GAAA,EAAoB,UAAA,QAAA,GAAL,IAAU;AAAA,YAAA;AAAA,UAAA;AAAA,QAAA;AAAA,MAC5B,GACF;AAAA,MAEA,gBAAAvC;AAAA,QAACmC;AAAA,QAAA;AAAA,UACC,OAAM;AAAA,UACN,cAAc,CAAC9I,EAAM,YAAY,gBAAgB,IAAI;AAAA,UACrD,mBAAmB,CAAC+I,MAAS;AAC3B,kBAAMwL,IAAS,MAAM,KAAKxL,CAAI,EAAE,CAAC;AACjC,YAAAiL,EAAiB,EAAE,cAAcO,GAAQ;AAAA,UAC3C;AAAA,UACA,MAAK;AAAA,UAEL,UAAA;AAAA,YAAA,gBAAAlS,EAAC6G,GAAA,EAAsB,oBAAP,MAAW;AAAA,YAC3B,gBAAA7G,EAAC6G,GAAA,EAAoB,UAAA,QAAA,GAAL,IAAU;AAAA,YAC1B,gBAAA7G,EAAC6G,GAAA,EAAoB,UAAA,SAAA,GAAL,IAAW;AAAA,YAC3B,gBAAA7G,EAAC6G,GAAA,EAAoB,UAAA,QAAA,GAAL,IAAU;AAAA,YAC1B,gBAAA7G,EAAC6G,GAAA,EAAsB,UAAA,OAAA,GAAP,MAAW;AAAA,UAAA;AAAA,QAAA;AAAA,MAAA;AAAA,IAC7B,GACF;AAAA,KAIAlJ,EAAM,SAAS,YACfA,EAAM,SAAS,YACfA,EAAM,SAAS,cACfA,EAAM,SAAS,YACf,gBAAA2G,EAAC,OAAA,EAAI,WAAU,0CACb,UAAA;AAAA,MAAA,gBAAAtE,EAAC,MAAA,EAAG,WAAU,wCAAuC,UAAA,cAAU;AAAA,MAE/D,gBAAAsE,EAAC,OAAA,EAAI,WAAU,0BACb,UAAA;AAAA,QAAA,gBAAAA;AAAA,UAACmC;AAAA,UAAA;AAAA,YACC,OAAM;AAAA,YACN,cAAc,CAAC9I,EAAM,YAAY,gBAAgB,SAAS;AAAA,YAC1D,mBAAmB,CAAC+I,MAAS;AAC3B,oBAAMsL,IAAQ,MAAM,KAAKtL,CAAI,EAAE,CAAC;AAChC,cAAAiL,EAAiB,EAAE,cAAcK,GAAO;AAAA,YAC1C;AAAA,YACA,MAAK;AAAA,YAEL,UAAA;AAAA,cAAA,gBAAAhS,EAAC6G,GAAA,EAAyB,uBAAV,SAAiB;AAAA,cACjC,gBAAA7G,EAAC6G,GAAA,EAAyB,UAAA,UAAA,GAAV,SAAiB;AAAA,cACjC,gBAAA7G,EAAC6G,GAAA,EAA2B,UAAA,YAAA,GAAZ,WAAqB;AAAA,cACrC,gBAAA7G,EAAC6G,GAAA,EAAyB,UAAA,UAAA,GAAV,SAAiB;AAAA,cACjC,gBAAA7G,EAAC6G,GAAA,EAAyB,UAAA,UAAA,GAAV,SAAiB;AAAA,cACjC,gBAAA7G,EAAC6G,GAAA,EAAwB,UAAA,SAAA,GAAT,QAAe;AAAA,YAAA;AAAA,UAAA;AAAA,QAAA;AAAA,QAGjC,gBAAAvC;AAAA,UAACmC;AAAA,UAAA;AAAA,YACC,OAAM;AAAA,YACN,cAAc,CAAC9I,EAAM,YAAY,QAAQ,IAAI;AAAA,YAC7C,mBAAmB,CAAC+I,MAAS;AAC3B,oBAAMuL,IAAO,MAAM,KAAKvL,CAAI,EAAE,CAAC;AAC/B,cAAAiL,EAAiB,EAAE,MAAAM,GAAY;AAAA,YACjC;AAAA,YACA,MAAK;AAAA,YAEL,UAAA;AAAA,cAAA,gBAAAjS,EAAC6G,GAAA,EAAoB,qBAAL,IAAU;AAAA,cAC1B,gBAAA7G,EAAC6G,GAAA,EAAoB,UAAA,SAAA,GAAL,IAAW;AAAA,cAC3B,gBAAA7G,EAAC6G,GAAA,EAAoB,UAAA,QAAA,GAAL,IAAU;AAAA,YAAA;AAAA,UAAA;AAAA,QAAA;AAAA,MAC5B,GACF;AAAA,MAEClJ,EAAM,SAAS,YACd,gBAAA2G;AAAA,QAACmC;AAAA,QAAA;AAAA,UACC,OAAM;AAAA,UACN,cAAc,CAAC9I,EAAM,YAAY,WAAW,OAAO;AAAA,UACnD,mBAAmB,CAAC+I,MAAS;AAC3B,kBAAMyL,IAAU,MAAM,KAAKzL,CAAI,EAAE,CAAC;AAClC,YAAAiL,EAAiB,EAAE,SAAAQ,GAAkB;AAAA,UACvC;AAAA,UACA,MAAK;AAAA,UAEL,UAAA;AAAA,YAAA,gBAAAnS,EAAC6G,GAAA,EAAuB,qBAAR,OAAa;AAAA,YAC7B,gBAAA7G,EAAC6G,GAAA,EAA0B,UAAA,WAAA,GAAX,UAAmB;AAAA,YACnC,gBAAA7G,EAAC6G,GAAA,EAAuB,UAAA,QAAA,GAAR,OAAa;AAAA,YAC7B,gBAAA7G,EAAC6G,GAAA,EAAsB,UAAA,OAAA,GAAP,MAAW;AAAA,YAC3B,gBAAA7G,EAAC6G,GAAA,EAAuB,UAAA,QAAA,GAAR,OAAa;AAAA,YAC7B,gBAAA7G,EAAC6G,GAAA,EAAwB,UAAA,SAAA,GAAT,QAAe;AAAA,YAC/B,gBAAA7G,EAAC6G,GAAA,EAAuB,UAAA,QAAA,GAAR,OAAa;AAAA,UAAA;AAAA,QAAA;AAAA,MAAA;AAAA,IAC/B,GAEJ;AAAA,KAGAlJ,EAAM,SAAS,WACfA,EAAM,SAAS,cACfA,EAAM,SAAS,YACfA,EAAM,SAAS,iBACfA,EAAM,SAAS,mBACf,gBAAAqC,EAACoS,MAAsB,OAAAzU,GAAc;AAAA,IAGtCA,EAAM,SAAS,cACd,gBAAAqC;AAAA,MAACgG;AAAA,MAAA;AAAA,QAEC,MAAK;AAAA,QACL,OAAM;AAAA,QACN,OAAOrI,EAAM,YAAY,MAAM,cAAc;AAAA,QAC7C,eAAe,CAAC2E,MACdqP,EAAiB,EAAE,MAAM,SAASrP,CAAK,KAAK,GAAG;AAAA,QAEjD,MAAK;AAAA,MAAA;AAAA,MAPA,QAAQ3E,EAAM,EAAE;AAAA,IAAA;AAAA,IAWxBA,EAAM,SAAS,YACd,gBAAAqC;AAAA,MAACgG;AAAA,MAAA;AAAA,QAEC,MAAK;AAAA,QACL,OAAM;AAAA,QACN,OAAOrI,EAAM,YAAY,KAAK,cAAc;AAAA,QAC5C,eAAe,CAAC2E,MACdqP,EAAiB,EAAE,KAAK,SAASrP,CAAK,KAAK,GAAG;AAAA,QAEhD,MAAK;AAAA,MAAA;AAAA,MAPA,cAAc3E,EAAM,EAAE;AAAA,IAAA;AAAA,IAW9BA,EAAM,SAAS,UACd,gBAAA2G,EAAAiC,GAAA,EACE,UAAA;AAAA,MAAA,gBAAAvG;AAAA,QAACgG;AAAA,QAAA;AAAA,UAEC,OAAM;AAAA,UACN,aAAY;AAAA,UACZ,OAAOrI,EAAM,YAAY,UAAU;AAAA,UACnC,eAAe,CAAC2E,MAAUqP,EAAiB,EAAE,QAAQrP,GAAO;AAAA,UAC5D,MAAK;AAAA,QAAA;AAAA,QALA,UAAU3E,EAAM,EAAE;AAAA,MAAA;AAAA,MAOzB,gBAAAqC;AAAA,QAACoI;AAAA,QAAA;AAAA,UAEC,YAAYzK,EAAM,YAAY,YAAY;AAAA,UAC1C,eAAe,CAACiK,MAAY+J,EAAiB,EAAE,UAAU/J,GAAS;AAAA,UAClE,MAAK;AAAA,UACN,UAAA;AAAA,QAAA;AAAA,QAJM,YAAYjK,EAAM,EAAE;AAAA,MAAA;AAAA,IAM3B,GACF;AAAA,IAGDA,EAAM,SAAS,YACd,gBAAA2G,EAAAiC,GAAA,EACE,UAAA;AAAA,MAAA,gBAAAvG;AAAA,QAACgG;AAAA,QAAA;AAAA,UAEC,MAAK;AAAA,UACL,OAAM;AAAA,UACN,OAAOrI,EAAM,YAAY,KAAK,cAAc;AAAA,UAC5C,eAAe,CAAC2E,MACdqP,EAAiB,EAAE,KAAKrP,IAAQ,WAAWA,CAAK,IAAI,QAAW;AAAA,UAEjE,MAAK;AAAA,QAAA;AAAA,QAPA,OAAO3E,EAAM,EAAE;AAAA,MAAA;AAAA,MAStB,gBAAAqC;AAAA,QAACgG;AAAA,QAAA;AAAA,UAEC,MAAK;AAAA,UACL,OAAM;AAAA,UACN,OAAOrI,EAAM,YAAY,KAAK,cAAc;AAAA,UAC5C,eAAe,CAAC2E,MACdqP,EAAiB,EAAE,KAAKrP,IAAQ,WAAWA,CAAK,IAAI,QAAW;AAAA,UAEjE,MAAK;AAAA,QAAA;AAAA,QAPA,OAAO3E,EAAM,EAAE;AAAA,MAAA;AAAA,IAQtB,EAAA,CACF;AAAA,EAAA,GAEJ;AAEJ;AAEA,SAAS0U,GAAc,EAAE,OAAA1U,KAA+B;AACtD,QAAM,EAAE,SAAAqB,EAAA,IAAYiB,EAAA,GACd,CAACqS,GAAWC,CAAY,IAAIxP,EAAS,EAAE,OAAO,IAAI,OAAO,IAAI,GAE7DyP,IAAgB,CAACC,MAAsB;AAC3C,IAAAzT,EAAQ,YAAYrB,EAAM,IAAI,EAAE,SAAA8U,GAAS;AAAA,EAC3C,GAEMC,IAAY,MAAM;AACtB,QAAIJ,EAAU,SAASA,EAAU,OAAO;AACtC,YAAMK,IAAiBhV,EAAM,WAAW,CAAA;AACxC,MAAA6U,EAAc,CAAC,GAAGG,GAAgBL,CAAS,CAAC,GAC5CC,EAAa,EAAE,OAAO,IAAI,OAAO,IAAI;AAAA,IACvC;AAAA,EACF,GAEMK,IAAe,CAAC9H,MAAkB;AACtC,UAAM6H,IAAiBhV,EAAM,WAAW,CAAA;AACxC,IAAA6U,EAAcG,EAAe,OAAO,CAAChK,GAAGC,MAAMA,MAAMkC,CAAK,CAAC;AAAA,EAC5D;AAEA,SACE,gBAAAxG,EAAC,OAAA,EAAI,WAAU,aACb,UAAA;AAAA,IAAA,gBAAAA,EAAC,OAAA,EAAI,WAAU,qCACb,UAAA;AAAA,MAAA,gBAAAtE,EAAC,MAAA,EAAG,WAAU,uBAAsB,UAAA,WAAO;AAAA,MAC3C,gBAAAA,EAACoN,KAAK,MAAK,MAAK,SAAQ,QACrB,UAAAzP,EAAM,SAAS,UAAU,EAAA,CAC5B;AAAA,IAAA,GACF;AAAA,IAECA,EAAM,SAAS,IAAI,CAACiJ,GAAQkE,MAC3B,gBAAAxG;AAAA,MAAC;AAAA,MAAA;AAAA,QAEC,WAAU;AAAA,QAEV,UAAA;AAAA,UAAA,gBAAAtE;AAAA,YAACgG;AAAA,YAAA;AAAA,cAEC,MAAK;AAAA,cACL,aAAY;AAAA,cACZ,OAAOY,EAAO;AAAA,cACd,eAAe,CAACtE,MAAU;AAExB,sBAAMuQ,KADiBlV,EAAM,WAAW,CAAA,GACF;AAAA,kBAAI,CAACmV,GAAKlK,MAC9CA,MAAMkC,IAAQ,EAAE,GAAGgI,GAAK,OAAOxQ,MAAUwQ;AAAA,gBAAA;AAE3C,gBAAAN,EAAcK,CAAc;AAAA,cAC9B;AAAA,YAAA;AAAA,YAVK,gBAAgB/H,CAAK,IAAInN,EAAM,EAAE;AAAA,UAAA;AAAA,UAYxC,gBAAA2G,EAAC,OAAA,EAAI,WAAU,cACb,UAAA;AAAA,YAAA,gBAAAtE;AAAA,cAACgG;AAAA,cAAA;AAAA,gBAEC,MAAK;AAAA,gBACL,aAAY;AAAA,gBACZ,OAAOY,EAAO;AAAA,gBACd,eAAe,CAACtE,MAAU;AAExB,wBAAMuQ,KADiBlV,EAAM,WAAW,CAAA,GACF;AAAA,oBAAI,CAACmV,GAAKlK,MAC9CA,MAAMkC,IAAQ,EAAE,GAAGgI,GAAK,OAAAxQ,MAAiBwQ;AAAA,kBAAA;AAE3C,kBAAAN,EAAcK,CAAc;AAAA,gBAC9B;AAAA,gBACA,WAAU;AAAA,cAAA;AAAA,cAXL,gBAAgB/H,CAAK,IAAInN,EAAM,EAAE;AAAA,YAAA;AAAA,YAaxC,gBAAAqC;AAAA,cAACuE;AAAA,cAAA;AAAA,gBACC,MAAK;AAAA,gBACL,OAAM;AAAA,gBACN,SAAQ;AAAA,gBACR,YAAU;AAAA,gBACV,SAAS,MAAMqO,EAAa9H,CAAK;AAAA,gBAEjC,UAAA,gBAAA9K,EAACyK,IAAA,EAAO,MAAM,GAAA,CAAI;AAAA,cAAA;AAAA,YAAA;AAAA,UACpB,EAAA,CACF;AAAA,QAAA;AAAA,MAAA;AAAA,MAxCK,UAAUK,CAAK,IAAInN,EAAM,EAAE;AAAA,IAAA,CA0CnC;AAAA,IAED,gBAAA2G,EAAC,OAAA,EAAI,WAAU,iEACb,UAAA;AAAA,MAAA,gBAAAtE;AAAA,QAACgG;AAAA,QAAA;AAAA,UAEC,MAAK;AAAA,UACL,aAAY;AAAA,UACZ,OAAOsM,EAAU;AAAA,UACjB,eAAe,CAAChQ,MACdiQ,EAAa,EAAE,GAAGD,GAAW,OAAOhQ,EAAA,CAAO;AAAA,QAAA;AAAA,QALxC,oBAAoB3E,EAAM,EAAE;AAAA,MAAA;AAAA,MAQnC,gBAAA2G,EAAC,OAAA,EAAI,WAAU,cACb,UAAA;AAAA,QAAA,gBAAAtE;AAAA,UAACgG;AAAA,UAAA;AAAA,YAEC,MAAK;AAAA,YACL,aAAY;AAAA,YACZ,OAAOsM,EAAU;AAAA,YACjB,eAAe,CAAChQ,MACdiQ,EAAa,EAAE,GAAGD,GAAW,OAAAhQ,GAAc;AAAA,YAE7C,WAAU;AAAA,UAAA;AAAA,UAPL,oBAAoB3E,EAAM,EAAE;AAAA,QAAA;AAAA,QASnC,gBAAAqC;AAAA,UAACuE;AAAA,UAAA;AAAA,YACC,MAAK;AAAA,YACL,OAAM;AAAA,YACN,SAAQ;AAAA,YACR,YAAU;AAAA,YACV,SAASmO;AAAA,YACT,YAAY,CAACJ,EAAU,SAAS,CAACA,EAAU;AAAA,YAE3C,UAAA,gBAAAtS,EAACuP,IAAA,EAAK,MAAM,GAAA,CAAI;AAAA,UAAA;AAAA,QAAA;AAAA,MAClB,EAAA,CACF;AAAA,IAAA,EAAA,CACF;AAAA,EAAA,GACF;AAEJ;AAEA,SAASwD,GAAiB,EAAE,OAAApV,KAA+B;AACzD,QAAM,EAAE,SAAAqB,EAAA,IAAYiB,EAAA,GAEdyR,IAAc,CAACvS,MAAgC;AACnD,IAAAH,EAAQ,YAAYrB,EAAM,IAAIwB,CAAO;AAAA,EACvC,GAEMwS,IAAmB,CAACxS,MAAiB;AACzC,IAAAH,EAAQ,sBAAsBrB,EAAM,IAAIwB,CAAO;AAAA,EACjD;AAEA,SACE,gBAAAmF,EAAC,OAAA,EAAI,WAAU,kBACb,UAAA;AAAA,IAAA,gBAAAA,EAAC,MAAA,EAAG,WAAU,gEACZ,UAAA;AAAA,MAAA,gBAAAtE,EAACgT,IAAA,EAAO,MAAM,GAAA,CAAI;AAAA,MAAE;AAAA,IAAA,GAEtB;AAAA,IAGA,gBAAA1O,EAAC,OAAA,EAAI,WAAU,aACb,UAAA;AAAA,MAAA,gBAAAA;AAAA,QAACmC;AAAA,QAAA;AAAA,UACC,OAAM;AAAA,UACN,cAAc;AAAA,YACZ9I,EAAM,QAAQ,YAAY,SAAA,KACxBA,EAAM,YAAY,cAClB;AAAA,UAAA;AAAA,UAEJ,mBAAmB,CAAC+I,MAAS;AAC3B,kBAAMyE,IAAO,SAAS,MAAM,KAAKzE,CAAI,EAAE,CAAC,CAAW;AACnD,YAAAgL,EAAY;AAAA,cACV,YAAYvG;AAAA;AAAA,cACZ,QAAQ;AAAA,gBACN,GAAGxN,EAAM;AAAA,gBACT,YAAYwN;AAAA,gBACZ,WAAW,YAAYA,CAAI;AAAA,cAAA;AAAA,YAC7B,CACD;AAAA,UACH;AAAA,UACA,MAAK;AAAA,UAEL,UAAA;AAAA,YAAA,gBAAAnL,EAAC6G,GAAA,EAAmB,gCAAJ,GAAoB;AAAA,YACpC,gBAAA7G,EAAC6G,GAAA,EAAmB,UAAA,qBAAA,GAAJ,GAAsB;AAAA,YACtC,gBAAA7G,EAAC6G,GAAA,EAAmB,UAAA,kBAAA,GAAJ,GAAmB;AAAA,YACnC,gBAAA7G,EAAC6G,GAAA,EAAmB,UAAA,qBAAA,GAAJ,GAAsB;AAAA,YACtC,gBAAA7G,EAAC6G,GAAA,EAAmB,UAAA,qBAAA,GAAJ,GAAsB;AAAA,YACtC,gBAAA7G,EAAC6G,GAAA,EAAmB,UAAA,kBAAA,GAAJ,GAAmB;AAAA,YACnC,gBAAA7G,EAAC6G,GAAA,EAAmB,UAAA,qBAAA,GAAJ,GAAsB;AAAA,YACtC,gBAAA7G,EAAC6G,GAAA,EAAmB,UAAA,qBAAA,GAAJ,GAAsB;AAAA,YACtC,gBAAA7G,EAAC6G,GAAA,EAAmB,UAAA,kBAAA,GAAJ,GAAmB;AAAA,YACnC,gBAAA7G,EAAC6G,GAAA,EAAoB,UAAA,sBAAA,GAAL,IAAwB;AAAA,YACxC,gBAAA7G,EAAC6G,GAAA,EAAoB,UAAA,sBAAA,GAAL,IAAwB;AAAA,YACxC,gBAAA7G,EAAC6G,GAAA,EAAoB,UAAA,oBAAA,GAAL,IAAsB;AAAA,UAAA;AAAA,QAAA;AAAA,MAAA;AAAA,OAItClJ,EAAM,SAAS,WAAWA,EAAM,SAAS,eACzC,gBAAA2G;AAAA,QAACmC;AAAA,QAAA;AAAA,UACC,OAAM;AAAA,UACN,cAAc,CAAC9I,EAAM,YAAY,eAAe,UAAU;AAAA,UAC1D,mBAAmB,CAAC+I,MAAS;AAC3B,kBAAMY,IAAc,MAAM,KAAKZ,CAAI,EAAE,CAAC;AACtC,YAAAiL,EAAiB,EAAE,aAAArK,GAAa;AAAA,UAClC;AAAA,UACA,MAAK;AAAA,UAEL,UAAA;AAAA,YAAA,gBAAAtH,EAAC6G,GAAA,EAA0B,wBAAX,UAAmB;AAAA,YACnC,gBAAA7G,EAAC6G,GAAA,EAA4B,UAAA,aAAA,GAAb,YAAuB;AAAA,UAAA;AAAA,QAAA;AAAA,MAAA;AAAA,OAKzClJ,EAAM,SAAS,WAAWA,EAAM,SAAS,cAAcA,EAAM,SAAS,YAAYA,EAAM,SAAS,aACjG,gBAAA2G;AAAA,QAACmC;AAAA,QAAA;AAAA,UACC,OAAM;AAAA,UACN,cAAc,CAAC9I,EAAM,YAAY,sBAAsB,MAAM;AAAA,UAC7D,mBAAmB,CAAC+I,MAAS;AAC3B,kBAAMa,IAAqB,MAAM,KAAKb,CAAI,EAAE,CAAC;AAC7C,YAAAiL,EAAiB,EAAE,oBAAApK,GAAoB;AAAA,UACzC;AAAA,UACA,MAAK;AAAA,UAEL,UAAA;AAAA,YAAA,gBAAAvH,EAAC6G,GAAA,EAAsB,oBAAP,MAAW;AAAA,YAC3B,gBAAA7G,EAAC6G,GAAA,EAAwB,UAAA,SAAA,GAAT,QAAe;AAAA,YAC/B,gBAAA7G,EAAC6G,GAAA,EAAuB,UAAA,QAAA,GAAR,OAAa;AAAA,UAAA;AAAA,QAAA;AAAA,MAAA;AAAA,MAIjC,gBAAA7G,EAAC,OAAA,EAAI,WAAU,sBACb,UAAA,gBAAAA;AAAA,QAACoI;AAAA,QAAA;AAAA,UACC,YAAYzK,EAAM,YAAY,eAAe;AAAA,UAC7C,eAAe,CAACiK,MACd+J,EAAiB,EAAE,aAAa/J,GAAS;AAAA,UAE3C,MAAK;AAAA,UACN,UAAA;AAAA,QAAA;AAAA,MAAA,EAED,CACF;AAAA,IAAA,GACF;AAAA,IAGA,gBAAAtD,EAAC,OAAA,EAAI,WAAU,0CACb,UAAA;AAAA,MAAA,gBAAAtE,EAAC,MAAA,EAAG,WAAU,mDAAkD,UAAA,WAAO;AAAA,MAEvE,gBAAAsE,EAAC,OAAA,EAAI,WAAU,0BACb,UAAA;AAAA,QAAA,gBAAAA;AAAA,UAACmC;AAAA,UAAA;AAAA,YACC,OAAM;AAAA,YACN,cAAc,CAAC9I,EAAM,YAAY,aAAa,MAAM;AAAA,YACpD,mBAAmB,CAAC+I,MAAS;AAC3B,oBAAMuM,IAAS,MAAM,KAAKvM,CAAI,EAAE,CAAC;AACjC,cAAAiL,EAAiB,EAAE,WAAWsB,GAAQ;AAAA,YACxC;AAAA,YACA,MAAK;AAAA,YAEL,UAAA;AAAA,cAAA,gBAAAjT,EAAC6G,GAAA,EAAsB,2BAAP,MAAkB;AAAA,cAClC,gBAAA7G,EAAC6G,GAAA,EAAsB,UAAA,eAAA,GAAP,MAAmB;AAAA,cACnC,gBAAA7G,EAAC6G,GAAA,EAAsB,UAAA,gBAAA,GAAP,MAAoB;AAAA,cACpC,gBAAA7G,EAAC6G,GAAA,EAAsB,UAAA,iBAAA,GAAP,MAAqB;AAAA,cACrC,gBAAA7G,EAAC6G,GAAA,EAAsB,UAAA,eAAA,GAAP,MAAmB;AAAA,cACnC,gBAAA7G,EAAC6G,GAAA,EAAsB,UAAA,qBAAA,GAAP,MAAyB;AAAA,YAAA;AAAA,UAAA;AAAA,QAAA;AAAA,QAG3C,gBAAAvC;AAAA,UAACmC;AAAA,UAAA;AAAA,YACC,OAAM;AAAA,YACN,cAAc,CAAC9I,EAAM,YAAY,gBAAgB,MAAM;AAAA,YACvD,mBAAmB,CAAC+I,MAAS;AAC3B,oBAAMuM,IAAS,MAAM,KAAKvM,CAAI,EAAE,CAAC;AACjC,cAAAiL,EAAiB,EAAE,cAAcsB,GAAQ;AAAA,YAC3C;AAAA,YACA,MAAK;AAAA,YAEL,UAAA;AAAA,cAAA,gBAAAjT,EAAC6G,GAAA,EAAsB,2BAAP,MAAkB;AAAA,cAClC,gBAAA7G,EAAC6G,GAAA,EAAsB,UAAA,eAAA,GAAP,MAAmB;AAAA,cACnC,gBAAA7G,EAAC6G,GAAA,EAAsB,UAAA,gBAAA,GAAP,MAAoB;AAAA,cACpC,gBAAA7G,EAAC6G,GAAA,EAAsB,UAAA,iBAAA,GAAP,MAAqB;AAAA,cACrC,gBAAA7G,EAAC6G,GAAA,EAAsB,UAAA,eAAA,GAAP,MAAmB;AAAA,cACnC,gBAAA7G,EAAC6G,GAAA,EAAsB,UAAA,qBAAA,GAAP,MAAyB;AAAA,YAAA;AAAA,UAAA;AAAA,QAAA;AAAA,MAC3C,GACF;AAAA,MAEA,gBAAAvC,EAAC,OAAA,EAAI,WAAU,0BACb,UAAA;AAAA,QAAA,gBAAAA;AAAA,UAACmC;AAAA,UAAA;AAAA,YACC,OAAM;AAAA,YACN,cAAc,CAAC9I,EAAM,YAAY,WAAW,KAAK;AAAA,YACjD,mBAAmB,CAAC+I,MAAS;AAC3B,oBAAMxE,IAAU,MAAM,KAAKwE,CAAI,EAAE,CAAC;AAClC,cAAAiL,EAAiB,EAAE,SAAAzP,GAAS;AAAA,YAC9B;AAAA,YACA,MAAK;AAAA,YAEL,UAAA;AAAA,cAAA,gBAAAlC,EAAC6G,GAAA,EAAqB,0BAAN,KAAgB;AAAA,cAChC,gBAAA7G,EAAC6G,GAAA,EAAqB,UAAA,cAAA,GAAN,KAAiB;AAAA,cACjC,gBAAA7G,EAAC6G,GAAA,EAAqB,UAAA,eAAA,GAAN,KAAkB;AAAA,cAClC,gBAAA7G,EAAC6G,GAAA,EAAqB,UAAA,gBAAA,GAAN,KAAmB;AAAA,cACnC,gBAAA7G,EAAC6G,GAAA,EAAqB,UAAA,cAAA,GAAN,KAAiB;AAAA,cACjC,gBAAA7G,EAAC6G,GAAA,EAAqB,UAAA,oBAAA,GAAN,KAAuB;AAAA,YAAA;AAAA,UAAA;AAAA,QAAA;AAAA,QAIxC,CAAC,CAAC,UAAU,gBAAgB,SAAS,YAAY,UAAU,QAAQ,QAAQ,QAAQ,QAAQ,EAAE,SAASlJ,EAAM,IAAI,KAC/G,gBAAA2G;AAAA,UAACmC;AAAA,UAAA;AAAA,YACC,OAAM;AAAA,YACN,cAAc,CAAC9I,EAAM,YAAY,aAAa,WAAW;AAAA,YACzD,mBAAmB,CAAC+I,MAAS;AAC3B,oBAAMwM,IAAY,MAAM,KAAKxM,CAAI,EAAE,CAAC;AACpC,cAAAiL,EAAiB,EAAE,WAAAuB,GAAW;AAAA,YAChC;AAAA,YACA,MAAK;AAAA,YAEL,UAAA;AAAA,cAAA,gBAAAlT,EAAC6G,GAAA,EAA2B,oBAAZ,WAAgB;AAAA,cAChC,gBAAA7G,EAAC6G,GAAA,EAA6B,UAAA,SAAA,GAAd,aAAoB;AAAA,cACpC,gBAAA7G,EAAC6G,GAAA,EAA4B,UAAA,QAAA,GAAb,YAAkB;AAAA,YAAA;AAAA,UAAA;AAAA,QAAA;AAAA,MACpC,EAAA,CAEJ;AAAA,IAAA,GACF;AAAA,IAGA,gBAAAvC,EAAC,OAAA,EAAI,WAAU,0CACb,UAAA;AAAA,MAAA,gBAAAtE,EAAC,MAAA,EAAG,WAAU,mDAAkD,UAAA,cAAU;AAAA,MAC1E,gBAAAsE,EAAC,OAAA,EAAI,WAAU,uBACb,UAAA;AAAA,QAAA,gBAAAtE;AAAA,UAACoI;AAAA,UAAA;AAAA,YACC,YAAYzK,EAAM,YAAY,gBAAgB;AAAA,YAC9C,eAAe,CAACiK,MACd+J,EAAiB,EAAE,cAAc/J,GAAS;AAAA,YAE5C,MAAK;AAAA,YACN,UAAA;AAAA,UAAA;AAAA,QAAA;AAAA,QAID,gBAAA5H;AAAA,UAACoI;AAAA,UAAA;AAAA,YACC,YAAYzK,EAAM,YAAY,gBAAgB;AAAA,YAC9C,eAAe,CAACiK,MACd+J,EAAiB,EAAE,cAAc/J,GAAS;AAAA,YAE5C,MAAK;AAAA,YACN,UAAA;AAAA,UAAA;AAAA,QAAA;AAAA,QAID,gBAAA5H;AAAA,UAACoI;AAAA,UAAA;AAAA,YACC,YAAYzK,EAAM,YAAY,iBAAiB;AAAA,YAC/C,eAAe,CAACiK,MACd+J,EAAiB,EAAE,eAAe/J,GAAS;AAAA,YAE7C,MAAK;AAAA,YACN,UAAA;AAAA,UAAA;AAAA,QAAA;AAAA,MAED,EAAA,CACF;AAAA,IAAA,EAAA,CACF;AAAA,EAAA,GACF;AAEJ;AAGA,SAASuL,GAAiB,EAAE,OAAAxV,KAA+B;AACzD,QAAM,EAAE,SAAAqB,EAAA,IAAYiB,EAAA,GACd,CAACmT,GAAYC,CAAa,IAAItQ,EAAS,EAAE,GACzC,CAACuQ,GAAcC,CAAe,IAAIxQ,EAAS,EAAE,GAE7CyQ,IAAe,CAACrU,MAA0C;AAC9D,IAAAH,EAAQ,kBAAkBrB,EAAM,IAAIwB,CAAO;AAAA,EAC7C,GAEMwS,IAAmB,CAACxS,MAAiB;AACzC,IAAAH,EAAQ,sBAAsBrB,EAAM,IAAIwB,CAAO;AAAA,EACjD,GAEMsU,IAAmB,MAAM;AAC7B,QAAIL,KAAcE,GAAc;AAC9B,YAAMI,IAAwB/V,EAAM,QAAQ,kBAAkB,CAAA;AAC9D,MAAA6V,EAAa;AAAA,QACX,gBAAgB;AAAA,UACd,GAAGE;AAAA,UACH,CAACN,CAAU,GAAGE;AAAA,QAAA;AAAA,MAChB,CACD,GACDD,EAAc,EAAE,GAChBE,EAAgB,EAAE;AAAA,IACpB;AAAA,EACF,GAEMI,IAAsB,CAAC/N,MAAgB;AAE3C,UAAMgO,IAAgB,EAAE,GADMjW,EAAM,QAAQ,kBAAkB,CAAA,EACnC;AAC3B,WAAOiW,EAAchO,CAAG,GACxB4N,EAAa,EAAE,gBAAgBI,GAAe;AAAA,EAChD;AAEA,SACE,gBAAAtP,EAAC,OAAA,EAAI,WAAU,kBACb,UAAA;AAAA,IAAA,gBAAAA,EAAC,OAAA,EAAI,WAAU,aACb,UAAA;AAAA,MAAA,gBAAAtE,EAAC,MAAA,EAAG,WAAU,wCAAuC,UAAA,qBAAiB;AAAA,MAEtE,gBAAAsE,EAAC,OAAA,EAAI,WAAU,0CACb,UAAA;AAAA,QAAA,gBAAAtE,EAAC,OAAA,EAAI,WAAU,wCAAuC,UAAA,sBAAkB;AAAA,QAExE,gBAAAA;AAAA,UAACgG;AAAA,UAAA;AAAA,YAEC,OAAM;AAAA,YACN,aAAY;AAAA,YACZ,OAAOrI,EAAM,YAAY,YAAY,QAAQ;AAAA,YAC7C,eAAe,CAAC2E,MAAU;AACxB,oBAAMuR,IAAoBlW,EAAM,YAAY,cAAc,CAAA;AAC1D,cAAAgU,EAAiB;AAAA,gBACf,YAAY;AAAA,kBACV,GAAGkC;AAAA,kBACH,MAAMvR;AAAA,gBAAA;AAAA,cACR,CACD;AAAA,YACH;AAAA,YACA,MAAK;AAAA,YACL,aAAY;AAAA,UAAA;AAAA,UAdP,mBAAmB3E,EAAM,EAAE;AAAA,QAAA;AAAA,QAiBlC,gBAAAqC;AAAA,UAACgG;AAAA,UAAA;AAAA,YAEC,OAAM;AAAA,YACN,aAAY;AAAA,YACZ,OAAOrI,EAAM,YAAY,YAAY,eAAe;AAAA,YACpD,eAAe,CAAC2E,MAAU;AACxB,oBAAMuR,IAAoBlW,EAAM,YAAY,cAAc,CAAA;AAC1D,cAAAgU,EAAiB;AAAA,gBACf,YAAY;AAAA,kBACV,GAAGkC;AAAA,kBACH,aAAavR;AAAA,gBAAA;AAAA,cACf,CACD;AAAA,YACH;AAAA,YACA,MAAK;AAAA,YACL,aAAY;AAAA,UAAA;AAAA,UAdP,0BAA0B3E,EAAM,EAAE;AAAA,QAAA;AAAA,QAiBzC,gBAAAqC;AAAA,UAACgG;AAAA,UAAA;AAAA,YAEC,OAAM;AAAA,YACN,aAAY;AAAA,YACZ,OAAOrI,EAAM,YAAY,YAAY,gBAAgB;AAAA,YACrD,eAAe,CAAC2E,MAAU;AACxB,oBAAMuR,IAAoBlW,EAAM,YAAY,cAAc,CAAA;AAC1D,cAAAgU,EAAiB;AAAA,gBACf,YAAY;AAAA,kBACV,GAAGkC;AAAA,kBACH,cAAcvR;AAAA,gBAAA;AAAA,cAChB,CACD;AAAA,YACH;AAAA,YACA,MAAK;AAAA,YACL,aAAY;AAAA,UAAA;AAAA,UAdP,2BAA2B3E,EAAM,EAAE;AAAA,QAAA;AAAA,MAe1C,GACF;AAAA,MAEA,gBAAA2G,EAAC,OAAA,EAAI,WAAU,0CACb,UAAA;AAAA,QAAA,gBAAAtE,EAAC,OAAA,EAAI,WAAU,wCAAuC,UAAA,kBAAc;AAAA,QAEpE,gBAAAA;AAAA,UAACgG;AAAA,UAAA;AAAA,YAEC,OAAM;AAAA,YACN,aAAY;AAAA,YACZ,OAAOrI,EAAM,YAAY,YAAY,gBAAgB;AAAA,YACrD,eAAe,CAAC2E,MAAU;AACxB,oBAAMuR,IAAoBlW,EAAM,YAAY,cAAc,CAAA;AAC1D,cAAAgU,EAAiB;AAAA,gBACf,YAAY;AAAA,kBACV,GAAGkC;AAAA,kBACH,cAAcvR;AAAA,gBAAA;AAAA,cAChB,CACD;AAAA,YACH;AAAA,YACA,MAAK;AAAA,YACL,aAAY;AAAA,UAAA;AAAA,UAdP,2BAA2B3E,EAAM,EAAE;AAAA,QAAA;AAAA,QAiB1C,gBAAAqC;AAAA,UAACgG;AAAA,UAAA;AAAA,YAEC,OAAM;AAAA,YACN,aAAY;AAAA,YACZ,OAAOrI,EAAM,YAAY,YAAY,SAAS;AAAA,YAC9C,eAAe,CAAC2E,MAAU;AACxB,oBAAMuR,IAAoBlW,EAAM,YAAY,cAAc,CAAA;AAC1D,cAAAgU,EAAiB;AAAA,gBACf,YAAY;AAAA,kBACV,GAAGkC;AAAA,kBACH,OAAOvR;AAAA,gBAAA;AAAA,cACT,CACD;AAAA,YACH;AAAA,YACA,MAAK;AAAA,YACL,aAAY;AAAA,UAAA;AAAA,UAdP,oBAAoB3E,EAAM,EAAE;AAAA,QAAA;AAAA,QAiBnC,gBAAAqC;AAAA,UAACgG;AAAA,UAAA;AAAA,YAEC,OAAM;AAAA,YACN,aAAY;AAAA,YACZ,OAAOrI,EAAM,YAAY,YAAY,eAAe;AAAA,YACpD,eAAe,CAAC2E,MAAU;AACxB,oBAAMuR,IAAoBlW,EAAM,YAAY,cAAc,CAAA;AAC1D,cAAAgU,EAAiB;AAAA,gBACf,YAAY;AAAA,kBACV,GAAGkC;AAAA,kBACH,aAAavR;AAAA,gBAAA;AAAA,cACf,CACD;AAAA,YACH;AAAA,YACA,MAAK;AAAA,YACL,aAAY;AAAA,UAAA;AAAA,UAdP,0BAA0B3E,EAAM,EAAE;AAAA,QAAA;AAAA,MAezC,GACF;AAAA,MAEA,gBAAA2G,EAAC,OAAA,EAAI,WAAU,0CACb,UAAA;AAAA,QAAA,gBAAAtE,EAAC,OAAA,EAAI,WAAU,wCAAuC,UAAA,iBAAa;AAAA,QAEnE,gBAAAA;AAAA,UAACgG;AAAA,UAAA;AAAA,YAEC,OAAM;AAAA,YACN,aAAY;AAAA,YACZ,OAAOrI,EAAM,YAAY,YAAY,SAAS;AAAA,YAC9C,eAAe,CAAC2E,MAAU;AACxB,oBAAMuR,IAAoBlW,EAAM,YAAY,cAAc,CAAA;AAC1D,cAAAgU,EAAiB;AAAA,gBACf,YAAY;AAAA,kBACV,GAAGkC;AAAA,kBACH,OAAOvR;AAAA,gBAAA;AAAA,cACT,CACD;AAAA,YACH;AAAA,YACA,MAAK;AAAA,YACL,aAAY;AAAA,UAAA;AAAA,UAdP,oBAAoB3E,EAAM,EAAE;AAAA,QAAA;AAAA,QAiBnC,gBAAAqC;AAAA,UAACgG;AAAA,UAAA;AAAA,YAEC,OAAM;AAAA,YACN,aAAY;AAAA,YACZ,OAAOrI,EAAM,YAAY,YAAY,eAAe;AAAA,YACpD,eAAe,CAAC2E,MAAU;AACxB,oBAAMuR,IAAoBlW,EAAM,YAAY,cAAc,CAAA;AAC1D,cAAAgU,EAAiB;AAAA,gBACf,YAAY;AAAA,kBACV,GAAGkC;AAAA,kBACH,aAAavR;AAAA,gBAAA;AAAA,cACf,CACD;AAAA,YACH;AAAA,YACA,MAAK;AAAA,YACL,aAAY;AAAA,UAAA;AAAA,UAdP,0BAA0B3E,EAAM,EAAE;AAAA,QAAA;AAAA,QAiBzC,gBAAAqC;AAAA,UAACgG;AAAA,UAAA;AAAA,YAEC,OAAM;AAAA,YACN,aAAY;AAAA,YACZ,OAAOrI,EAAM,YAAY,YAAY,iBAAiB;AAAA,YACtD,eAAe,CAAC2E,MAAU;AACxB,oBAAMuR,IAAoBlW,EAAM,YAAY,cAAc,CAAA;AAC1D,cAAAgU,EAAiB;AAAA,gBACf,YAAY;AAAA,kBACV,GAAGkC;AAAA,kBACH,eAAevR;AAAA,gBAAA;AAAA,cACjB,CACD;AAAA,YACH;AAAA,YACA,MAAK;AAAA,YACL,aAAY;AAAA,UAAA;AAAA,UAdP,4BAA4B3E,EAAM,EAAE;AAAA,QAAA;AAAA,QAiB3C,gBAAAqC;AAAA,UAACgG;AAAA,UAAA;AAAA,YAEC,OAAM;AAAA,YACN,aAAY;AAAA,YACZ,OAAOrI,EAAM,YAAY,YAAY,gBAAgB;AAAA,YACrD,eAAe,CAAC2E,MAAU;AACxB,oBAAMuR,IAAoBlW,EAAM,YAAY,cAAc,CAAA;AAC1D,cAAAgU,EAAiB;AAAA,gBACf,YAAY;AAAA,kBACV,GAAGkC;AAAA,kBACH,cAAcvR;AAAA,gBAAA;AAAA,cAChB,CACD;AAAA,YACH;AAAA,YACA,MAAK;AAAA,YACL,aAAY;AAAA,UAAA;AAAA,UAdP,2BAA2B3E,EAAM,EAAE;AAAA,QAAA;AAAA,MAe1C,GACF;AAAA,MAEA,gBAAA2G,EAAC,OAAA,EAAI,WAAU,2CACb,UAAA;AAAA,QAAA,gBAAAtE;AAAA,UAACuE;AAAA,UAAA;AAAA,YACC,MAAK;AAAA,YACL,SAAQ;AAAA,YACR,SAAS,MAAM;AACb,cAAAoN,EAAiB,EAAE,YAAY,QAAW;AAAA,YAC5C;AAAA,YACD,UAAA;AAAA,UAAA;AAAA,QAAA;AAAA,QAID,gBAAA3R;AAAA,UAACuE;AAAA,UAAA;AAAA,YACC,MAAK;AAAA,YACL,SAAQ;AAAA,YACR,OAAM;AAAA,YACN,SAAS,MAAM;AACb,cAAAoN,EAAiB;AAAA,gBACf,YAAY;AAAA,kBACV,MAAM;AAAA,kBACN,cAAc;AAAA,kBACd,OAAO;AAAA,kBACP,OAAO;AAAA,kBACP,aAAa;AAAA,gBAAA;AAAA,cACf,CACD;AAAA,YACH;AAAA,YACD,UAAA;AAAA,UAAA;AAAA,QAAA;AAAA,MAED,EAAA,CACF;AAAA,IAAA,GACF;AAAA,IAEA,gBAAArN,EAAC,OAAA,EAAI,WAAU,0CACb,UAAA;AAAA,MAAA,gBAAAA,EAAC,OAAA,EAAI,WAAU,qCACb,UAAA;AAAA,QAAA,gBAAAtE,EAAC,MAAA,EAAG,WAAU,wCAAuC,UAAA,mBAErD;AAAA,QACA,gBAAAA;AAAA,UAACuE;AAAA,UAAA;AAAA,YACC,MAAK;AAAA,YACL,SAAQ;AAAA,YACR,SAAS,MAAM;AACb,cAAAiP,EAAa;AAAA,gBACX,gBAAgB;AAAA,kBACd,GAAG7V,EAAM,QAAQ;AAAA,kBACjB,cAAcA,EAAM;AAAA,kBACpB,cAAcA,EAAM,QAAQA,EAAM,MAAM,YAAA,EAAc,QAAQ,QAAQ,GAAG;AAAA,gBAAA;AAAA,cAC3E,CACD;AAAA,YACH;AAAA,YACD,UAAA;AAAA,UAAA;AAAA,QAAA;AAAA,MAED,GACF;AAAA,MAEA,gBAAA2G,EAAC,OAAA,EAAI,WAAU,cACb,UAAA;AAAA,QAAA,gBAAAtE;AAAA,UAACgG;AAAA,UAAA;AAAA,YAEC,aAAY;AAAA,YACZ,OAAOoN;AAAA,YACP,eAAeC;AAAA,YACf,MAAK;AAAA,YACL,WAAU;AAAA,UAAA;AAAA,UALL,gBAAgB1V,EAAM,EAAE;AAAA,QAAA;AAAA,QAO/B,gBAAAqC;AAAA,UAACgG;AAAA,UAAA;AAAA,YAEC,aAAY;AAAA,YACZ,OAAOsN;AAAA,YACP,eAAeC;AAAA,YACf,MAAK;AAAA,YACL,WAAU;AAAA,UAAA;AAAA,UALL,kBAAkB5V,EAAM,EAAE;AAAA,QAAA;AAAA,QAOjC,gBAAAqC;AAAA,UAACuE;AAAA,UAAA;AAAA,YACC,MAAK;AAAA,YACL,SAAQ;AAAA,YACR,SAASkP;AAAA,YACT,YAAU;AAAA,YAEV,UAAA,gBAAAzT,EAACuP,IAAA,EAAK,WAAU,UAAA,CAAU;AAAA,UAAA;AAAA,QAAA;AAAA,MAC5B,GACF;AAAA,MAEA,gBAAAvP,EAAC,OAAA,EAAI,WAAU,aACZ,UAAA,OAAO,QAAQrC,EAAM,QAAQ,kBAAkB,CAAA,CAAE,EAAE;AAAA,QAClD,CAAC,CAACiI,GAAKtD,CAAK,MACV,gBAAAgC;AAAA,UAAC;AAAA,UAAA;AAAA,YAEC,WAAU;AAAA,YAEV,UAAA;AAAA,cAAA,gBAAAA,EAAC,QAAA,EACC,UAAA;AAAA,gBAAA,gBAAAA,EAAC,UAAA,EAAQ,UAAA;AAAA,kBAAAsB;AAAA,kBAAI;AAAA,gBAAA,GAAC;AAAA,gBAAS;AAAA,gBAAEtD;AAAA,cAAA,GAC3B;AAAA,cACA,gBAAAtC;AAAA,gBAACuE;AAAA,gBAAA;AAAA,kBACC,MAAK;AAAA,kBACL,SAAQ;AAAA,kBACR,OAAM;AAAA,kBACN,SAAS,MAAMoP,EAAoB/N,CAAG;AAAA,kBACtC,YAAU;AAAA,kBAEV,UAAA,gBAAA5F,EAACyK,IAAA,EAAO,WAAU,UAAA,CAAU;AAAA,gBAAA;AAAA,cAAA;AAAA,YAC9B;AAAA,UAAA;AAAA,UAdK7E;AAAA,QAAA;AAAA,MAeP,EAEJ,CACF;AAAA,IAAA,GACF;AAAA,IAEA,gBAAAtB,EAAC,OAAA,EAAI,WAAU,0CACb,UAAA;AAAA,MAAA,gBAAAA,EAAC,OAAA,EAAI,WAAU,qCACb,UAAA;AAAA,QAAA,gBAAAtE,EAAC,MAAA,EAAG,WAAU,wCAAuC,UAAA,iBAAa;AAAA,QAClE,gBAAAA;AAAA,UAACuE;AAAA,UAAA;AAAA,YACC,MAAK;AAAA,YACL,SAAQ;AAAA,YACR,SAAS,MAAM;AACb,cAAAiP,EAAa;AAAA,gBACX,MAAM7V,EAAM,SAAS,WAAW,WAC1BA,EAAM,SAAS,YAAYA,EAAM,SAAS,gBAAgB,aAC1DA,EAAM,SAAS,UAAU,eACzBA,EAAM,SAAS,aAAa,aAAa;AAAA,gBAC/C,UAAU;AAAA,cAAA,CACX;AAAA,YACH;AAAA,YACD,UAAA;AAAA,UAAA;AAAA,QAAA;AAAA,MAED,GACF;AAAA,MAEA,gBAAAqC;AAAA,QAACgG;AAAA,QAAA;AAAA,UAEC,OAAM;AAAA,UACN,MAAK;AAAA,UACL,OAAOrI,EAAM,QAAQ,UAAU,cAAc;AAAA,UAC7C,eAAe,CAAC2E,MACdkR,EAAa,EAAE,UAAU,SAASlR,CAAK,KAAK,QAAW;AAAA,UAEzD,MAAK;AAAA,UACL,aAAY;AAAA,QAAA;AAAA,QARP,aAAa3E,EAAM,EAAE;AAAA,MAAA;AAAA,MAW5B,gBAAAqC;AAAA,QAACgG;AAAA,QAAA;AAAA,UAEC,OAAM;AAAA,UACN,aAAY;AAAA,UACZ,OAAOrI,EAAM,QAAQ,QAAQ;AAAA,UAC7B,eAAe,CAAC2E,MAAUkR,EAAa,EAAE,MAAMlR,GAAO;AAAA,UACtD,MAAK;AAAA,UACL,aAAY;AAAA,QAAA;AAAA,QANP,QAAQ3E,EAAM,EAAE;AAAA,MAAA;AAAA,IAOvB,EAAA,CACF;AAAA,EAAA,GACF;AAEJ;AAIA,MAAM0T,KAA0BnI,GAAM,KAAKuI,EAAe,GACpDH,KAA2BpI,GAAM,KAAK6J,EAAgB,GACtDxB,KAA2BrI,GAAM,KAAKiK,EAAgB,GACtDf,KAAwBlJ,GAAM,KAAKmJ,EAAa;AC5mC/C,SAASyB,KAAqB;AACnC,QAAM,EAAE,OAAAzV,GAAO,SAAAW,EAAA,IAAYiB,EAAA,GACrB,EAAE,aAAA0O,GAAa,aAAAD,EAAA,IAAgBrQ,GAC/B,CAAC0V,GAAcC,CAAe,IAAIjR,EAGrC,EAAE,MAAM,MAAM,SAAS,IAAI,GAExB;AAAA,IACJ,QAAQkR;AAAA,IACR,QAAQC;AAAA,IACR,cAAcC;AAAA,EAAA,IACZnF,EAAA,GAEE;AAAA,IACJ,QAAQoF;AAAA,IACR,QAAQC;AAAA,IACR,cAAcC;AAAA,EAAA,IACZtF,EAAA,GAEEuF,IAAgB,MAAM;AAE1B,IAAAvV,EAAQ,eAAe,CAAC2P,CAAW;AAAA,EACrC,GAEM6F,IAAe,MAAM;AACzB,IAAAtG,GAAmBQ,CAAW;AAAA,EAChC,GAEM+F,IAAoB,MAAM;AAE9B,IAAAP,EAAA;AAAA,EACF,GAEMQ,IAAmB,CAACpF,MAAuB;AAE/C,QAAI,CAACA,KAAQ,OAAOA,KAAS,SAAU,QAAO;AAG9C,QAAIA,EAAK,YAAYA,EAAK,QAAQ;AAGhC,UADI,CAACA,EAAK,SAAS,SAAS,OAAOA,EAAK,SAAS,SAAU,YACvD,CAAC,MAAM,QAAQA,EAAK,MAAM,EAAG,QAAO;AAGxC,iBAAW3R,KAAS2R,EAAK;AACvB,YAAI,CAAC3R,EAAM,MAAM,CAACA,EAAM,QAAQ,CAACA,EAAM,MAAO,QAAO;AAEvD,aAAO;AAAA,IACT;AAGA,QAAI2R,EAAK,SAASA,EAAK,QAAQ;AAE7B,UADI,OAAOA,EAAK,SAAU,YACtB,CAAC,MAAM,QAAQA,EAAK,MAAM,EAAG,QAAO;AAGxC,iBAAW3R,KAAS2R,EAAK;AACvB,YAAI,CAAC3R,EAAM,MAAM,CAACA,EAAM,QAAQ,CAACA,EAAM,MAAO,QAAO;AAEvD,aAAO;AAAA,IACT;AAEA,WAAO;AAAA,EACT,GAEMgX,IAAe,MAAM;AACzB,IAAAX,EAAgB,EAAE,MAAM,MAAM,SAAS,IAAI,GAC3CK,EAAA;AAAA,EACF,GAEMO,IAAsB,CAACtF,MAEvBA,EAAK,SAASA,EAAK,UAAU,CAACA,EAAK,WAC9BA,IAIF;AAAA,IACL,IAAIA,EAAK,UAAU,MAAMA,EAAK;AAAA,IAC9B,OAAOA,EAAK,UAAU,SAASA,EAAK;AAAA,IACpC,aAAaA,EAAK,UAAU,eAAeA,EAAK,eAAe;AAAA,IAC/D,QAAQA,EAAK;AAAA,IACb,UAAUA,EAAK,YAAY;AAAA,MACzB,kBAAkB;AAAA,MAClB,0BAA0B;AAAA,MAC1B,aAAa;AAAA,MACb,gBAAgB;AAAA,MAChB,OAAO;AAAA,IAAA;AAAA,EACT,GAIEuF,IAAmB,CAAC1H,MAAe;AACvC,UAAM2H,IAAS,IAAI,WAAA;AACnB,IAAAA,EAAO,SAAS,CAACxM,MAAM;AACrB,UAAI;AACF,cAAMyM,IAAe,KAAK,MAAMzM,EAAE,QAAQ,MAAgB;AAE1D,YAAI,CAACoM,EAAiBK,CAAY,GAAG;AACnC,UAAAf,EAAgB;AAAA,YACd,MAAM;AAAA,YACN,SAAS;AAAA,UAAA,CACV;AACD;AAAA,QACF;AAGA,cAAMrI,IAAWiJ,EAAoBG,CAAY;AAGjD,QAAA/V,EAAQ,QAAQ2M,CAAQ,GACxBqI,EAAgB;AAAA,UACd,MAAM;AAAA,UACN,SAAS,0BAA0BrI,EAAS,KAAK,UAAUA,EAAS,OAAO,MAAM;AAAA,QAAA,CAClF,GAGD,WAAW,MAAM;AACf,UAAA2I,EAAA,GACAN,EAAgB,EAAE,MAAM,MAAM,SAAS,IAAI;AAAA,QAC7C,GAAG,GAAI;AAAA,MAET,QAAgB;AACd,QAAAA,EAAgB;AAAA,UACd,MAAM;AAAA,UACN,SAAS;AAAA,QAAA,CACV;AAAA,MACH;AAAA,IACF,GACAc,EAAO,WAAW3H,CAAI;AAAA,EACxB;AAGA,SACE,gBAAA7I,EAAAiC,GAAA,EACE,UAAA;AAAA,IAAA,gBAAAjC,EAAC0Q,IAAA,EAAO,WAAU,2BAA0B,UAAS,QACnD,UAAA;AAAA,MAAA,gBAAAhV,EAACiV,MACC,UAAA,gBAAAjV,EAAC,MAAA,EAAG,WAAU,+CAA8C,0BAE5D,EAAA,CACF;AAAA,MAEA,gBAAAA,EAACkV,IAAA,EAAc,WAAU,uBAAsB,SAAQ,UACvD;AAAA,MAEA,gBAAAlV,EAACkV,IAAA,EAAc,SAAQ,OACrB,UAAA,gBAAAlV,EAACmV,IAAA,EACC,UAAA,gBAAA7Q,EAACgG,IAAA,EAAY,QAAO,MAAK,MAAK,MAC5B,UAAA;AAAA,QAAA,gBAAAtK;AAAA,UAACuE;AAAA,UAAA;AAAA,YACC,SAAQ;AAAA,YACR,SAASgQ;AAAA,YACT,MAAK;AAAA,YACL,WAAU;AAAA,YAET,cAAc,cAAc;AAAA,UAAA;AAAA,QAAA;AAAA,QAE/B,gBAAAvU;AAAA,UAACuE;AAAA,UAAA;AAAA,YACC,SAAQ;AAAA,YACR,YAAU;AAAA,YACV,SAASgQ;AAAA,YACT,MAAK;AAAA,YACL,WAAU;AAAA,YAEV,UAAA,gBAAAvU,EAACoV,IAAA,EAAM,MAAM,GAAA,CAAI;AAAA,UAAA;AAAA,QAAA;AAAA,0BAElBC,IAAA,EACC,UAAA;AAAA,UAAA,gBAAArV,EAACsV,IAAA,EACC,UAAA,gBAAAtV,EAACuE,GAAA,EAAO,SAAQ,QAAO,YAAU,IAAC,MAAK,MACrC,UAAA,gBAAAvE,EAACuV,IAAA,CAAA,CAAa,EAAA,CAChB,GACF;AAAA,4BACCC,IAAA,EACC,UAAA;AAAA,YAAA,gBAAAxV;AAAA,cAACyV;AAAA,cAAA;AAAA,gBAEC,cAAc,gBAAAzV,EAAC0V,IAAA,EAAS,MAAM,GAAA,CAAI;AAAA,gBAClC,SAASlB;AAAA,gBACV,UAAA;AAAA,cAAA;AAAA,cAHK;AAAA,YAAA;AAAA,YAMN,gBAAAxU;AAAA,cAACyV;AAAA,cAAA;AAAA,gBAEC,cAAc,gBAAAzV,EAAC2V,IAAA,EAAS,MAAM,GAAA,CAAI;AAAA,gBAClC,SAASlB;AAAA,gBACV,UAAA;AAAA,cAAA;AAAA,cAHK;AAAA,YAAA;AAAA,YAMN,gBAAAzU;AAAA,cAACyV;AAAA,cAAA;AAAA,gBAEC,cAAc,gBAAAzV,EAACqI,GAAA,EAAO,MAAM,GAAA,CAAI;AAAA,gBAChC,SAASsM;AAAA,gBACV,UAAA;AAAA,cAAA;AAAA,cAHK;AAAA,YAAA;AAAA,UAKN,EAAA,CACF;AAAA,QAAA,EAAA,CACF;AAAA,MAAA,EAAA,CACF,GACF,EAAA,CACF;AAAA,IAAA,GACF;AAAA,IAEA,gBAAA3U;AAAA,MAAC4V;AAAA,MAAA;AAAA,QACC,QAAQ3B;AAAA,QACR,cAAcE;AAAA,QACd,MAAMzF;AAAA,MAAA;AAAA,IAAA;AAAA,IAIR,gBAAA1O,EAAC0P,GAAA,EAAM,QAAQ0E,GAAc,cAAcE,GAAoB,MAAK,OAClE,UAAA,gBAAAtU,EAAC2P,IAAA,EACE,UAAA,CAACC,MACA,gBAAAtL,EAAAiC,GAAA,EACE,UAAA;AAAA,MAAA,gBAAAjC,EAACuL,IAAA,EAAY,WAAU,uBACrB,UAAA;AAAA,QAAA,gBAAA7P,EAAC,MAAA,EAAG,WAAU,yBAAwB,UAAA,eAAW;AAAA,QACjD,gBAAAA,EAAC,KAAA,EAAE,WAAU,4BAA2B,UAAA,oEAAA,CAExC;AAAA,MAAA,GACF;AAAA,wBACC8P,IAAA,EACE,UAAA;AAAA,QAAA,gBAAA9P,EAAC,SAAI,WAAU,aACV,UAAA,gBAAAsE,EAAC,OAAA,EAAI,WAAU,mHACb,UAAA;AAAA,UAAA,gBAAAtE,EAACqI,GAAA,EAAO,WAAU,iCAAgC,MAAM,IAAI;AAAA,UAC5D,gBAAArI,EAAC,KAAA,EAAE,WAAU,iCAAgC,UAAA,oCAE7C;AAAA,UACA,gBAAAA,EAAC,KAAA,EAAE,WAAU,4BAA2B,UAAA,2BAExC;AAAA,UACA,gBAAAA;AAAA,YAAC;AAAA,YAAA;AAAA,cACC,MAAK;AAAA,cACL,QAAO;AAAA,cACP,WAAU;AAAA,cACV,UAAU,CAACsI,MAAM;AACf,sBAAM6E,IAAO7E,EAAE,OAAO,QAAQ,CAAC;AAC/B,gBAAI6E,KACF0H,EAAiB1H,CAAI;AAAA,cAEzB;AAAA,YAAA;AAAA,UAAA;AAAA,QACF,EAAA,CACF,EAAA,CACF;AAAA,QAEH4G,EAAa,QACZ,gBAAA/T,EAAC,OAAA,EAAI,WAAU,QACb,UAAA,gBAAAsE,EAAC,OAAA,EAAI,WAAW,0CACdyP,EAAa,SAAS,YAClB,6DACA,uDACN,IACG,UAAA;AAAA,UAAAA,EAAa,SAAS,YACrB,gBAAA/T,EAAC6V,IAAA,EAAY,WAAU,WAAU,IAEjC,gBAAA7V,EAAC8V,IAAA,EAAY,WAAU,UAAA,CAAU;AAAA,UAEnC,gBAAA9V,EAAC,QAAA,EAAK,WAAU,WAAW,YAAa,QAAA,CAAQ;AAAA,QAAA,EAAA,CAClD,EAAA,CACF;AAAA,MAAA,GAEJ;AAAA,MACA,gBAAAA,EAAC+P,MACC,UAAA,gBAAA/P,EAACuE,GAAA,EAAO,SAAQ,QAAO,SAASqL,GAAS,UAAA,QAAA,CAEzC,EAAA,CACF;AAAA,IAAA,EAAA,CACF,GAEJ,EAAA,CACF;AAAA,EAAA,GACF;AAEJ;AAEA,SAASgG,GAAiB;AAAA,EACxB,QAAAG;AAAA,EACA,cAAAC;AAAA,EACA,MAAA/W;AACF,GAIG;AACD,QAAM,CAACgX,GAAQC,CAAS,IAAInT,EAAS,EAAK,GACpC,CAACoT,GAAWC,CAAY,IAAIrT,EAAS,WAAW,GAEhDsT,IAAiB7I,GAAuBvO,CAAI,GAC5CqX,IAAgB,KAAK,UAAUD,GAAgB,MAAM,CAAC,GACtDE,IAAc,KAAK,UAAUF,CAAc,GAE3CG,IAAa,MAAM;AACvB,cAAU,UAAU,UAAUF,CAAa,GAC3CJ,EAAU,EAAI,GACd,WAAW,MAAMA,EAAU,EAAK,GAAG,GAAI;AAAA,EACzC,GAEMO,IAAiB,MAAM;AAC3B,UAAMnI,IAAO,IAAI,KAAK,CAACgI,CAAa,GAAG,EAAE,MAAM,oBAAoB,GAC7D/H,IAAM,IAAI,gBAAgBD,CAAI,GAC9BoI,IAAI,SAAS,cAAc,GAAG;AACpC,IAAAA,EAAE,OAAOnI,GACTmI,EAAE,WAAW,GAAGzX,EAAK,MAAM,QAAQ,QAAQ,GAAG,CAAC,qBAC/C,SAAS,KAAK,YAAYyX,CAAC,GAC3BA,EAAE,MAAA,GACF,SAAS,KAAK,YAAYA,CAAC,GAC3B,IAAI,gBAAgBnI,CAAG;AAAA,EACzB;AAEA,SACE,gBAAAvO;AAAA,IAAC0P;AAAA,IAAA;AAAA,MACC,QAAAqG;AAAA,MACA,cAAAC;AAAA,MACA,MAAK;AAAA,MACL,gBAAe;AAAA,MACf,iBAAe;AAAA,MAEf,UAAA,gBAAAhW,EAAC2P,IAAA,EACE,UAAA,CAACC,MACA,gBAAAtL,EAAAiC,GAAA,EACE,UAAA;AAAA,QAAA,gBAAAvG,EAAC6P,MAAY,WAAU,uBACrB,UAAA,gBAAAvL,EAAC,OAAA,EAAI,WAAU,qCACb,UAAA;AAAA,UAAA,gBAAAA,EAAC,OAAA,EACC,UAAA;AAAA,YAAA,gBAAAtE,EAAC,MAAA,EAAG,WAAU,yBAAwB,UAAA,2BAEtC;AAAA,YACA,gBAAAA,EAAC,KAAA,EAAE,WAAU,4BAA2B,UAAA,8CAAA,CAExC;AAAA,UAAA,GACF;AAAA,UACA,gBAAAsE,EAAC,OAAA,EAAI,WAAU,cACb,UAAA;AAAA,YAAA,gBAAAtE;AAAA,cAACuE;AAAA,cAAA;AAAA,gBACC,MAAK;AAAA,gBACL,SAAQ;AAAA,gBACR,cACE0R,IACE,gBAAAjW,EAACyE,IAAA,EAAM,WAAU,WAAU,IAE3B,gBAAAzE,EAACwK,IAAA,EAAK,WAAU,UAAA,CAAU;AAAA,gBAG9B,SAASgM;AAAA,gBAER,cAAS,YAAY;AAAA,cAAA;AAAA,YAAA;AAAA,YAExB,gBAAAxW;AAAA,cAACuE;AAAA,cAAA;AAAA,gBACC,MAAK;AAAA,gBACL,OAAM;AAAA,gBACN,cAAc,gBAAAvE,EAAC0V,IAAA,EAAS,WAAU,UAAA,CAAU;AAAA,gBAC5C,SAASe;AAAA,gBACV,UAAA;AAAA,cAAA;AAAA,YAAA;AAAA,UAED,EAAA,CACF;AAAA,QAAA,EAAA,CACF,EAAA,CACF;AAAA,0BACC3G,IAAA,EACC,UAAA,gBAAAxL;AAAA,UAAC6M;AAAA,UAAA;AAAA,YACC,aAAagF;AAAA,YACb,mBAAmB,CAACvQ,MAAQwQ,EAAaxQ,CAAa;AAAA,YACtD,cAAW;AAAA,YAEX,UAAA;AAAA,cAAA,gBAAA5F,EAACoR,GAAA,EAAoB,OAAM,aACzB,UAAA,gBAAA9M,EAACyE,GAAA,EACC,UAAA;AAAA,gBAAA,gBAAA/I,EAACsN,GAAA,EACC,UAAA,gBAAAhJ,EAAC,OAAA,EAAI,WAAU,qCACb,UAAA;AAAA,kBAAA,gBAAAtE,EAAC,MAAA,EAAG,WAAU,uBAAsB,UAAA,kBAAc;AAAA,kBAClD,gBAAAsE,EAAC,OAAA,EAAI,WAAU,4BACZ,UAAA;AAAA,oBAAA+R,EAAe,OAAO;AAAA,oBAAY;AAAA,oBAAU;AAAA,oBAC5CA,EAAe,OAAO,KAAK;AAAA,oBAAO;AAAA,kBAAA,EAAA,CACrC;AAAA,gBAAA,EAAA,CACF,EAAA,CACF;AAAA,kCACCrN,GAAA,EACC,UAAA,gBAAAhJ,EAAC,SAAI,WAAU,yEACZ,aACH,EAAA,CACF;AAAA,cAAA,EAAA,CACF,KAhBO,WAiBT;AAAA,cACA,gBAAAA,EAACoR,GAAA,EAAkB,OAAM,WACvB,4BAACrI,GAAA,EACC,UAAA;AAAA,gBAAA,gBAAA/I,EAACsN,KACC,UAAA,gBAAAtN,EAAC,MAAA,EAAG,WAAU,uBAAsB,0BAAY,EAAA,CAClD;AAAA,kCACCgJ,GAAA,EACC,UAAA,gBAAAhJ,EAAC,SAAI,WAAU,mFACZ,aACH,EAAA,CACF;AAAA,cAAA,EAAA,CACF,KAVO,SAWT;AAAA,cACA,gBAAAA,EAACoR,GAAA,EAAmB,OAAM,YACxB,4BAACrI,GAAA,EACC,UAAA;AAAA,gBAAA,gBAAA/I,EAACsN,KACC,UAAA,gBAAAtN,EAAC,MAAA,EAAG,WAAU,uBAAsB,8BAAgB,EAAA,CACtD;AAAA,gBACA,gBAAAA,EAACgJ,GAAA,EACC,UAAA,gBAAA1E,EAAC,OAAA,EAAI,WAAU,aACb,UAAA;AAAA,kBAAA,gBAAAA,EAAC,OAAA,EAAI,WAAU,0BACb,UAAA;AAAA,oBAAA,gBAAAA,EAAC,OAAA,EACC,UAAA;AAAA,sBAAA,gBAAAtE,EAAC,SAAA,EAAM,WAAU,wCAAuC,UAAA,SAExD;AAAA,wCACC,KAAA,EAAE,WAAU,4BACV,UAAAqW,EAAe,SAAS,MAAA,CAC3B;AAAA,oBAAA,GACF;AAAA,sCACC,OAAA,EACC,UAAA;AAAA,sBAAA,gBAAArW,EAAC,SAAA,EAAM,WAAU,wCAAuC,UAAA,WAExD;AAAA,wCACC,KAAA,EAAE,WAAU,4BACV,UAAAqW,EAAe,SAAS,QAAA,CAC3B;AAAA,oBAAA,GACF;AAAA,sCACC,OAAA,EACC,UAAA;AAAA,sBAAA,gBAAArW,EAAC,SAAA,EAAM,WAAU,wCAAuC,UAAA,gBAExD;AAAA,wCACC,KAAA,EAAE,WAAU,4BACV,UAAAqW,EAAe,OAAO,YAAA,CACzB;AAAA,oBAAA,GACF;AAAA,sCACC,OAAA,EACC,UAAA;AAAA,sBAAA,gBAAArW,EAAC,SAAA,EAAM,WAAU,wCAAuC,UAAA,mBAExD;AAAA,wCACC,KAAA,EAAE,WAAU,4BACV,UAAAqW,EAAe,WAAW,eAAe,OAAA,CAC5C;AAAA,oBAAA,EAAA,CACF;AAAA,kBAAA,GACF;AAAA,oCAEC,OAAA,EACC,UAAA;AAAA,oBAAA,gBAAArW,EAAC,SAAA,EAAM,WAAU,wCAAuC,UAAA,eAExD;AAAA,sCACC,KAAA,EAAE,WAAU,4BACV,UAAAqW,EAAe,SAAS,eACvB,0BAAA,CACJ;AAAA,kBAAA,GACF;AAAA,oCAEC,OAAA,EACC,UAAA;AAAA,oBAAA,gBAAArW,EAAC,SAAA,EAAM,WAAU,wCAAuC,UAAA,eAExD;AAAA,oBACA,gBAAAA,EAAC,OAAA,EAAI,WAAU,6BACZ,UAAA;AAAA,sBACC,GAAG,IAAI;AAAA,wBACLqW,EAAe,OAAO,IAAI,CAACtY,MAAMA,EAAE,IAAI;AAAA,sBAAA;AAAA,oBACzC,EACA,IAAI,CAACsC,MACL,gBAAAL;AAAA,sBAAC;AAAA,sBAAA;AAAA,wBAEC,WAAU;AAAA,wBAET,UAAAK;AAAA,sBAAA;AAAA,sBAHIA;AAAA,oBAAA,CAKR,EAAA,CACH;AAAA,kBAAA,GACF;AAAA,oCAEC,OAAA,EACC,UAAA;AAAA,oBAAA,gBAAAL,EAAC,SAAA,EAAM,WAAU,wCAAuC,UAAA,YAExD;AAAA,sCACC,OAAA,EAAI,WAAU,qCACb,UAAA,gBAAAsE,EAAC,OAAA,EAAI,WAAU,kCACb,UAAA;AAAA,sBAAA,gBAAAA,EAAC,OAAA,EACC,UAAA;AAAA,wBAAA,gBAAAtE,EAAC,QAAA,EAAK,WAAU,oBAAmB,UAAA,kBAEnC;AAAA,0CACC,QAAA,EAAK,WAAU,yBACb,UAAAqW,EAAe,SAAS,iBAAA,CAC3B;AAAA,sBAAA,GACF;AAAA,wCACC,OAAA,EACC,UAAA;AAAA,wBAAA,gBAAArW,EAAC,QAAA,EAAK,WAAU,oBAAmB,UAAA,UAAM;AAAA,0CACxC,QAAA,EAAK,WAAU,yBACb,UAAAqW,EAAe,SAAS,MAAA,CAC3B;AAAA,sBAAA,GACF;AAAA,wCACC,OAAA,EACC,UAAA;AAAA,wBAAA,gBAAArW,EAAC,QAAA,EAAK,WAAU,oBAAmB,UAAA,yBAEnC;AAAA,wBACA,gBAAAA,EAAC,UAAK,WAAU,yBACb,YAAe,SACb,2BACC,QACA,KAAA,CACN;AAAA,sBAAA,GACF;AAAA,wCACC,OAAA,EACC,UAAA;AAAA,wBAAA,gBAAAA,EAAC,QAAA,EAAK,WAAU,oBAAmB,UAAA,YAEnC;AAAA,wBACA,gBAAAA,EAAC,UAAK,WAAU,yBACb,YAAe,SAAS,iBACrB,YACA,WAAA,CACN;AAAA,sBAAA,EAAA,CACF;AAAA,oBAAA,EAAA,CACF,EAAA,CACF;AAAA,kBAAA,EAAA,CACF;AAAA,gBAAA,EAAA,CACF,EAAA,CACF;AAAA,cAAA,EAAA,CACF,KAtHO,UAuHT;AAAA,YAAA;AAAA,UAAA;AAAA,QAAA,GAEJ;AAAA,QACA,gBAAAA,EAAC+P,IAAA,EACC,UAAA,gBAAA/P,EAACuE,GAAA,EAAO,OAAM,WAAU,SAAQ,SAAQ,SAASqL,GAAS,UAAA,QAAA,CAE1D,EAAA,CACF;AAAA,MAAA,EAAA,CACF,EAAA,CAEJ;AAAA,IAAA;AAAA,EAAA;AAGN;AChiBO,SAAS+G,KAAmB;AACjC,QAAM,CAACC,GAAWC,CAAY,IAAI9T,EAAS,EAAE,GACvC,CAAC+T,GAAYC,CAAa,IAAIhU,EAAgC,IAAI,GAClE,CAACiU,GAAYC,CAAa,IAAIlU,EAAS,EAAE,GACzC,CAAC2J,GAAgBkC,CAAiB,IAAI7L,EAGlC,IAAI,GACR,CAACkT,GAAQC,CAAS,IAAInT,EAAS,EAAK,GACpC;AAAA,IACJ,QAAQ8L;AAAA,IACR,QAAQC;AAAA,IACR,cAAcC;AAAA,EAAA,IACZC,EAAA,GAGEkI,IAAa;AAAA,IACjB,UAAU;AAAA,MACR,IAAI;AAAA,MACJ,OAAO;AAAA,MACP,aAAa;AAAA,MACb,SAAS;AAAA,MACT,WAAW;AAAA,MACX,YAAY;AAAA,MACZ,gBAAgB;AAAA,IAAA;AAAA,IAElB,UAAU;AAAA,MACR,kBAAkB;AAAA,MAClB,0BAA0B;AAAA,MAC1B,aAAa;AAAA,MACb,gBAAgB;AAAA,MAChB,OAAO;AAAA,IAAA;AAAA,IAET,QAAQ;AAAA,MACN,MAAM;AAAA,QACJ;AAAA,UACE,IAAI;AAAA,UACJ,QAAQ,CAAC,cAAc,aAAa;AAAA,UACpC,SAAS;AAAA,QAAA;AAAA,QAEX;AAAA,UACE,IAAI;AAAA,UACJ,QAAQ,CAAC,eAAe;AAAA,UACxB,SAAS;AAAA,QAAA;AAAA,MACX;AAAA,MAEF,aAAa;AAAA,IAAA;AAAA,IAEf,QAAQ;AAAA,MACN;AAAA,QACE,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,OAAO;AAAA,QACP,MAAM;AAAA,QACN,aAAa;AAAA,QACb,UAAU;AAAA,QACV,YAAY;AAAA,UACV,OAAO;AAAA,UACP,UAAU;AAAA,QAAA;AAAA,QAEZ,QAAQ;AAAA,UACN,YAAY;AAAA,UACZ,OAAO;AAAA,UACP,WAAW;AAAA,QAAA;AAAA,MACb;AAAA,MAEF;AAAA,QACE,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,OAAO;AAAA,QACP,MAAM;AAAA,QACN,aAAa;AAAA,QACb,UAAU;AAAA,QACV,YAAY;AAAA,UACV,OAAO;AAAA,UACP,UAAU;AAAA,QAAA;AAAA,QAEZ,QAAQ;AAAA,UACN,YAAY;AAAA,UACZ,OAAO;AAAA,UACP,WAAW;AAAA,QAAA;AAAA,MACb;AAAA,MAEF;AAAA,QACE,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,OAAO;AAAA,QACP,MAAM;AAAA,QACN,aAAa;AAAA,QACb,UAAU;AAAA,QACV,YAAY;AAAA,UACV,OAAO;AAAA,UACP,MAAM;AAAA,UACN,UAAU;AAAA,QAAA;AAAA,QAEZ,QAAQ;AAAA,UACN,YAAY;AAAA,UACZ,OAAO;AAAA,UACP,WAAW;AAAA,QAAA;AAAA,MACb;AAAA,IACF;AAAA,IAEF,UAAU;AAAA,MACR,cAAc;AAAA,QACZ,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,OAAO;AAAA,QACP,MAAM;AAAA,QACN,aAAa;AAAA,QACb,UAAU;AAAA,QACV,YAAY;AAAA,UACV,OAAO;AAAA,UACP,UAAU;AAAA,QAAA;AAAA,QAEZ,QAAQ;AAAA,UACN,YAAY;AAAA,UACZ,OAAO;AAAA,UACP,WAAW;AAAA,QAAA;AAAA,MACb;AAAA,MAEF,eAAe;AAAA,QACb,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,OAAO;AAAA,QACP,MAAM;AAAA,QACN,aAAa;AAAA,QACb,UAAU;AAAA,QACV,YAAY;AAAA,UACV,OAAO;AAAA,UACP,UAAU;AAAA,QAAA;AAAA,QAEZ,QAAQ;AAAA,UACN,YAAY;AAAA,UACZ,OAAO;AAAA,UACP,WAAW;AAAA,QAAA;AAAA,MACb;AAAA,MAEF,iBAAiB;AAAA,QACf,IAAI;AAAA,QACJ,MAAM;AAAA,QACN,OAAO;AAAA,QACP,MAAM;AAAA,QACN,aAAa;AAAA,QACb,UAAU;AAAA,QACV,YAAY;AAAA,UACV,OAAO;AAAA,UACP,MAAM;AAAA,UACN,UAAU;AAAA,QAAA;AAAA,QAEZ,QAAQ;AAAA,UACN,YAAY;AAAA,UACZ,OAAO;AAAA,UACP,WAAW;AAAA,QAAA;AAAA,MACb;AAAA,IACF;AAAA,IAEF,YAAY;AAAA,MACV,gBAAgB,CAAC,cAAc,aAAa;AAAA,MAC5C,sBAAsB,CAAC,aAAa;AAAA,IAAA;AAAA,EACtC,GAGIC,IAAkB,MAAM;AAC5B,QAAI;AACF,MAAAF,EAAc,EAAE;AAChB,YAAMG,IAAS,KAAK,MAAMR,CAAS;AAGnC,UACE,CAACQ,EAAO,YACR,CAACA,EAAO,YACR,CAACA,EAAO,UACR,CAACA,EAAO,UACR,CAACA,EAAO;AAER,cAAM,IAAI;AAAA,UACR;AAAA,QAAA;AAIJ,MAAAL,EAAcK,CAAM;AAAA,IACtB,SAASxK,GAAO;AACd,MAAAqK;AAAA,QACErK,aAAiB,QACbA,EAAM,UACN;AAAA,MAAA,GAENmK,EAAc,IAAI;AAAA,IACpB;AAAA,EACF,GAEMM,IAAiB,MAAM;AAC3B,IAAAR,EAAa,KAAK,UAAUK,GAAY,MAAM,CAAC,CAAC,GAChDH,EAAcG,CAAU,GACxBD,EAAc,EAAE;AAAA,EAClB,GAEMK,IAAkB,YAAY;AAClC,UAAM,UAAU,UAAU,UAAU,KAAK,UAAUJ,GAAY,MAAM,CAAC,CAAC,GACvEhB,EAAU,EAAI,GACd,WAAW,MAAMA,EAAU,EAAK,GAAG,GAAI;AAAA,EACzC,GAEMqB,IAAmB,CAACjI,MAA8B;AACtD,IAAAV,EAAkBU,CAAI,GACtBR,EAAA;AAAA,EACF;AA6BA,2BACG,OAAA,EAAI,WAAU,8BACb,UAAA,gBAAAxK,EAAC,OAAA,EAAI,WAAU,eAEb,UAAA;AAAA,IAAA,gBAAAA,EAAC,OAAA,EAAI,WAAU,QACb,UAAA;AAAA,MAAA,gBAAAtE,EAAC,MAAA,EAAG,WAAU,2BAA0B,UAAA,sBAAkB;AAAA,MAC1D,gBAAAA,EAAC,KAAA,EAAE,WAAU,oBAAmB,UAAA,oEAAA,CAEhC;AAAA,IAAA,GACF;AAAA,IAEA,gBAAAsE,EAAC,OAAA,EAAI,WAAU,mCAEb,UAAA;AAAA,MAAA,gBAAAA,EAAC,OAAA,EAAI,WAAU,cACb,UAAA;AAAA,QAAA,gBAAAA,EAACyE,GAAA,EAAK,QAAO,MACX,UAAA;AAAA,UAAA,gBAAA/I,EAACsN,GAAA,EACC,4BAAC,OAAA,EAAI,WAAU,gDACb,UAAA,gBAAAhJ,EAAC,OAAA,EAAI,WAAU,wBACb,UAAA;AAAA,YAAA,gBAAAtE;AAAA,cAAC;AAAA,cAAA;AAAA,gBACC,MAAK;AAAA,gBACL,QAAO;AAAA,gBACP,UAhDK,CAACyD,MAA+C;AACvE,wBAAM0J,IAAO1J,EAAM,OAAO,QAAQ,CAAC;AACnC,sBAAI0J,KAAQA,EAAK,SAAS,oBAAoB;AAC5C,0BAAM2H,IAAS,IAAI,WAAA;AACnB,oBAAAA,EAAO,SAAS,CAACxM,MAAM;AACrB,4BAAMkP,IAAUlP,EAAE,QAAQ;AAC1B,sBAAAuO,EAAaW,CAAO;AACpB,0BAAI;AACF,8BAAMJ,IAAS,KAAK,MAAMI,CAAO;AACjC,wBAAAT,EAAcK,CAAM,GACpBH,EAAc,EAAE;AAAA,sBAClB,QAAgB;AACd,wBAAAA,EAAc,0BAA0B,GACxCF,EAAc,IAAI;AAAA,sBACpB;AAAA,oBACF,GACAjC,EAAO,WAAW3H,CAAI;AAAA,kBACxB;AAAA,gBACF;AAAA,gBA+BoB,WAAU;AAAA,gBACV,IAAG;AAAA,cAAA;AAAA,YAAA;AAAA,YAEL,gBAAAnN;AAAA,cAACuE;AAAA,cAAA;AAAA,gBACC,MAAK;AAAA,gBACL,SAAQ;AAAA,gBACR,cAAc,gBAAAvE,EAACqI,GAAA,EAAO,WAAU,UAAA,CAAU;AAAA,gBAC1C,SAAS,MACP,SAAS,eAAe,kBAAkB,GAAG,MAAA;AAAA,gBAEhD,UAAA;AAAA,cAAA;AAAA,YAAA;AAAA,YAGD,gBAAArI;AAAA,cAACuE;AAAA,cAAA;AAAA,gBACC,MAAK;AAAA,gBACL,SAAQ;AAAA,gBACR,cACE0R,IACE,gBAAAjW,EAACyE,IAAA,EAAM,WAAU,WAAU,IAE3B,gBAAAzE,EAACwK,IAAA,EAAK,WAAU,UAAA,CAAU;AAAA,gBAG9B,SAAS8M;AAAA,gBAER,cAAS,YAAY;AAAA,cAAA;AAAA,YAAA;AAAA,YAExB,gBAAAtX;AAAA,cAACuE;AAAA,cAAA;AAAA,gBACC,MAAK;AAAA,gBACL,OAAM;AAAA,gBACN,SAAS8S;AAAA,gBACV,UAAA;AAAA,cAAA;AAAA,YAAA;AAAA,YAGD,gBAAArX;AAAA,cAACuE;AAAA,cAAA;AAAA,gBACC,MAAK;AAAA,gBACL,OAAM;AAAA,gBACN,SAAQ;AAAA,gBACR,SAnEF,MAAM;AACtB,kBAAAsS,EAAa,EAAE,GACfE,EAAc,IAAI,GAClBE,EAAc,EAAE,GAChBrI,EAAkB,IAAI;AAAA,gBACxB;AAAA,gBA+DmB,UAAA;AAAA,cAAA;AAAA,YAAA;AAAA,UAED,EAAA,CACF,GACF,GACF;AAAA,UACA,gBAAA5O,EAACgJ,GAAA,EACC,UAAA,gBAAA1E,EAAC,OAAA,EAAI,WAAU,QACb,UAAA;AAAA,YAAA,gBAAAtE;AAAA,cAACwG;AAAA,cAAA;AAAA,gBACC,aAAY;AAAA,gBACZ,OAAOoQ;AAAA,gBACP,UAAU,CAACtO,MAAMuO,EAAavO,EAAE,OAAO,KAAK;AAAA,gBAC5C,SAAS;AAAA,gBACT,WAAU;AAAA,gBACV,YAAY;AAAA,kBACV,aAAa;AAAA,kBACb,OAAO;AAAA,gBAAA;AAAA,cACT;AAAA,YAAA;AAAA,YAGD0O,KACC,gBAAA1S,EAAC,OAAA,EAAI,WAAU,0EACb,UAAA;AAAA,cAAA,gBAAAtE,EAAC8V,IAAA,EAAY,WAAU,+BAAA,CAA+B;AAAA,gCACrD,OAAA,EACC,UAAA;AAAA,gBAAA,gBAAA9V,EAAC,YAAO,UAAA,eAAA,CAAY;AAAA,gBAAS;AAAA,gBAAEgX;AAAA,cAAA,EAAA,CACjC;AAAA,YAAA,GACF;AAAA,YAGF,gBAAAhX,EAAC,OAAA,EAAI,WAAU,mBACb,UAAA,gBAAAA;AAAA,cAACuE;AAAA,cAAA;AAAA,gBACC,QAAO;AAAA,gBACP,OAAM;AAAA,gBACN,SAAS4S;AAAA,gBACT,YAAY,CAACP,EAAU,KAAA;AAAA,gBACvB,WAAU;AAAA,gBACX,UAAA;AAAA,cAAA;AAAA,YAAA,EAED,CACF;AAAA,UAAA,EAAA,CACF,EAAA,CACF;AAAA,QAAA,GACF;AAAA,QAGCE,KACC,gBAAAxS,EAACyE,GAAA,EAAK,QAAO,MAAK,WAAU,QAC1B,UAAA;AAAA,UAAA,gBAAA/I,EAACsN,KACC,UAAA,gBAAAtN,EAAC,MAAA,EAAG,WAAU,yBAAwB,8BAAgB,EAAA,CACxD;AAAA,UACA,gBAAAA,EAACgJ,GAAA,EACC,UAAA,gBAAA1E,EAAC,OAAA,EAAI,WAAU,qBACb,UAAA;AAAA,YAAA,gBAAAA,EAAC,OAAA,EAAI,WAAU,wBACb,UAAA;AAAA,cAAA,gBAAAtE,EAAC,QAAA,EAAK,WAAU,oBAAmB,UAAA,UAAM;AAAA,gCACxC,QAAA,EAAK,WAAU,eACb,UAAA8W,EAAW,SAAS,MAAA,CACvB;AAAA,YAAA,GACF;AAAA,YACA,gBAAAxS,EAAC,OAAA,EAAI,WAAU,wBACb,UAAA;AAAA,cAAA,gBAAAtE,EAAC,QAAA,EAAK,WAAU,oBAAmB,UAAA,WAAO;AAAA,gCACzC,QAAA,EAAK,WAAU,eACb,UAAA8W,EAAW,OAAO,OAAA,CACrB;AAAA,YAAA,GACF;AAAA,YACA,gBAAAxS,EAAC,OAAA,EAAI,WAAU,wBACb,UAAA;AAAA,cAAA,gBAAAtE,EAAC,QAAA,EAAK,WAAU,oBAAmB,UAAA,oBAAgB;AAAA,gCAClD,QAAA,EAAK,WAAU,eACb,UAAA8W,EAAW,WAAW,eAAe,OAAA,CACxC;AAAA,YAAA,GACF;AAAA,YACA,gBAAAxS,EAAC,OAAA,EAAI,WAAU,wBACb,UAAA;AAAA,cAAA,gBAAAtE,EAAC,QAAA,EAAK,WAAU,oBAAmB,UAAA,YAAQ;AAAA,gCAC1C,QAAA,EAAK,WAAU,eACb,UAAA8W,EAAW,SAAS,QAAA,CACvB;AAAA,YAAA,EAAA,CACF;AAAA,UAAA,EAAA,CACF,EAAA,CACF;AAAA,QAAA,EAAA,CACF;AAAA,MAAA,GAEJ;AAAA,MAGA,gBAAA9W,EAAC,SAAI,WAAU,cACZ,cACC,gBAAAA,EAAC,OAAA,EAAI,WAAU,IACb,UAAA,gBAAAA;AAAA,QAACwL;AAAA,QAAA;AAAA,UACC,YAAYsL;AAAA,UACZ,UAAUS;AAAA,QAAA;AAAA,MAAA,EACZ,CACF,IAEA,gBAAAjT,EAAC,OAAA,EAAI,WAAU,sCACb,UAAA;AAAA,QAAA,gBAAAtE,EAACyX,IAAA,EAAS,WAAU,oCAAA,CAAoC;AAAA,QACxD,gBAAAzX,EAAC,KAAA,EAAE,WAAU,4BAA2B,UAAA,gBAAY;AAAA,QACpD,gBAAAA,EAAC,OAAE,UAAA,4EAAA,CAGH;AAAA,MAAA,EAAA,CACF,EAAA,CAEJ;AAAA,IAAA,GACF;AAAA,IAGA,gBAAAA;AAAA,MAAC0P;AAAA,MAAA;AAAA,QACC,QAAQb;AAAA,QACR,cAAcE;AAAA,QACd,MAAK;AAAA,QAEL,UAAA,gBAAA/O,EAAC2P,IAAA,EACE,UAAA,CAACC,MACA,gBAAAtL,EAAAiC,GAAA,EACE,UAAA;AAAA,UAAA,gBAAAvG,EAAC6P,MAAY,UAAA,yBAAA,CAAsB;AAAA,UACnC,gBAAA7P,EAAC8P,IAAA,EACC,UAAA,gBAAAxL,EAAC,OAAA,EAAI,WAAU,aACb,UAAA;AAAA,YAAA,gBAAAA,EAAC,OAAA,EAAI,WAAU,wCACb,UAAA;AAAA,cAAA,gBAAAtE,EAACyE,IAAA,EAAM,WAAU,UAAA,CAAU;AAAA,cAC3B,gBAAAzE,EAAC,QAAA,EAAK,WAAU,eAAc,UAAA,+BAAA,CAE9B;AAAA,YAAA,GACF;AAAA,8BACCiJ,IAAA,EAAQ;AAAA,8BACR,OAAA,EACC,UAAA;AAAA,cAAA,gBAAAjJ,EAAC,MAAA,EAAG,WAAU,sBAAqB,UAAA,mBAAe;AAAA,cAClD,gBAAAA,EAAC,OAAA,EAAI,WAAU,gCACb,4BAAC,OAAA,EAAI,WAAU,6CACZ,UAAA,KAAK,UAAU0M,GAAgB,MAAM,CAAC,GACzC,EAAA,CACF;AAAA,YAAA,GACF;AAAA,YACA,gBAAApI,EAAC,OAAA,EAAI,WAAU,4BACb,UAAA;AAAA,cAAA,gBAAAtE,EAAC,YAAO,UAAA,QAAA,CAAK;AAAA,cAAS;AAAA,YAAA,EAAA,CAGxB;AAAA,UAAA,EAAA,CACF,EAAA,CACF;AAAA,4BACC+P,IAAA,EACC,UAAA;AAAA,YAAA,gBAAA/P;AAAA,cAACuE;AAAA,cAAA;AAAA,gBACC,OAAM;AAAA,gBACN,SAAQ;AAAA,gBACR,SAAS,YAAY;AACnB,kBAAImI,KACF,MAAM,UAAU,UAAU;AAAA,oBACxB,KAAK,UAAUA,GAAgB,MAAM,CAAC;AAAA,kBAAA;AAAA,gBAG5C;AAAA,gBACD,UAAA;AAAA,cAAA;AAAA,YAAA;AAAA,8BAGAnI,GAAA,EAAO,OAAM,WAAU,SAASqL,GAAS,UAAA,QAAA,CAE1C;AAAA,UAAA,EAAA,CACF;AAAA,QAAA,EAAA,CACF,EAAA,CAEJ;AAAA,MAAA;AAAA,IAAA;AAAA,EACF,EAAA,CACF,EAAA,CACF;AAEJ;AC3cA,MAAM8H,KAAmB,MAAM;AAC7B,QAAMC,IAAc;AAAA,IAClB;AAAA,MACE,MAAM,gBAAA3X,EAAC4X,IAAA,EAAO,WAAU,UAAA,CAAU;AAAA,MAClC,OAAO;AAAA,MACP,aAAa;AAAA,MACb,QAAQ;AAAA,IAAA;AAAA,IAEV;AAAA,MACE,MAAM,gBAAA5X,EAAC6X,IAAA,EAAI,WAAU,UAAA,CAAU;AAAA,MAC/B,OAAO;AAAA,MACP,aAAa;AAAA,MACb,QAAQ;AAAA,IAAA;AAAA,IAEV;AAAA,MACE,MAAM,gBAAA7X,EAAC8X,IAAA,EAAS,WAAU,UAAA,CAAU;AAAA,MACpC,OAAO;AAAA,MACP,aAAa;AAAA,MACb,QAAQ;AAAA,IAAA;AAAA,IAEV;AAAA,MACE,MAAM,gBAAA9X,EAACqI,GAAA,EAAO,WAAU,UAAA,CAAU;AAAA,MAClC,OAAO;AAAA,MACP,aAAa;AAAA,MACb,QAAQ;AAAA,IAAA;AAAA,EACV,GAGI0P,IAAe;AAAA,IACnB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA,GAGIC,IAAmB;AAAA,IACvB;AAAA,MACE,OAAO;AAAA,MACP,aAAa;AAAA,MACb,KAAK;AAAA,IAAA;AAAA,IAEP;AAAA,MACE,OAAO;AAAA,MACP,aAAa;AAAA,MACb,KAAK;AAAA,IAAA;AAAA,IAEP;AAAA,MACE,OAAO;AAAA,MACP,aAAa;AAAA,MACb,KAAK;AAAA,IAAA;AAAA,IAEP;AAAA,MACE,OAAO;AAAA,MACP,aAAa;AAAA,MACb,KAAK;AAAA,IAAA;AAAA,EACP;AAGF,SACE,gBAAA1T,EAAC,OAAA,EAAI,WAAU,yCAEb,UAAA;AAAA,IAAA,gBAAAA,EAAC,OAAA,EAAI,WAAU,qBACb,UAAA;AAAA,MAAA,gBAAAtE,EAAC,OAAA,EAAI,WAAU,4BACb,UAAA,gBAAAA;AAAA,QAACoN;AAAA,QAAA;AAAA,UACC,OAAM;AAAA,UACN,SAAQ;AAAA,UACR,cAAc,gBAAApN,EAACiY,IAAA,EAAK,WAAU,UAAA,CAAU;AAAA,UACxC,MAAK;AAAA,UACN,UAAA;AAAA,QAAA;AAAA,MAAA,GAGH;AAAA,MAEA,gBAAAjY,EAAC,MAAA,EAAG,WAAU,wHAAuH,UAAA,+BAErI;AAAA,MAEA,gBAAAA,EAAC,KAAA,EAAE,WAAU,mDAAkD,UAAA,2JAG/D;AAAA,MAEA,gBAAAA,EAAC,OAAA,EAAI,WAAU,+DACb,4BAAC+I,GAAA,EAAK,WAAU,uEACd,UAAA,gBAAA/I,EAACgJ,KAAS,WAAU,oBAClB,UAAA,gBAAA1E,EAAC,OAAA,EAAI,WAAU,0CACb,UAAA;AAAA,QAAA,gBAAAtE,EAACkY,IAAA,EAAO,WAAU,2BAAA,CAA2B;AAAA,0BAC5C,OAAA,EACC,UAAA;AAAA,UAAA,gBAAAlY,EAAC,KAAA,EAAE,WAAU,kCAAiC,UAAA,iBAAa;AAAA,UAC3D,gBAAAA;AAAA,YAAC;AAAA,YAAA;AAAA,cACC,MAAK;AAAA,cACL,QAAO;AAAA,cACP,KAAI;AAAA,cACJ,WAAU;AAAA,cACX,UAAA;AAAA,YAAA;AAAA,UAAA;AAAA,QAED,EAAA,CACF;AAAA,MAAA,GACF,EAAA,CACF,GACF,EAAA,CACF;AAAA,IAAA,GAEF;AAAA,IAGA,gBAAAA,EAAC+I,GAAA,EAAK,WAAU,QACd,4BAACC,GAAA,EACC,UAAA;AAAA,MAAA,gBAAA1E,EAAC,OAAA,EAAI,WAAU,0CACb,UAAA;AAAA,QAAA,gBAAAtE,EAAC,QAAA,EAAK,WAAU,uBAAsB,UAAA,oBAAgB;AAAA,QACtD,gBAAAA,EAAC,QAAA,EAAK,WAAU,4BAA2B,UAAA,yBAAA,CAAsB;AAAA,MAAA,GACnE;AAAA,wBACCmY,IAAA,EAAS,OAAO,KAAK,OAAM,WAAU,WAAU,QAAO;AAAA,MACvD,gBAAAnY,EAAC,KAAA,EAAE,WAAU,4BAA2B,UAAA,oEAAA,CAAiE;AAAA,IAAA,EAAA,CAC3G,EAAA,CACF;AAAA,IAGA,gBAAAsE,EAAC,OAAA,EAAI,WAAU,SACb,UAAA;AAAA,MAAA,gBAAAA,EAAC,MAAA,EAAG,WAAU,8EACZ,UAAA;AAAA,QAAA,gBAAAtE,EAACkY,IAAA,EAAO,WAAU,2BAAA,CAA2B;AAAA,QAAE;AAAA,MAAA,GAEjD;AAAA,MAEA,gBAAAlY,EAAC,OAAA,EAAI,WAAU,yCACZ,UAAA2X,EAAY,IAAI,CAACS,GAAStN,MACzB,gBAAAxG,EAACyE,GAAA,EAAiB,WAAU,qCAC1B,UAAA;AAAA,QAAA,gBAAA/I,EAACsN,KAAW,WAAU,QACpB,UAAA,gBAAAhJ,EAAC,OAAA,EAAI,WAAU,6CACb,UAAA;AAAA,UAAA,gBAAAA,EAAC,OAAA,EAAI,WAAU,2BACb,UAAA;AAAA,YAAA,gBAAAtE,EAAC,OAAA,EAAI,WAAU,iDACZ,UAAAoY,EAAQ,MACX;AAAA,YACA,gBAAApY,EAAC,MAAA,EAAG,WAAU,yBAAyB,YAAQ,MAAA,CAAM;AAAA,UAAA,GACvD;AAAA,UACA,gBAAAA;AAAA,YAACoN;AAAA,YAAA;AAAA,cACC,OAAM;AAAA,cACN,SAAQ;AAAA,cACR,MAAK;AAAA,cACL,cAAc,gBAAApN,EAAC6V,IAAA,EAAY,WAAU,UAAA,CAAU;AAAA,cAChD,UAAA;AAAA,YAAA;AAAA,UAAA;AAAA,QAED,EAAA,CACF,EAAA,CACF;AAAA,QACA,gBAAA7V,EAACgJ,GAAA,EAAS,WAAU,QAClB,UAAA,gBAAAhJ,EAAC,OAAE,WAAU,oBAAoB,UAAAoY,EAAQ,YAAA,CAAY,EAAA,CACvD;AAAA,MAAA,EAAA,GArBStN,CAsBX,CACD,EAAA,CACH;AAAA,IAAA,GACF;AAAA,IAGA,gBAAAxG,EAACyE,GAAA,EAAK,WAAU,SACd,UAAA;AAAA,MAAA,gBAAA/I,EAACsN,GAAA,EACC,UAAA,gBAAAhJ,EAAC,MAAA,EAAG,WAAU,8CACZ,UAAA;AAAA,QAAA,gBAAAtE,EAAC6X,IAAA,EAAI,WAAU,2BAAA,CAA2B;AAAA,QAAE;AAAA,MAAA,EAAA,CAE9C,EAAA,CACF;AAAA,MACA,gBAAA7X,EAACgJ,GAAA,EACC,UAAA,gBAAAhJ,EAAC,OAAA,EAAI,WAAU,aACZ,UAAA+X,EAAa,IAAI,CAACM,GAAavN,MAC9B,gBAAAxG,EAAC,OAAA,EAAgB,WAAU,0BACzB,UAAA;AAAA,QAAA,gBAAAtE,EAAC6V,IAAA,EAAY,WAAU,gDAAA,CAAgD;AAAA,QACvE,gBAAA7V,EAAC,QAAA,EAAK,WAAU,oBAAoB,UAAAqY,EAAA,CAAY;AAAA,MAAA,KAFxCvN,CAGV,CACD,EAAA,CACH,EAAA,CACF;AAAA,IAAA,GACF;AAAA,IAGA,gBAAAxG,EAAC,OAAA,EAAI,WAAU,SACb,UAAA;AAAA,MAAA,gBAAAA,EAAC,MAAA,EAAG,WAAU,8EACZ,UAAA;AAAA,QAAA,gBAAAtE,EAACsY,IAAA,EAAM,WAAU,6BAAA,CAA6B;AAAA,QAAE;AAAA,MAAA,GAElD;AAAA,MAEA,gBAAAtY,EAAC,OAAA,EAAI,WAAU,yCACZ,UAAAgY,EAAiB,IAAI,CAACI,GAAStN,MAC9B,gBAAAxG,EAACyE,GAAA,EAAiB,WAAU,6CAC1B,UAAA;AAAA,QAAA,gBAAA/I,EAACsN,KAAW,WAAU,QACpB,UAAA,gBAAAhJ,EAAC,OAAA,EAAI,WAAU,6CACb,UAAA;AAAA,UAAA,gBAAAtE,EAAC,MAAA,EAAG,WAAU,yBAAyB,UAAAoY,EAAQ,OAAM;AAAA,UACrD,gBAAApY,EAACoN,KAAK,OAAM,aAAY,SAAQ,QAAO,MAAK,MACzC,UAAAgL,EAAQ,IAAA,CACX;AAAA,QAAA,EAAA,CACF,EAAA,CACF;AAAA,QACA,gBAAApY,EAACgJ,GAAA,EAAS,WAAU,QAClB,UAAA,gBAAAhJ,EAAC,OAAE,WAAU,oBAAoB,UAAAoY,EAAQ,YAAA,CAAY,EAAA,CACvD;AAAA,MAAA,EAAA,GAXStN,CAYX,CACD,EAAA,CACH;AAAA,IAAA,GACF;AAAA,IAGA,gBAAAxG,EAACyE,GAAA,EAAK,WAAU,SACd,UAAA;AAAA,MAAA,gBAAA/I,EAACsN,KACC,UAAA,gBAAAtN,EAAC,MAAA,EAAG,WAAU,8CAA6C,sCAE3D,EAAA,CACF;AAAA,MACA,gBAAAA,EAACgJ,GAAA,EACC,UAAA,gBAAA1E,EAAC,OAAA,EAAI,WAAU,aACb,UAAA;AAAA,QAAA,gBAAAA,EAAC,OAAA,EACC,UAAA;AAAA,UAAA,gBAAAtE,EAAC,MAAA,EAAG,WAAU,uCAAsC,UAAA,mBAAe;AAAA,UACnE,gBAAAsE,EAAC,MAAA,EAAG,WAAU,2CACZ,UAAA;AAAA,YAAA,gBAAAtE,EAAC,QAAG,UAAA,0DAAA,CAAuD;AAAA,YAC3D,gBAAAA,EAAC,QAAG,UAAA,mDAAA,CAAgD;AAAA,YACpD,gBAAAA,EAAC,QAAG,UAAA,oFAAA,CAAiF;AAAA,YACrF,gBAAAA,EAAC,QAAG,UAAA,kEAAA,CAA+D;AAAA,UAAA,EAAA,CACrE;AAAA,QAAA,GACF;AAAA,0BAEC,OAAA,EACC,UAAA;AAAA,UAAA,gBAAAA,EAAC,MAAA,EAAG,WAAU,uCAAsC,UAAA,oBAAgB;AAAA,UACpE,gBAAAsE,EAAC,MAAA,EAAG,WAAU,2CACZ,UAAA;AAAA,YAAA,gBAAAtE,EAAC,QAAG,UAAA,0DAAA,CAAuD;AAAA,YAC3D,gBAAAA,EAAC,QAAG,UAAA,qDAAA,CAAkD;AAAA,YACtD,gBAAAA,EAAC,QAAG,UAAA,2DAAA,CAAwD;AAAA,YAC5D,gBAAAA,EAAC,QAAG,UAAA,qDAAA,CAAkD;AAAA,YACtD,gBAAAA,EAAC,QAAG,UAAA,0EAAA,CAAuE;AAAA,YAC3E,gBAAAA,EAAC,QAAG,UAAA,+CAAA,CAA4C;AAAA,UAAA,EAAA,CAClD;AAAA,QAAA,GACF;AAAA,0BAEC,OAAA,EACC,UAAA;AAAA,UAAA,gBAAAA,EAAC,MAAA,EAAG,WAAU,uCAAsC,UAAA,gBAAY;AAAA,UAChE,gBAAAsE,EAAC,MAAA,EAAG,WAAU,2CACZ,UAAA;AAAA,YAAA,gBAAAtE,EAAC,QAAG,UAAA,iEAAA,CAA8D;AAAA,YAClE,gBAAAA,EAAC,QAAG,UAAA,oDAAA,CAAiD;AAAA,YACrD,gBAAAA,EAAC,QAAG,UAAA,6DAAA,CAA0D;AAAA,UAAA,EAAA,CAChE;AAAA,QAAA,EAAA,CACF;AAAA,MAAA,EAAA,CACF,EAAA,CACF;AAAA,IAAA,GACF;AAAA,IAiCA,gBAAAA,EAACuY,IAAA,EAAO,GAAG,EAAA,CAAG;AAAA,sBAGb,OAAA,EAAI,WAAU,wCACb,UAAA,gBAAAvY,EAAC,KAAA,EAAE,wEAA0D,EAAA,CAC/D;AAAA,EAAA,GACF;AAEJ,GCnRMwY,KAAoB,MAAM;AAC9B,QAAMC,IAAW;AAAA,IACf;AAAA,MACE,MAAM,gBAAAzY,EAAC6X,IAAA,EAAI,WAAU,UAAA,CAAU;AAAA,MAC/B,OAAO;AAAA,MACP,aAAa;AAAA,IAAA;AAAA,IAEf;AAAA,MACE,MAAM,gBAAA7X,EAAC0Y,IAAA,EAAQ,WAAU,UAAA,CAAU;AAAA,MACnC,OAAO;AAAA,MACP,aAAa;AAAA,IAAA;AAAA,IAEf;AAAA,MACE,MAAM,gBAAA1Y,EAAC2Y,IAAA,EAAO,WAAU,UAAA,CAAU;AAAA,MAClC,OAAO;AAAA,MACP,aAAa;AAAA,IAAA;AAAA,IAEf;AAAA,MACE,MAAM,gBAAA3Y,EAACwR,IAAA,EAAS,WAAU,UAAA,CAAU;AAAA,MACpC,OAAO;AAAA,MACP,aAAa;AAAA,IAAA;AAAA,IAEf;AAAA,MACE,MAAM,gBAAAxR,EAACqI,GAAA,EAAO,WAAU,UAAA,CAAU;AAAA,MAClC,OAAO;AAAA,MACP,aAAa;AAAA,IAAA;AAAA,IAEf;AAAA,MACE,MAAM,gBAAArI,EAAC4Y,IAAA,EAAS,WAAU,UAAA,CAAU;AAAA,MACpC,OAAO;AAAA,MACP,aAAa;AAAA,IAAA;AAAA,EACf,GAGIC,IAAa;AAAA,IACjB;AAAA,IAAc;AAAA,IAAS;AAAA,IAAY;AAAA,IAAU;AAAA,IAAQ;AAAA,IAAQ;AAAA,IAC7D;AAAA,IAAU;AAAA,IAAgB;AAAA,IAAgB;AAAA,IAAS;AAAA,IAAY;AAAA,IAC/D;AAAA,IAAe;AAAA,IAAU;AAAA,EAAA;AAG3B,SACE,gBAAAvU,EAAC,OAAA,EAAI,WAAU,yCAEb,UAAA;AAAA,IAAA,gBAAAA,EAAC,OAAA,EAAI,WAAU,qBACb,UAAA;AAAA,MAAA,gBAAAtE,EAAC,OAAA,EAAI,WAAU,4BACb,UAAA,gBAAAA;AAAA,QAACoN;AAAA,QAAA;AAAA,UACC,OAAM;AAAA,UACN,SAAQ;AAAA,UACR,cAAc,gBAAApN,EAAC8Y,IAAA,EAAS,WAAU,UAAA,CAAU;AAAA,UAC5C,MAAK;AAAA,UACN,UAAA;AAAA,QAAA;AAAA,MAAA,GAGH;AAAA,MAEA,gBAAA9Y,EAAC,MAAA,EAAG,WAAU,wHAAuH,UAAA,qBAErI;AAAA,MAEA,gBAAAA,EAAC,KAAA,EAAE,WAAU,mDAAkD,UAAA,uGAAA,CAE/D;AAAA,IAAA,GACF;AAAA,IAGA,gBAAAsE,EAACyE,GAAA,EAAK,WAAU,QACd,UAAA;AAAA,MAAA,gBAAA/I,EAACsN,GAAA,EACC,UAAA,gBAAAhJ,EAAC,MAAA,EAAG,WAAU,8CACZ,UAAA;AAAA,QAAA,gBAAAtE,EAACkY,IAAA,EAAO,WAAU,2BAAA,CAA2B;AAAA,QAAE;AAAA,MAAA,EAAA,CAEjD,EAAA,CACF;AAAA,MACA,gBAAAlY,EAACgJ,GAAA,EACC,UAAA,gBAAA1E,EAAC,OAAA,EAAI,WAAU,aACb,UAAA;AAAA,QAAA,gBAAAA,EAAC,OAAA,EACC,UAAA;AAAA,UAAA,gBAAAtE,EAAC,MAAA,EAAG,WAAU,8BAA6B,UAAA,gBAAY;AAAA,UACvD,gBAAAsE,EAAC,OAAA,EAAI,WAAU,aACb,UAAA;AAAA,YAAA,gBAAAA,EAAC,OAAA,EACC,UAAA;AAAA,cAAA,gBAAAtE,EAAC,KAAA,EAAE,WAAU,iCAAgC,UAAA,kDAA8C;AAAA,cAC3F,gBAAAA;AAAA,gBAAC+Y;AAAA,gBAAA;AAAA,kBACC,QAAO;AAAA,kBACP,SAAQ;AAAA,kBACR,OAAM;AAAA,kBACN,WAAU;AAAA,kBACV,YAAY;AAAA,oBACV,MAAM;AAAA,oBACN,KAAK;AAAA,kBAAA;AAAA,kBAER,UAAA;AAAA,gBAAA;AAAA,cAAA;AAAA,YAED,GACF;AAAA,8BACC,OAAA,EACC,UAAA;AAAA,cAAA,gBAAA/Y,EAAC,KAAA,EAAE,WAAU,iCAAgC,UAAA,+CAA2C;AAAA,cACxF,gBAAAA;AAAA,gBAAC+Y;AAAA,gBAAA;AAAA,kBACC,QAAO;AAAA,kBACP,SAAQ;AAAA,kBACR,OAAM;AAAA,kBACN,WAAU;AAAA,kBACV,YAAY;AAAA,oBACV,MAAM;AAAA,oBACN,KAAK;AAAA,kBAAA;AAAA,kBAER,UAAA;AAAA,gBAAA;AAAA,cAAA;AAAA,YAED,EAAA,CACF;AAAA,UAAA,EAAA,CACF;AAAA,QAAA,GACF;AAAA,0BAEC,OAAA,EACC,UAAA;AAAA,UAAA,gBAAA/Y,EAAC,MAAA,EAAG,WAAU,8BAA6B,UAAA,yBAAqB;AAAA,UAChE,gBAAAsE,EAAC,OAAA,EAAI,WAAU,yCACb,UAAA;AAAA,YAAA,gBAAAA,EAACyE,GAAA,EAAK,WAAU,oCACd,UAAA;AAAA,cAAA,gBAAA/I,EAACsN,GAAA,EAAW,WAAU,QACpB,UAAA,gBAAAtN,EAAC,QAAG,WAAU,wCAAuC,+BAAiB,EAAA,CACxE;AAAA,gCACCgJ,GAAA,EAAS,WAAU,QAClB,UAAA,gBAAA1E,EAAC,MAAA,EAAG,WAAU,sCACZ,UAAA;AAAA,gBAAA,gBAAAA,EAAC,MAAA,EAAG,UAAA;AAAA,kBAAA;AAAA,kBAAE,gBAAAtE,EAACgZ,GAAA,EAAK,MAAK,MAAK,UAAA,SAAK;AAAA,kBAAO;AAAA,gBAAA,GAAqB;AAAA,kCACtD,MAAA,EAAG,UAAA;AAAA,kBAAA;AAAA,kBAAE,gBAAAhZ,EAACgZ,GAAA,EAAK,MAAK,MAAK,UAAA,aAAS;AAAA,kBAAO;AAAA,gBAAA,GAAqB;AAAA,kCAC1D,MAAA,EAAG,UAAA;AAAA,kBAAA;AAAA,kBAAE,gBAAAhZ,EAACgZ,GAAA,EAAK,MAAK,MAAK,UAAA,iBAAa;AAAA,kBAAO;AAAA,gBAAA,GAAS;AAAA,kCAClD,MAAA,EAAG,UAAA;AAAA,kBAAA;AAAA,kBAAE,gBAAAhZ,EAACgZ,GAAA,EAAK,MAAK,MAAK,UAAA,iBAAa;AAAA,kBAAO;AAAA,gBAAA,EAAA,CAAU;AAAA,cAAA,EAAA,CACtD,EAAA,CACF;AAAA,YAAA,GACF;AAAA,YACA,gBAAA1U,EAACyE,GAAA,EAAK,WAAU,wCACd,UAAA;AAAA,cAAA,gBAAA/I,EAACsN,GAAA,EAAW,WAAU,QACpB,UAAA,gBAAAtN,EAAC,QAAG,WAAU,0CAAyC,qCAAuB,EAAA,CAChF;AAAA,gCACCgJ,GAAA,EAAS,WAAU,QAClB,UAAA,gBAAA1E,EAAC,MAAA,EAAG,WAAU,sCACZ,UAAA;AAAA,gBAAA,gBAAAA,EAAC,MAAA,EAAG,UAAA;AAAA,kBAAA;AAAA,kBAAE,gBAAAtE,EAACgZ,GAAA,EAAK,MAAK,MAAK,UAAA,gBAAY;AAAA,kBAAO;AAAA,gBAAA,GAAW;AAAA,kCACnD,MAAA,EAAG,UAAA;AAAA,kBAAA;AAAA,kBAAE,gBAAAhZ,EAACgZ,GAAA,EAAK,MAAK,MAAK,UAAA,QAAI;AAAA,kBAAO;AAAA,gBAAA,GAAU;AAAA,kCAC1C,MAAA,EAAG,UAAA;AAAA,kBAAA;AAAA,kBAAE,gBAAAhZ,EAACgZ,GAAA,EAAK,MAAK,MAAK,UAAA,eAAW;AAAA,kBAAO;AAAA,gBAAA,GAAS;AAAA,kCAChD,MAAA,EAAG,UAAA;AAAA,kBAAA;AAAA,kBAAE,gBAAAhZ,EAACgZ,GAAA,EAAK,MAAK,MAAK,UAAA,qBAAiB;AAAA,kBAAO;AAAA,gBAAA,EAAA,CAAS;AAAA,cAAA,EAAA,CACzD,EAAA,CACF;AAAA,YAAA,EAAA,CACF;AAAA,UAAA,EAAA,CACF;AAAA,QAAA,GACF;AAAA,0BAEC,OAAA,EACC,UAAA;AAAA,UAAA,gBAAAhZ,EAAC,MAAA,EAAG,WAAU,8BAA6B,UAAA,eAAW;AAAA,UACtD,gBAAAA;AAAA,YAAC+Y;AAAA,YAAA;AAAA,cACC,QAAO;AAAA,cACP,SAAQ;AAAA,cACR,OAAM;AAAA,cACN,WAAU;AAAA,cACV,YAAY;AAAA,gBACV,MAAM;AAAA,gBACN,KAAK;AAAA,cAAA;AAAA,cAGtB,UAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAA;AAAA,UAAA;AAAA,QAMa,EAAA,CACF;AAAA,MAAA,EAAA,CACF,EAAA,CACF;AAAA,IAAA,GACF;AAAA,IAGA,gBAAAzU,EAAC,OAAA,EAAI,WAAU,SACb,UAAA;AAAA,MAAA,gBAAAA,EAAC,MAAA,EAAG,WAAU,8EACZ,UAAA;AAAA,QAAA,gBAAAtE,EAAC6X,IAAA,EAAI,WAAU,2BAAA,CAA2B;AAAA,QAAE;AAAA,MAAA,GAE9C;AAAA,MAEA,gBAAA7X,EAAC,OAAA,EAAI,WAAU,wDACZ,UAAAyY,EAAS,IAAI,CAACL,GAAStN,MACtB,gBAAAxG,EAACyE,GAAA,EAAiB,WAAU,qCAC1B,UAAA;AAAA,QAAA,gBAAA/I,EAACsN,KAAW,WAAU,QACpB,UAAA,gBAAAhJ,EAAC,OAAA,EAAI,WAAU,2BACb,UAAA;AAAA,UAAA,gBAAAtE,EAAC,OAAA,EAAI,WAAU,iDACZ,UAAAoY,EAAQ,MACX;AAAA,UACA,gBAAApY,EAAC,MAAA,EAAG,WAAU,yBAAyB,YAAQ,MAAA,CAAM;AAAA,QAAA,EAAA,CACvD,EAAA,CACF;AAAA,QACA,gBAAAA,EAACgJ,GAAA,EAAS,WAAU,QAClB,UAAA,gBAAAhJ,EAAC,OAAE,WAAU,oBAAoB,UAAAoY,EAAQ,YAAA,CAAY,EAAA,CACvD;AAAA,MAAA,EAAA,GAXStN,CAYX,CACD,EAAA,CACH;AAAA,IAAA,GACF;AAAA,IAGA,gBAAAxG,EAACyE,GAAA,EAAK,WAAU,QACd,UAAA;AAAA,MAAA,gBAAA/I,EAACsN,GAAA,EACC,UAAA,gBAAAhJ,EAAC,MAAA,EAAG,WAAU,8CACZ,UAAA;AAAA,QAAA,gBAAAtE,EAACwR,IAAA,EAAS,WAAU,6BAAA,CAA6B;AAAA,QAAE;AAAA,MAAA,EAAA,CAErD,EAAA,CACF;AAAA,MACA,gBAAAxR,EAACgJ,KACC,UAAA,gBAAAhJ,EAAC,OAAA,EAAI,WAAU,wBACZ,UAAA6Y,EAAW,IAAI,CAACxY,MACf,gBAAAL;AAAA,QAACoN;AAAA,QAAA;AAAA,UAEC,SAAQ;AAAA,UACR,OAAM;AAAA,UACN,MAAK;AAAA,UAEJ,UAAA/M;AAAA,QAAA;AAAA,QALIA;AAAA,MAAA,CAOR,GACH,EAAA,CACF;AAAA,IAAA,GACF;AAAA,IAGA,gBAAAiE,EAACyE,GAAA,EAAK,WAAU,QACd,UAAA;AAAA,MAAA,gBAAA/I,EAACsN,GAAA,EACC,UAAA,gBAAAhJ,EAAC,MAAA,EAAG,WAAU,8CACZ,UAAA;AAAA,QAAA,gBAAAtE,EAAC4Y,IAAA,EAAS,WAAU,2BAAA,CAA2B;AAAA,QAAE;AAAA,MAAA,EAAA,CAEnD,EAAA,CACF;AAAA,MACA,gBAAA5Y,EAACgJ,GAAA,EACC,UAAA,gBAAA1E,EAAC,OAAA,EAAI,WAAU,aACb,UAAA;AAAA,QAAA,gBAAAA,EAAC,OAAA,EACC,UAAA;AAAA,UAAA,gBAAAtE,EAAC,MAAA,EAAG,WAAU,8BAA6B,UAAA,wBAAoB;AAAA,UAC/D,gBAAAA;AAAA,YAAC+Y;AAAA,YAAA;AAAA,cACC,QAAO;AAAA,cACP,SAAQ;AAAA,cACR,OAAM;AAAA,cACN,WAAU;AAAA,cACV,YAAY;AAAA,gBACV,MAAM;AAAA,gBACN,KAAK;AAAA,cAAA;AAAA,cAGtB,UAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAA;AAAA,UAAA;AAAA,QA0Ba,GACF;AAAA,0BAEC,OAAA,EACC,UAAA;AAAA,UAAA,gBAAA/Y,EAAC,MAAA,EAAG,WAAU,8BAA6B,UAAA,uBAAmB;AAAA,UAC9D,gBAAAA;AAAA,YAAC+Y;AAAA,YAAA;AAAA,cACC,QAAO;AAAA,cACP,SAAQ;AAAA,cACR,OAAM;AAAA,cACN,WAAU;AAAA,cACV,YAAY;AAAA,gBACV,MAAM;AAAA,gBACN,KAAK;AAAA,cAAA;AAAA,cAGtB,UAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAA;AAAA,UAAA;AAAA,QAgBa,EAAA,CACF;AAAA,MAAA,EAAA,CACF,EAAA,CACF;AAAA,IAAA,GACF;AAAA,IAGA,gBAAAzU,EAACyE,GAAA,EAAK,WAAU,QACd,UAAA;AAAA,MAAA,gBAAA/I,EAACsN,GAAA,EACC,UAAA,gBAAAhJ,EAAC,MAAA,EAAG,WAAU,8CACZ,UAAA;AAAA,QAAA,gBAAAtE,EAACwR,IAAA,EAAS,WAAU,2BAAA,CAA2B;AAAA,QAAE;AAAA,MAAA,EAAA,CAEnD,EAAA,CACF;AAAA,MACA,gBAAAxR,EAACgJ,GAAA,EACC,UAAA,gBAAA1E,EAAC,OAAA,EAAI,WAAU,aACb,UAAA;AAAA,QAAA,gBAAAA,EAAC,OAAA,EACC,UAAA;AAAA,UAAA,gBAAAtE,EAAC,MAAA,EAAG,WAAU,8BAA6B,UAAA,iBAAa;AAAA,UACxD,gBAAAA;AAAA,YAAC+Y;AAAA,YAAA;AAAA,cACC,QAAO;AAAA,cACP,SAAQ;AAAA,cACR,OAAM;AAAA,cACN,WAAU;AAAA,cACV,YAAY;AAAA,gBACV,MAAM;AAAA,gBACN,KAAK;AAAA,cAAA;AAAA,cAGtB,UAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAA;AAAA,UAAA;AAAA,QAOa,GACF;AAAA,0BAEC,OAAA,EACC,UAAA;AAAA,UAAA,gBAAA/Y,EAAC,MAAA,EAAG,WAAU,8BAA6B,UAAA,oBAAgB;AAAA,UAC3D,gBAAAA;AAAA,YAAC+Y;AAAA,YAAA;AAAA,cACC,QAAO;AAAA,cACP,SAAQ;AAAA,cACR,OAAM;AAAA,cACN,WAAU;AAAA,cACV,YAAY;AAAA,gBACV,MAAM;AAAA,gBACN,KAAK;AAAA,cAAA;AAAA,cAGtB,UAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAA;AAAA,UAAA;AAAA,QAWa,EAAA,CACF;AAAA,MAAA,EAAA,CACF,EAAA,CACF;AAAA,IAAA,GACF;AAAA,IAGA,gBAAAzU,EAACyE,GAAA,EAAK,WAAU,QACd,UAAA;AAAA,MAAA,gBAAA/I,EAACsN,GAAA,EACC,UAAA,gBAAAhJ,EAAC,MAAA,EAAG,WAAU,8CACZ,UAAA;AAAA,QAAA,gBAAAtE,EAACiZ,IAAA,EAAS,WAAU,0BAAA,CAA0B;AAAA,QAAE;AAAA,MAAA,EAAA,CAElD,EAAA,CACF;AAAA,MACA,gBAAAjZ,EAACgJ,GAAA,EACC,UAAA,gBAAA1E,EAAC,OAAA,EAAI,WAAU,aACb,UAAA;AAAA,QAAA,gBAAAA,EAAC,OAAA,EACC,UAAA;AAAA,UAAA,gBAAAtE,EAAC,MAAA,EAAG,WAAU,8BAA6B,UAAA,wBAAoB;AAAA,UAC/D,gBAAAsE,EAAC,MAAA,EAAG,WAAU,oDACZ,UAAA;AAAA,YAAA,gBAAAA,EAAC,MAAA,EAAG,UAAA;AAAA,cAAA,gBAAAtE,EAACgZ,KAAK,UAAA,wBAAA,CAAqB;AAAA,cAAO;AAAA,YAAA,GAAqC;AAAA,8BAC1E,MAAA,EAAG,UAAA;AAAA,cAAA,gBAAAhZ,EAACgZ,KAAK,UAAA,cAAA,CAAW;AAAA,cAAO;AAAA,YAAA,GAA8B;AAAA,8BACzD,MAAA,EAAG,UAAA;AAAA,cAAA,gBAAAhZ,EAACgZ,KAAK,UAAA,eAAA,CAAY;AAAA,cAAO;AAAA,YAAA,GAAuC;AAAA,8BACnE,MAAA,EAAG,UAAA;AAAA,cAAA,gBAAAhZ,EAACgZ,KAAK,UAAA,sBAAA,CAAmB;AAAA,cAAO;AAAA,YAAA,GAAwC;AAAA,8BAC3E,MAAA,EAAG,UAAA;AAAA,cAAA,gBAAAhZ,EAACgZ,KAAK,UAAA,eAAA,CAAY;AAAA,cAAO;AAAA,YAAA,GAAmC;AAAA,8BAC/D,MAAA,EAAG,UAAA;AAAA,cAAA,gBAAAhZ,EAACgZ,KAAK,UAAA,kBAAA,CAAe;AAAA,cAAO;AAAA,YAAA,EAAA,CAA0B;AAAA,UAAA,EAAA,CAC5D;AAAA,QAAA,GACF;AAAA,0BAEC,OAAA,EACC,UAAA;AAAA,UAAA,gBAAAhZ,EAAC,MAAA,EAAG,WAAU,8BAA6B,UAAA,SAAK;AAAA,4BAC/C,OAAA,EAAI,WAAU,mBACb,UAAA,gBAAAsE,EAAC,SAAA,EAAM,WAAU,kBACf,UAAA;AAAA,YAAA,gBAAAtE,EAAC,SAAA,EACC,UAAA,gBAAAsE,EAAC,MAAA,EAAG,WAAU,+BACZ,UAAA;AAAA,cAAA,gBAAAtE,EAAC,MAAA,EAAG,WAAU,iBAAgB,UAAA,aAAS;AAAA,cACvC,gBAAAA,EAAC,MAAA,EAAG,WAAU,iBAAgB,UAAA,QAAI;AAAA,cAClC,gBAAAA,EAAC,MAAA,EAAG,WAAU,iBAAgB,UAAA,QAAI;AAAA,cAClC,gBAAAA,EAAC,MAAA,EAAG,WAAU,iBAAgB,UAAA,cAAA,CAAW;AAAA,YAAA,EAAA,CAC3C,EAAA,CACF;AAAA,YACA,gBAAAsE,EAAC,SAAA,EAAM,WAAU,oBACf,UAAA;AAAA,cAAA,gBAAAA,EAAC,MAAA,EAAG,WAAU,+BACZ,UAAA;AAAA,gBAAA,gBAAAtE,EAAC,QAAG,WAAU,OAAM,UAAA,gBAAAA,EAACgZ,GAAA,EAAK,0BAAY,EAAA,CAAO;AAAA,gBAC7C,gBAAAhZ,EAAC,MAAA,EAAG,WAAU,OAAM,UAAA,QAAI;AAAA,gBACxB,gBAAAA,EAAC,MAAA,EAAG,WAAU,OAAM,UAAA,cAAU;AAAA,gBAC9B,gBAAAA,EAAC,MAAA,EAAG,WAAU,OAAM,UAAA,4BAAA,CAAyB;AAAA,cAAA,GAC/C;AAAA,cACA,gBAAAsE,EAAC,MAAA,EAAG,WAAU,+BACZ,UAAA;AAAA,gBAAA,gBAAAtE,EAAC,QAAG,WAAU,OAAM,UAAA,gBAAAA,EAACgZ,GAAA,EAAK,0BAAY,EAAA,CAAO;AAAA,gBAC7C,gBAAAhZ,EAAC,MAAA,EAAG,WAAU,OAAM,UAAA,YAAQ;AAAA,gBAC5B,gBAAAA,EAAC,MAAA,EAAG,WAAU,OAAM,UAAA,YAAQ;AAAA,gBAC5B,gBAAAA,EAAC,MAAA,EAAG,WAAU,OAAM,UAAA,0BAAA,CAAuB;AAAA,cAAA,GAC7C;AAAA,cACA,gBAAAsE,EAAC,MAAA,EAAG,WAAU,+BACZ,UAAA;AAAA,gBAAA,gBAAAtE,EAAC,QAAG,WAAU,OAAM,UAAA,gBAAAA,EAACgZ,GAAA,EAAK,yBAAW,EAAA,CAAO;AAAA,gBAC5C,gBAAAhZ,EAAC,MAAA,EAAG,WAAU,OAAM,UAAA,gBAAY;AAAA,gBAChC,gBAAAA,EAAC,MAAA,EAAG,WAAU,OAAM,UAAA,YAAQ;AAAA,gBAC5B,gBAAAA,EAAC,MAAA,EAAG,WAAU,OAAM,UAAA,sBAAA,CAAmB;AAAA,cAAA,EAAA,CACzC;AAAA,YAAA,EAAA,CACF;AAAA,UAAA,EAAA,CACF,EAAA,CACF;AAAA,QAAA,EAAA,CACF;AAAA,MAAA,EAAA,CACF,EAAA,CACF;AAAA,IAAA,GACF;AAAA,IAGA,gBAAAsE,EAACyE,GAAA,EAAK,WAAU,QACd,UAAA;AAAA,MAAA,gBAAA/I,EAACsN,GAAA,EACC,UAAA,gBAAAhJ,EAAC,MAAA,EAAG,WAAU,8CACZ,UAAA;AAAA,QAAA,gBAAAtE,EAACkZ,IAAA,EAAM,WAAU,2BAAA,CAA2B;AAAA,QAAE;AAAA,MAAA,EAAA,CAEhD,EAAA,CACF;AAAA,MACA,gBAAAlZ,EAACgJ,GAAA,EACC,UAAA,gBAAA1E,EAAC,OAAA,EAAI,WAAU,aACb,UAAA;AAAA,QAAA,gBAAAtE,EAAC,KAAA,EAAE,WAAU,oBAAmB,UAAA,wEAEhC;AAAA,QAEA,gBAAAsE,EAAC,OAAA,EAAI,WAAU,wBACb,UAAA;AAAA,UAAA,gBAAAA;AAAA,YAACC;AAAA,YAAA;AAAA,cACC,OAAM;AAAA,cACN,SAAQ;AAAA,cACR,cAAc,gBAAAvE,EAACmZ,IAAA,EAAO,WAAU,UAAA,CAAU;AAAA,cAC1C,IAAIC;AAAA,cACJ,MAAK;AAAA,cACL,YAAU;AAAA,cACX,UAAA;AAAA,gBAAA;AAAA,gBAEC,gBAAApZ,EAACqZ,IAAA,EAAa,WAAU,eAAA,CAAe;AAAA,cAAA;AAAA,YAAA;AAAA,UAAA;AAAA,UAGzC,gBAAA/U;AAAA,YAACC;AAAA,YAAA;AAAA,cACC,OAAM;AAAA,cACN,SAAQ;AAAA,cACR,cAAc,gBAAAvE,EAACsZ,IAAA,EAAQ,WAAU,UAAA,CAAU;AAAA,cAC3C,IAAIF;AAAA,cACJ,MAAK;AAAA,cACL,YAAU;AAAA,cACX,UAAA;AAAA,gBAAA;AAAA,gBAEC,gBAAApZ,EAACqZ,IAAA,EAAa,WAAU,eAAA,CAAe;AAAA,cAAA;AAAA,YAAA;AAAA,UAAA;AAAA,QACzC,EAAA,CACF;AAAA,MAAA,EAAA,CACF,EAAA,CACF;AAAA,IAAA,GACF;AAAA,IAGA,gBAAA/U,EAACyE,GAAA,EAAK,WAAU,QACd,UAAA;AAAA,MAAA,gBAAA/I,EAACsN,GAAA,EACC,UAAA,gBAAAhJ,EAAC,MAAA,EAAG,WAAU,8CACZ,UAAA;AAAA,QAAA,gBAAAtE,EAAC2Y,IAAA,EAAO,WAAU,2BAAA,CAA2B;AAAA,QAAE;AAAA,MAAA,EAAA,CAEjD,EAAA,CACF;AAAA,wBACC3P,GAAA,EACC,UAAA,gBAAAhJ,EAAC,OAAE,WAAU,oBAAmB,gGAEhC,EAAA,CACF;AAAA,IAAA,GACF;AAAA,IAEA,gBAAAA,EAACuY,IAAA,EAAO,GAAG,EAAA,CAAG;AAAA,sBAGb,OAAA,EAAI,WAAU,wCACb,UAAA,gBAAAvY,EAAC,KAAA,EAAE,0EAA4D,EAAA,CACjE;AAAA,EAAA,GACF;AAEJ,GC/fMuZ,KAAe,MAEjB,gBAAAvZ,EAAC,OAAA,EAAI,WAAU,8BACb,UAAA,gBAAAsE;AAAA,EAAC6M;AAAA,EAAA;AAAA,IACC,OAAM;AAAA,IACN,oBAAmB;AAAA,IACnB,WAAU;AAAA,IACV,YAAY;AAAA,MACV,MAAM;AAAA,MACN,SACE;AAAA,MACF,QAAQ;AAAA,MACR,KAAK;AAAA,IAAA;AAAA,IAGP,UAAA;AAAA,MAAA,gBAAAnR;AAAA,QAACoR;AAAA,QAAA;AAAA,UAEC,OACE,gBAAA9M,EAAC,OAAA,EAAI,WAAU,2BACb,UAAA;AAAA,YAAA,gBAAAtE,EAACkY,IAAA,EAAO,WAAU,UAAA,CAAU;AAAA,YAC5B,gBAAAlY,EAAC,UAAK,UAAA,aAAA,CAAU;AAAA,UAAA,GAClB;AAAA,UAGF,4BAAC0X,IAAA,CAAA,CAAiB;AAAA,QAAA;AAAA,QARd;AAAA,MAAA;AAAA,MAUN,gBAAA1X;AAAA,QAACoR;AAAA,QAAA;AAAA,UAEC,OACE,gBAAA9M,EAAC,OAAA,EAAI,WAAU,2BACb,UAAA;AAAA,YAAA,gBAAAtE,EAAC8Y,IAAA,EAAS,WAAU,UAAA,CAAU;AAAA,YAC9B,gBAAA9Y,EAAC,UAAK,UAAA,gBAAA,CAAa;AAAA,UAAA,GACrB;AAAA,UAGF,4BAACwY,IAAA,CAAA,CAAkB;AAAA,QAAA;AAAA,QARf;AAAA,MAAA;AAAA,IASN;AAAA,EAAA;AAAA,GAEJ;ACXJ,SAASgB,GAAgB;AAAA,EACvB,MAAAC;AAAA,EACA,SAAAC;AACF,GAGG;AACD,2BACG,OAAA,EAAI,WAAU,6CACb,UAAA,gBAAApV,EAAC,OAAA,EAAI,WAAU,qBACb,UAAA;AAAA,IAAA,gBAAAtE,EAAC,MAAA,EAAG,WAAU,sCAAqC,UAAA,sBAEnD;AAAA,IAGA,gBAAAA,EAAC,SAAI,WAAU,mBACb,4BAACsK,IAAA,EAAY,WAAU,IAAG,QAAO,MAC/B,UAAA;AAAA,MAAA,gBAAAtK;AAAA,QAACuE;AAAA,QAAA;AAAA,UACC,SAASkV,MAAS,YAAY,UAAU;AAAA,UACxC,OAAOA,MAAS,YAAY,cAAc;AAAA,UAC1C,SAAS,MAAMC,EAAQ,SAAS;AAAA,UACjC,UAAA;AAAA,QAAA;AAAA,MAAA;AAAA,MAGD,gBAAA1Z;AAAA,QAACuE;AAAA,QAAA;AAAA,UACC,SAASkV,MAAS,aAAa,UAAU;AAAA,UACzC,OAAOA,MAAS,aAAa,cAAc;AAAA,UAC3C,SAAS,MAAMC,EAAQ,UAAU;AAAA,UAClC,UAAA;AAAA,QAAA;AAAA,MAAA;AAAA,MAGD,gBAAApV;AAAA,QAACC;AAAA,QAAA;AAAA,UACC,SAASkV,MAAS,iBAAiB,UAAU;AAAA,UAC7C,OAAOA,MAAS,iBAAiB,cAAc;AAAA,UAC/C,SAAS,MAAMC,EAAQ,cAAc;AAAA,UACrC,cACE,gBAAA1Z,EAAC8X,IAAA,EAAS,WAAU,6CAAA,CAA6C;AAAA,UAEpE,UAAA;AAAA,YAAA;AAAA,YACY;AAAA,YACX,gBAAA9X;AAAA,cAACoN;AAAA,cAAA;AAAA,gBACC,MAAK;AAAA,gBACL,OAAM;AAAA,gBACN,SAAQ;AAAA,gBACR,WAAU;AAAA,gBACX,UAAA;AAAA,cAAA;AAAA,YAAA;AAAA,UAED;AAAA,QAAA;AAAA,MAAA;AAAA,IACF,EAAA,CACF,EAAA,CACF;AAAA,sBAGC,OAAA,EAAI,WAAU,mBACb,UAAA,gBAAA9I,EAAC,OAAA,EAAI,WAAU,uBAEb,UAAA;AAAA,MAAA,gBAAAA,EAAC,OAAA,EAAI,WAAU,cACb,UAAA;AAAA,QAAA,gBAAAtE;AAAA,UAACuE;AAAA,UAAA;AAAA,YACC,SAASkV,MAAS,YAAY,UAAU;AAAA,YACxC,OAAOA,MAAS,YAAY,cAAc;AAAA,YAC1C,SAAS,MAAMC,EAAQ,SAAS;AAAA,YAChC,WAAU;AAAA,YACV,MAAK;AAAA,YACN,UAAA;AAAA,UAAA;AAAA,QAAA;AAAA,QAGD,gBAAA1Z;AAAA,UAACuE;AAAA,UAAA;AAAA,YACC,SAASkV,MAAS,aAAa,UAAU;AAAA,YACzC,OAAOA,MAAS,aAAa,cAAc;AAAA,YAC3C,SAAS,MAAMC,EAAQ,UAAU;AAAA,YACjC,WAAU;AAAA,YACV,MAAK;AAAA,YACN,UAAA;AAAA,UAAA;AAAA,QAAA;AAAA,MAED,GACF;AAAA,MAGA,gBAAApV;AAAA,QAACC;AAAA,QAAA;AAAA,UACC,SAASkV,MAAS,iBAAiB,UAAU;AAAA,UAC7C,OAAOA,MAAS,iBAAiB,cAAc;AAAA,UAC/C,SAAS,MAAMC,EAAQ,cAAc;AAAA,UACrC,cACE,gBAAA1Z,EAAC8X,IAAA,EAAS,WAAU,6CAAA,CAA6C;AAAA,UAEnE,WAAU;AAAA,UACV,MAAK;AAAA,UACN,UAAA;AAAA,YAAA;AAAA,YACY;AAAA,YACX,gBAAA9X;AAAA,cAACoN;AAAA,cAAA;AAAA,gBACC,MAAK;AAAA,gBACL,OAAM;AAAA,gBACN,SAAQ;AAAA,gBACR,WAAU;AAAA,gBACX,UAAA;AAAA,cAAA;AAAA,YAAA;AAAA,UAED;AAAA,QAAA;AAAA,MAAA;AAAA,IACF,EAAA,CACF,EAAA,CACF;AAAA,IAGA,gBAAA9I,EAAC,OAAA,EAAI,WAAU,iCACZ,UAAA;AAAA,MAAAmV,MAAS,aACR;AAAA,MACDA,MAAS,cACR;AAAA,MACDA,MAAS,kBACR;AAAA,IAAA,EAAA,CACJ;AAAA,EAAA,EAAA,CACF,EAAA,CACF;AAEJ;AAEA,SAASE,KAAqB;AAC5B,QAAM,EAAE,OAAAtb,GAAO,SAAAW,EAAA,IAAYiB,EAAA,GACrB,EAAE,aAAAyO,GAAa,aAAAC,EAAA,IAAgBtQ,GAG/B;AAAA,IACJ,QAAQub;AAAA,IACR,QAAQC;AAAA,IACR,cAAcC;AAAA,EAAA,IACZ9K,EAAA,GAEE;AAAA,IACJ,QAAQ+K;AAAA,IACR,QAAQC;AAAA,IACR,cAAcC;AAAA,EAAA,IACZjL,EAAA;AAsCJ,SACE,gBAAA1K,EAAAiC,GAAA,EACE,UAAA;AAAA,IAAA,gBAAAjC,EAAC,OAAA,EAAI,WAAU,+DACb,UAAA;AAAA,MAAA,gBAAAtE,EAAC8T,IAAA,EAAmB;AAAA,MACpB,gBAAA9T,EAAC,SAAI,WAAU,+BACb,4BAACka,IAAA,EAAW,WAzCE,CAACzW,MAAwB;AAC7C,cAAM,EAAE,QAAA0W,GAAQ,MAAAC,EAAA,IAAS3W;AAEzB,YAAK2W,GAGL;AAAA,cACEA,EAAK,OAAO,iBACZ,OAAOD,EAAO,MAAO,YACrB,CAACA,EAAO,GAAG,SAAS,GAAG,GACvB;AACA,kBAAME,IAAYF,EAAO,IACnB/K,IAAWhP,EAAgBia,CAAS;AAC1C,YAAArb,EAAQ,SAASoQ,CAAQ;AACzB;AAAA,UACF;AAGA,cAAI+K,EAAO,OAAOC,EAAK,IAAI;AACzB,kBAAM1a,IAAWgP,EAAY,OAAO;AAAA,cAClC,CAAC/Q,MAAUA,EAAM,OAAOwc,EAAO;AAAA,YAAA,GAE3Bxa,IAAW+O,EAAY,OAAO;AAAA,cAClC,CAAC/Q,MAAUA,EAAM,OAAOyc,EAAK;AAAA,YAAA;AAG/B,YAAI1a,MAAa,MAAMC,MAAa,MAClCX,EAAQ,cAAcU,GAAUC,CAAQ;AAAA,UAE5C;AAAA;AAAA,MACF,GAW8C,YATvB,CAAC2a,MAA0B;AAAA,MAElD,GASW,UAAA;AAAA,QAAA,CAAC3L,KACA,gBAAA3O,EAAC,OAAA,EAAI,WAAU,4BACb,UAAA,gBAAAA,EAACyQ,MAAa,EAAA,CAChB;AAAA,QAIF,gBAAAzQ;AAAA,UAAC;AAAA,UAAA;AAAA,YACC,WAAW;AAAA;AAAA,gBAET2O,IAAc,WAAW,iBAAiB;AAAA;AAAA,YAG5C,4BAACF,IAAA,CAAA,CAAW;AAAA,UAAA;AAAA,QAAA;AAAA,QAIb,CAACE,KACA,gBAAA3O,EAAC,OAAA,EAAI,WAAU,4BACb,UAAA,gBAAAA,EAACiR,MAAgB,EAAA,CACnB;AAAA,MAAA,EAAA,CAEJ,EAAA,CACF;AAAA,MAGC,CAACtC,KACA,gBAAA3O,EAAC,OAAA,EAAI,WAAU,uDACb,UAAA,gBAAAsE,EAAC,OAAA,EAAI,WAAU,cACb,UAAA;AAAA,QAAA,gBAAAtE;AAAA,UAACuE;AAAA,UAAA;AAAA,YACC,MAAK;AAAA,YACL,SAAQ;AAAA,YACR,WAAU;AAAA,YACV,cAAc,gBAAAvE,EAACsZ,IAAA,EAAQ,MAAM,GAAA,CAAI;AAAA,YACjC,SAASO;AAAA,YACV,UAAA;AAAA,UAAA;AAAA,QAAA;AAAA,QAGD,gBAAA7Z;AAAA,UAACuE;AAAA,UAAA;AAAA,YACC,MAAK;AAAA,YACL,SAAQ;AAAA,YACR,WAAU;AAAA,YACV,cAAc,gBAAAvE,EAACwR,IAAA,EAAS,MAAM,GAAA,CAAI;AAAA,YAClC,SAASwI;AAAA,YACV,UAAA;AAAA,UAAA;AAAA,QAAA;AAAA,MAED,EAAA,CACF,EAAA,CACF;AAAA,IAAA,GAEJ;AAAA,IAGA,gBAAAha;AAAA,MAAC0P;AAAA,MAAA;AAAA,QACC,QAAQkK;AAAA,QACR,cAAcE;AAAA,QACd,MAAK;AAAA,QACL,WAAU;AAAA,QACV,YAAY;AAAA,UACV,MAAM;AAAA,UACN,UAAU;AAAA,QAAA;AAAA,QAGZ,UAAA,gBAAA9Z,EAAC2P,IAAA,EACE,UAAA,MACC,gBAAArL,EAAAiC,GAAA,EACE,UAAA;AAAA,UAAA,gBAAAjC,EAACuL,IAAA,EAAY,WAAU,uBACrB,UAAA;AAAA,YAAA,gBAAA7P,EAAC,MAAA,EAAG,WAAU,yBAAwB,UAAA,iBAAa;AAAA,YACnD,gBAAAA,EAAC,KAAA,EAAE,WAAU,4BAA2B,UAAA,2CAAA,CAExC;AAAA,UAAA,GACF;AAAA,UACA,gBAAAA,EAAC8P,IAAA,EACC,UAAA,gBAAA9P,EAACyQ,IAAA,CAAA,CAAa,EAAA,CAChB;AAAA,QAAA,EAAA,CACF,EAAA,CAEJ;AAAA,MAAA;AAAA,IAAA;AAAA,IAIF,gBAAAzQ;AAAA,MAAC0P;AAAA,MAAA;AAAA,QACC,QAAQqK;AAAA,QACR,cAAcE;AAAA,QACd,MAAK;AAAA,QACL,WAAU;AAAA,QACV,YAAY;AAAA,UACV,MAAM;AAAA,UACN,UAAU;AAAA,QAAA;AAAA,QAGZ,UAAA,gBAAAja,EAAC2P,IAAA,EACE,UAAA,MACC,gBAAArL,EAAAiC,GAAA,EACE,UAAA;AAAA,UAAA,gBAAAjC,EAACuL,IAAA,EAAY,WAAU,uBACrB,UAAA;AAAA,YAAA,gBAAA7P,EAAC,MAAA,EAAG,WAAU,yBAAwB,UAAA,oBAAgB;AAAA,YACtD,gBAAAA,EAAC,OAAE,WAAU,4BACV,YAAM,kBACH,YACE0O,EAAY,OAAO;AAAA,cACjB,CAAC3Q,MAAMA,EAAE,OAAOM,EAAM;AAAA,YAAA,GACrB,SAAS,gBACd,KACA,oCAAA,CACN;AAAA,UAAA,GACF;AAAA,UACA,gBAAA2B,EAAC8P,IAAA,EACC,UAAA,gBAAA9P,EAACiR,IAAA,CAAA,CAAgB,EAAA,CACnB;AAAA,QAAA,EAAA,CACF,EAAA,CAEJ;AAAA,MAAA;AAAA,IAAA;AAAA,EACF,GACF;AAEJ;AAEA,SAASsJ,KAAM;AACb,QAAM,CAACd,GAAMC,CAAO,IAAI3W,EAAkB,SAAS;AAEnD,SACE,gBAAA/C,EAACwa,IAAA,EACC,UAAA,gBAAAlW,EAAC,OAAA,EAAI,WAAU,8BACb,UAAA;AAAA,IAAA,gBAAAtE,EAACwZ,IAAA,EAAgB,MAAAC,GAAY,SAAAC,EAAA,CAAkB;AAAA,IAE9CD,MAAS,aACR,gBAAAzZ,EAACpB,IAAA,EACC,UAAA,gBAAAoB,EAAC2Z,MAAmB,GACtB;AAAA,IAEDF,MAAS,cAAc,gBAAAzZ,EAAC2W,IAAA,CAAA,CAAiB;AAAA,IACzC8C,MAAS,kBAAkB,gBAAAzZ,EAACuZ,IAAA,CAAA,CAAa;AAAA,EAAA,EAAA,CAC5C,EAAA,CACF;AAEJ;ACnVO,MAAMkB,KAAmBF;"}